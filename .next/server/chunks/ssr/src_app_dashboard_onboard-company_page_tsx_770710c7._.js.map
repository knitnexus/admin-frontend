{"version":3,"sources":["turbopack:///[project]/src/app/dashboard/onboard-company/page.tsx","turbopack:///[project]/node_modules/sonner/dist/index.mjs","turbopack:///[project]/src/components/Dashboard/ImagePreview.tsx","turbopack:///[project]/src/components/CompanyStep.tsx","turbopack:///[project]/src/components/Common/MultiEnumSelect.tsx","turbopack:///[project]/src/components/Forms/KnittinngMachineForm.tsx","turbopack:///[project]/src/components/Forms/YarnSpinningMachineForm.tsx","turbopack:///[project]/src/components/Forms/YarnProcessingMachineForm.tsx","turbopack:///[project]/src/components/Forms/WeavingMachineForm.tsx","turbopack:///[project]/src/components/Forms/DyeingMachineForm.tsx","turbopack:///[project]/src/components/Forms/FabricProcessingMachineForm.tsx","turbopack:///[project]/src/components/Forms/FabricFinishingMachineForm.tsx","turbopack:///[project]/src/components/Forms/WashingMachineForm.tsx","turbopack:///[project]/src/components/Forms/CuttingMachineForm.tsx","turbopack:///[project]/src/components/Forms/ComputerizedEmbroideryMachineForm.tsx","turbopack:///[project]/src/components/Forms/ManualEmbroideryMachineForm.tsx","turbopack:///[project]/src/components/Forms/FusingMachineForm.tsx","turbopack:///[project]/src/components/Forms/PrintingMachineForm.tsx","turbopack:///[project]/src/components/Forms/StitchingMachineForm.tsx","turbopack:///[project]/src/components/Forms/CheckingMachineForm.tsx","turbopack:///[project]/src/components/Forms/IronPackingMachineForm.tsx","turbopack:///[project]/src/components/Forms/KajaButtonMachineForm.tsx","turbopack:///[project]/src/components/Forms/MultiNeedleDoubleChainMachineForm.tsx","turbopack:///[project]/src/components/Forms/OilRemovingMendingCenterMachineForm.tsx","turbopack:///[project]/src/components/Forms/PatternMakinigCenterMachineForm.tsx","turbopack:///[project]/src/components/Forms/FilmScreenMakingCenterMachineForm.tsx","turbopack:///[project]/src/components/Forms/index.tsx","turbopack:///[project]/src/components/MachineryStep.tsx","turbopack:///[project]/src/components/ServiceStep.tsx"],"sourcesContent":["// app/dashboard/onboard-company/page.tsx\n\"use client\";\n\nimport React, { useState } from \"react\";\nimport { Toaster, toast } from \"sonner\";\nimport CompanyStep from \"../../../components/CompanyStep\";\nimport MachineryStep, {MachineData} from \"../../../components/MachineryStep\";\nimport ServiceStep from \"../../../components/ServiceStep\";\nimport {BACKEND_SERVICE_URL} from \"../../../../config\";\nimport { useRouter } from \"next/navigation\";\n\ntype Step = \"company\" | \"machinery\" | \"service\";\n\ninterface LocationData {\n\n    latitude: number;\n    longitude: number;\n}\n\nexport interface FormDataType {\n    name: string;\n    contactNumber: string;\n    gstNumber: string;\n    aboutCompany: string;\n    workType: string;\n    unitType: string;\n    unitSqFeet: string;\n    certifications: string[];\n    companyLogo: File | null;\n    unitImages: File[];\n    location: LocationData | null;\n    machinery: MachineData[] // you can type more strictly later\n    services: { title: string; description: string }[];\n}\nconst initialFormData: FormDataType = {\n    name: \"\",\n    contactNumber: \"\",\n    gstNumber: \"\",\n    aboutCompany: \"\",\n    workType: \"\",\n    unitType: \"\",\n    unitSqFeet: \"\",\n    certifications: [],\n    companyLogo: null,\n    unitImages: [],\n    location: null,\n    machinery: [],\n    services: [],\n}\n\nexport default function OnboardCompanyPage() {\n    const router = useRouter();\n    const [step, setStep] = useState<Step>(\"company\");\n    const [form, setForm] = useState<FormDataType>(initialFormData);\n    const [loading, setLoading] = useState(false);\n\n    const nextStep = () => {\n\n        if (step === \"company\") setStep(\"machinery\");\n        else if (step === \"machinery\") setStep(\"service\");\n    };\n\n    const prevStep = () => {\n        if (step === \"service\") setStep(\"machinery\");\n        else if (step === \"machinery\") setStep(\"company\");\n    };\n\n    const handleSubmit = async () => {\n        // optionally validate final requirement\n\n        if (!form.name || !form.contactNumber || !form.unitType || !form.workType) {\n            toast.error(\"Please fill all required company details\");\n            setStep(\"company\");\n            return;\n        }\n\n        setLoading(true);\n        try {\n            const fd = new FormData();\n            fd.append(\"name\", form.name);\n            fd.append(\"contactNumber\", form.contactNumber);\n            fd.append(\"gstNumber\", form.gstNumber);\n            fd.append(\"aboutCompany\", form.aboutCompany);\n            fd.append(\"workType\", form.workType);\n            fd.append(\"unitType\", form.unitType);\n            fd.append(\"unitSqFeet\", form.unitSqFeet);\n\n            form.certifications.forEach((c) => {\n                fd.append(\"certifications\", c);\n            });\n\n            if (form.companyLogo) {\n                fd.append(\"companyLogo\", form.companyLogo);\n            }\n\n            form.unitImages.forEach((file) => {\n                fd.append(\"unitImages\", file);\n            });\n\n            if (form.location) {\n                fd.append(\"location\", JSON.stringify(form.location));\n            }\n\n            fd.append(\"machinery\", JSON.stringify(form.machinery));\n            fd.append(\"services\", JSON.stringify(form.services));\n\n\n            const resp = await fetch(`${BACKEND_SERVICE_URL}/companies/onboard`, {\n                method: \"POST\",\n                credentials: \"include\",\n                body: fd,\n            });\n\n            const data = await resp.json();\n            if (resp.ok) {\n                toast.success(\"Company onboarded successfully\");\n                setStep(\"company\")\n                setForm(initialFormData)\n                router.refresh()\n\n                // maybe reset or redirect\n            } else {\n                toast.error(data.message || \"Failed to onboard\");\n            }\n        } catch (err) {\n            console.error(\"Submit error:\", err);\n            toast.error(\"Something went wrong\");\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    return (\n        <div className=\"max-w-3xl mx-auto p-6\">\n            <Toaster richColors />\n            <div className=\"mb-4\">\n                <p>Step {step === \"company\" ? 1 : step === \"machinery\" ? 2 : 3} / 3</p>\n            </div>\n\n            {step === \"company\" && (\n                <CompanyStep\n                    form={form}\n                    setForm={(updates) => setForm((prev) => ({ ...prev, ...updates }))}\n                    onNext={nextStep}\n                />\n            )}\n            {step === \"machinery\" && (\n                <MachineryStep\n                    form={form}\n                    setForm={(updates) => setForm((prev) => ({ ...prev, ...updates }))}\n                    onBack={prevStep}\n                    onNext={nextStep}\n                />\n            )}\n            {step === \"service\" && (\n                <ServiceStep\n                    form={form}\n                    setForm={(updates) => setForm((prev) => ({ ...prev, ...updates }))}\n                    onBack={prevStep}\n                    onSubmit={handleSubmit}\n                />\n            )}\n\n            {loading && <p className=\"mt-4 text-center\">Submitting...</p>}\n        </div>\n    );\n}\n","'use client';\nfunction __insertCSS(code) {\n  if (!code || typeof document == 'undefined') return\n  let head = document.head || document.getElementsByTagName('head')[0]\n  let style = document.createElement('style')\n  style.type = 'text/css'\n  head.appendChild(style)\n  ;style.styleSheet ? (style.styleSheet.cssText = code) : style.appendChild(document.createTextNode(code))\n}\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst getAsset = (type)=>{\n    switch(type){\n        case 'success':\n            return SuccessIcon;\n        case 'info':\n            return InfoIcon;\n        case 'warning':\n            return WarningIcon;\n        case 'error':\n            return ErrorIcon;\n        default:\n            return null;\n    }\n};\nconst bars = Array(12).fill(0);\nconst Loader = ({ visible, className })=>{\n    return /*#__PURE__*/ React.createElement(\"div\", {\n        className: [\n            'sonner-loading-wrapper',\n            className\n        ].filter(Boolean).join(' '),\n        \"data-visible\": visible\n    }, /*#__PURE__*/ React.createElement(\"div\", {\n        className: \"sonner-spinner\"\n    }, bars.map((_, i)=>/*#__PURE__*/ React.createElement(\"div\", {\n            className: \"sonner-loading-bar\",\n            key: `spinner-bar-${i}`\n        }))));\n};\nconst SuccessIcon = /*#__PURE__*/ React.createElement(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 20 20\",\n    fill: \"currentColor\",\n    height: \"20\",\n    width: \"20\"\n}, /*#__PURE__*/ React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\",\n    clipRule: \"evenodd\"\n}));\nconst WarningIcon = /*#__PURE__*/ React.createElement(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    fill: \"currentColor\",\n    height: \"20\",\n    width: \"20\"\n}, /*#__PURE__*/ React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M9.401 3.003c1.155-2 4.043-2 5.197 0l7.355 12.748c1.154 2-.29 4.5-2.599 4.5H4.645c-2.309 0-3.752-2.5-2.598-4.5L9.4 3.003zM12 8.25a.75.75 0 01.75.75v3.75a.75.75 0 01-1.5 0V9a.75.75 0 01.75-.75zm0 8.25a.75.75 0 100-1.5.75.75 0 000 1.5z\",\n    clipRule: \"evenodd\"\n}));\nconst InfoIcon = /*#__PURE__*/ React.createElement(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 20 20\",\n    fill: \"currentColor\",\n    height: \"20\",\n    width: \"20\"\n}, /*#__PURE__*/ React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a.75.75 0 000 1.5h.253a.25.25 0 01.244.304l-.459 2.066A1.75 1.75 0 0010.747 15H11a.75.75 0 000-1.5h-.253a.25.25 0 01-.244-.304l.459-2.066A1.75 1.75 0 009.253 9H9z\",\n    clipRule: \"evenodd\"\n}));\nconst ErrorIcon = /*#__PURE__*/ React.createElement(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 20 20\",\n    fill: \"currentColor\",\n    height: \"20\",\n    width: \"20\"\n}, /*#__PURE__*/ React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-5a.75.75 0 01.75.75v4.5a.75.75 0 01-1.5 0v-4.5A.75.75 0 0110 5zm0 10a1 1 0 100-2 1 1 0 000 2z\",\n    clipRule: \"evenodd\"\n}));\nconst CloseIcon = /*#__PURE__*/ React.createElement(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"12\",\n    height: \"12\",\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: \"currentColor\",\n    strokeWidth: \"1.5\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n}, /*#__PURE__*/ React.createElement(\"line\", {\n    x1: \"18\",\n    y1: \"6\",\n    x2: \"6\",\n    y2: \"18\"\n}), /*#__PURE__*/ React.createElement(\"line\", {\n    x1: \"6\",\n    y1: \"6\",\n    x2: \"18\",\n    y2: \"18\"\n}));\n\nconst useIsDocumentHidden = ()=>{\n    const [isDocumentHidden, setIsDocumentHidden] = React.useState(document.hidden);\n    React.useEffect(()=>{\n        const callback = ()=>{\n            setIsDocumentHidden(document.hidden);\n        };\n        document.addEventListener('visibilitychange', callback);\n        return ()=>window.removeEventListener('visibilitychange', callback);\n    }, []);\n    return isDocumentHidden;\n};\n\nlet toastsCounter = 1;\nclass Observer {\n    constructor(){\n        // We use arrow functions to maintain the correct `this` reference\n        this.subscribe = (subscriber)=>{\n            this.subscribers.push(subscriber);\n            return ()=>{\n                const index = this.subscribers.indexOf(subscriber);\n                this.subscribers.splice(index, 1);\n            };\n        };\n        this.publish = (data)=>{\n            this.subscribers.forEach((subscriber)=>subscriber(data));\n        };\n        this.addToast = (data)=>{\n            this.publish(data);\n            this.toasts = [\n                ...this.toasts,\n                data\n            ];\n        };\n        this.create = (data)=>{\n            var _data_id;\n            const { message, ...rest } = data;\n            const id = typeof (data == null ? void 0 : data.id) === 'number' || ((_data_id = data.id) == null ? void 0 : _data_id.length) > 0 ? data.id : toastsCounter++;\n            const alreadyExists = this.toasts.find((toast)=>{\n                return toast.id === id;\n            });\n            const dismissible = data.dismissible === undefined ? true : data.dismissible;\n            if (this.dismissedToasts.has(id)) {\n                this.dismissedToasts.delete(id);\n            }\n            if (alreadyExists) {\n                this.toasts = this.toasts.map((toast)=>{\n                    if (toast.id === id) {\n                        this.publish({\n                            ...toast,\n                            ...data,\n                            id,\n                            title: message\n                        });\n                        return {\n                            ...toast,\n                            ...data,\n                            id,\n                            dismissible,\n                            title: message\n                        };\n                    }\n                    return toast;\n                });\n            } else {\n                this.addToast({\n                    title: message,\n                    ...rest,\n                    dismissible,\n                    id\n                });\n            }\n            return id;\n        };\n        this.dismiss = (id)=>{\n            if (id) {\n                this.dismissedToasts.add(id);\n                requestAnimationFrame(()=>this.subscribers.forEach((subscriber)=>subscriber({\n                            id,\n                            dismiss: true\n                        })));\n            } else {\n                this.toasts.forEach((toast)=>{\n                    this.subscribers.forEach((subscriber)=>subscriber({\n                            id: toast.id,\n                            dismiss: true\n                        }));\n                });\n            }\n            return id;\n        };\n        this.message = (message, data)=>{\n            return this.create({\n                ...data,\n                message\n            });\n        };\n        this.error = (message, data)=>{\n            return this.create({\n                ...data,\n                message,\n                type: 'error'\n            });\n        };\n        this.success = (message, data)=>{\n            return this.create({\n                ...data,\n                type: 'success',\n                message\n            });\n        };\n        this.info = (message, data)=>{\n            return this.create({\n                ...data,\n                type: 'info',\n                message\n            });\n        };\n        this.warning = (message, data)=>{\n            return this.create({\n                ...data,\n                type: 'warning',\n                message\n            });\n        };\n        this.loading = (message, data)=>{\n            return this.create({\n                ...data,\n                type: 'loading',\n                message\n            });\n        };\n        this.promise = (promise, data)=>{\n            if (!data) {\n                // Nothing to show\n                return;\n            }\n            let id = undefined;\n            if (data.loading !== undefined) {\n                id = this.create({\n                    ...data,\n                    promise,\n                    type: 'loading',\n                    message: data.loading,\n                    description: typeof data.description !== 'function' ? data.description : undefined\n                });\n            }\n            const p = Promise.resolve(promise instanceof Function ? promise() : promise);\n            let shouldDismiss = id !== undefined;\n            let result;\n            const originalPromise = p.then(async (response)=>{\n                result = [\n                    'resolve',\n                    response\n                ];\n                const isReactElementResponse = React.isValidElement(response);\n                if (isReactElementResponse) {\n                    shouldDismiss = false;\n                    this.create({\n                        id,\n                        type: 'default',\n                        message: response\n                    });\n                } else if (isHttpResponse(response) && !response.ok) {\n                    shouldDismiss = false;\n                    const promiseData = typeof data.error === 'function' ? await data.error(`HTTP error! status: ${response.status}`) : data.error;\n                    const description = typeof data.description === 'function' ? await data.description(`HTTP error! status: ${response.status}`) : data.description;\n                    const isExtendedResult = typeof promiseData === 'object' && !React.isValidElement(promiseData);\n                    const toastSettings = isExtendedResult ? promiseData : {\n                        message: promiseData\n                    };\n                    this.create({\n                        id,\n                        type: 'error',\n                        description,\n                        ...toastSettings\n                    });\n                } else if (response instanceof Error) {\n                    shouldDismiss = false;\n                    const promiseData = typeof data.error === 'function' ? await data.error(response) : data.error;\n                    const description = typeof data.description === 'function' ? await data.description(response) : data.description;\n                    const isExtendedResult = typeof promiseData === 'object' && !React.isValidElement(promiseData);\n                    const toastSettings = isExtendedResult ? promiseData : {\n                        message: promiseData\n                    };\n                    this.create({\n                        id,\n                        type: 'error',\n                        description,\n                        ...toastSettings\n                    });\n                } else if (data.success !== undefined) {\n                    shouldDismiss = false;\n                    const promiseData = typeof data.success === 'function' ? await data.success(response) : data.success;\n                    const description = typeof data.description === 'function' ? await data.description(response) : data.description;\n                    const isExtendedResult = typeof promiseData === 'object' && !React.isValidElement(promiseData);\n                    const toastSettings = isExtendedResult ? promiseData : {\n                        message: promiseData\n                    };\n                    this.create({\n                        id,\n                        type: 'success',\n                        description,\n                        ...toastSettings\n                    });\n                }\n            }).catch(async (error)=>{\n                result = [\n                    'reject',\n                    error\n                ];\n                if (data.error !== undefined) {\n                    shouldDismiss = false;\n                    const promiseData = typeof data.error === 'function' ? await data.error(error) : data.error;\n                    const description = typeof data.description === 'function' ? await data.description(error) : data.description;\n                    const isExtendedResult = typeof promiseData === 'object' && !React.isValidElement(promiseData);\n                    const toastSettings = isExtendedResult ? promiseData : {\n                        message: promiseData\n                    };\n                    this.create({\n                        id,\n                        type: 'error',\n                        description,\n                        ...toastSettings\n                    });\n                }\n            }).finally(()=>{\n                if (shouldDismiss) {\n                    // Toast is still in load state (and will be indefinitely — dismiss it)\n                    this.dismiss(id);\n                    id = undefined;\n                }\n                data.finally == null ? void 0 : data.finally.call(data);\n            });\n            const unwrap = ()=>new Promise((resolve, reject)=>originalPromise.then(()=>result[0] === 'reject' ? reject(result[1]) : resolve(result[1])).catch(reject));\n            if (typeof id !== 'string' && typeof id !== 'number') {\n                // cannot Object.assign on undefined\n                return {\n                    unwrap\n                };\n            } else {\n                return Object.assign(id, {\n                    unwrap\n                });\n            }\n        };\n        this.custom = (jsx, data)=>{\n            const id = (data == null ? void 0 : data.id) || toastsCounter++;\n            this.create({\n                jsx: jsx(id),\n                id,\n                ...data\n            });\n            return id;\n        };\n        this.getActiveToasts = ()=>{\n            return this.toasts.filter((toast)=>!this.dismissedToasts.has(toast.id));\n        };\n        this.subscribers = [];\n        this.toasts = [];\n        this.dismissedToasts = new Set();\n    }\n}\nconst ToastState = new Observer();\n// bind this to the toast function\nconst toastFunction = (message, data)=>{\n    const id = (data == null ? void 0 : data.id) || toastsCounter++;\n    ToastState.addToast({\n        title: message,\n        ...data,\n        id\n    });\n    return id;\n};\nconst isHttpResponse = (data)=>{\n    return data && typeof data === 'object' && 'ok' in data && typeof data.ok === 'boolean' && 'status' in data && typeof data.status === 'number';\n};\nconst basicToast = toastFunction;\nconst getHistory = ()=>ToastState.toasts;\nconst getToasts = ()=>ToastState.getActiveToasts();\n// We use `Object.assign` to maintain the correct types as we would lose them otherwise\nconst toast = Object.assign(basicToast, {\n    success: ToastState.success,\n    info: ToastState.info,\n    warning: ToastState.warning,\n    error: ToastState.error,\n    custom: ToastState.custom,\n    message: ToastState.message,\n    promise: ToastState.promise,\n    dismiss: ToastState.dismiss,\n    loading: ToastState.loading\n}, {\n    getHistory,\n    getToasts\n});\n\n__insertCSS(\"[data-sonner-toaster][dir=ltr],html[dir=ltr]{--toast-icon-margin-start:-3px;--toast-icon-margin-end:4px;--toast-svg-margin-start:-1px;--toast-svg-margin-end:0px;--toast-button-margin-start:auto;--toast-button-margin-end:0;--toast-close-button-start:0;--toast-close-button-end:unset;--toast-close-button-transform:translate(-35%, -35%)}[data-sonner-toaster][dir=rtl],html[dir=rtl]{--toast-icon-margin-start:4px;--toast-icon-margin-end:-3px;--toast-svg-margin-start:0px;--toast-svg-margin-end:-1px;--toast-button-margin-start:0;--toast-button-margin-end:auto;--toast-close-button-start:unset;--toast-close-button-end:0;--toast-close-button-transform:translate(35%, -35%)}[data-sonner-toaster]{position:fixed;width:var(--width);font-family:ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;--gray1:hsl(0, 0%, 99%);--gray2:hsl(0, 0%, 97.3%);--gray3:hsl(0, 0%, 95.1%);--gray4:hsl(0, 0%, 93%);--gray5:hsl(0, 0%, 90.9%);--gray6:hsl(0, 0%, 88.7%);--gray7:hsl(0, 0%, 85.8%);--gray8:hsl(0, 0%, 78%);--gray9:hsl(0, 0%, 56.1%);--gray10:hsl(0, 0%, 52.3%);--gray11:hsl(0, 0%, 43.5%);--gray12:hsl(0, 0%, 9%);--border-radius:8px;box-sizing:border-box;padding:0;margin:0;list-style:none;outline:0;z-index:999999999;transition:transform .4s ease}@media (hover:none) and (pointer:coarse){[data-sonner-toaster][data-lifted=true]{transform:none}}[data-sonner-toaster][data-x-position=right]{right:var(--offset-right)}[data-sonner-toaster][data-x-position=left]{left:var(--offset-left)}[data-sonner-toaster][data-x-position=center]{left:50%;transform:translateX(-50%)}[data-sonner-toaster][data-y-position=top]{top:var(--offset-top)}[data-sonner-toaster][data-y-position=bottom]{bottom:var(--offset-bottom)}[data-sonner-toast]{--y:translateY(100%);--lift-amount:calc(var(--lift) * var(--gap));z-index:var(--z-index);position:absolute;opacity:0;transform:var(--y);touch-action:none;transition:transform .4s,opacity .4s,height .4s,box-shadow .2s;box-sizing:border-box;outline:0;overflow-wrap:anywhere}[data-sonner-toast][data-styled=true]{padding:16px;background:var(--normal-bg);border:1px solid var(--normal-border);color:var(--normal-text);border-radius:var(--border-radius);box-shadow:0 4px 12px rgba(0,0,0,.1);width:var(--width);font-size:13px;display:flex;align-items:center;gap:6px}[data-sonner-toast]:focus-visible{box-shadow:0 4px 12px rgba(0,0,0,.1),0 0 0 2px rgba(0,0,0,.2)}[data-sonner-toast][data-y-position=top]{top:0;--y:translateY(-100%);--lift:1;--lift-amount:calc(1 * var(--gap))}[data-sonner-toast][data-y-position=bottom]{bottom:0;--y:translateY(100%);--lift:-1;--lift-amount:calc(var(--lift) * var(--gap))}[data-sonner-toast][data-styled=true] [data-description]{font-weight:400;line-height:1.4;color:#3f3f3f}[data-rich-colors=true][data-sonner-toast][data-styled=true] [data-description]{color:inherit}[data-sonner-toaster][data-sonner-theme=dark] [data-description]{color:#e8e8e8}[data-sonner-toast][data-styled=true] [data-title]{font-weight:500;line-height:1.5;color:inherit}[data-sonner-toast][data-styled=true] [data-icon]{display:flex;height:16px;width:16px;position:relative;justify-content:flex-start;align-items:center;flex-shrink:0;margin-left:var(--toast-icon-margin-start);margin-right:var(--toast-icon-margin-end)}[data-sonner-toast][data-promise=true] [data-icon]>svg{opacity:0;transform:scale(.8);transform-origin:center;animation:sonner-fade-in .3s ease forwards}[data-sonner-toast][data-styled=true] [data-icon]>*{flex-shrink:0}[data-sonner-toast][data-styled=true] [data-icon] svg{margin-left:var(--toast-svg-margin-start);margin-right:var(--toast-svg-margin-end)}[data-sonner-toast][data-styled=true] [data-content]{display:flex;flex-direction:column;gap:2px}[data-sonner-toast][data-styled=true] [data-button]{border-radius:4px;padding-left:8px;padding-right:8px;height:24px;font-size:12px;color:var(--normal-bg);background:var(--normal-text);margin-left:var(--toast-button-margin-start);margin-right:var(--toast-button-margin-end);border:none;font-weight:500;cursor:pointer;outline:0;display:flex;align-items:center;flex-shrink:0;transition:opacity .4s,box-shadow .2s}[data-sonner-toast][data-styled=true] [data-button]:focus-visible{box-shadow:0 0 0 2px rgba(0,0,0,.4)}[data-sonner-toast][data-styled=true] [data-button]:first-of-type{margin-left:var(--toast-button-margin-start);margin-right:var(--toast-button-margin-end)}[data-sonner-toast][data-styled=true] [data-cancel]{color:var(--normal-text);background:rgba(0,0,0,.08)}[data-sonner-toaster][data-sonner-theme=dark] [data-sonner-toast][data-styled=true] [data-cancel]{background:rgba(255,255,255,.3)}[data-sonner-toast][data-styled=true] [data-close-button]{position:absolute;left:var(--toast-close-button-start);right:var(--toast-close-button-end);top:0;height:20px;width:20px;display:flex;justify-content:center;align-items:center;padding:0;color:var(--gray12);background:var(--normal-bg);border:1px solid var(--gray4);transform:var(--toast-close-button-transform);border-radius:50%;cursor:pointer;z-index:1;transition:opacity .1s,background .2s,border-color .2s}[data-sonner-toast][data-styled=true] [data-close-button]:focus-visible{box-shadow:0 4px 12px rgba(0,0,0,.1),0 0 0 2px rgba(0,0,0,.2)}[data-sonner-toast][data-styled=true] [data-disabled=true]{cursor:not-allowed}[data-sonner-toast][data-styled=true]:hover [data-close-button]:hover{background:var(--gray2);border-color:var(--gray5)}[data-sonner-toast][data-swiping=true]::before{content:'';position:absolute;left:-100%;right:-100%;height:100%;z-index:-1}[data-sonner-toast][data-y-position=top][data-swiping=true]::before{bottom:50%;transform:scaleY(3) translateY(50%)}[data-sonner-toast][data-y-position=bottom][data-swiping=true]::before{top:50%;transform:scaleY(3) translateY(-50%)}[data-sonner-toast][data-swiping=false][data-removed=true]::before{content:'';position:absolute;inset:0;transform:scaleY(2)}[data-sonner-toast][data-expanded=true]::after{content:'';position:absolute;left:0;height:calc(var(--gap) + 1px);bottom:100%;width:100%}[data-sonner-toast][data-mounted=true]{--y:translateY(0);opacity:1}[data-sonner-toast][data-expanded=false][data-front=false]{--scale:var(--toasts-before) * 0.05 + 1;--y:translateY(calc(var(--lift-amount) * var(--toasts-before))) scale(calc(-1 * var(--scale)));height:var(--front-toast-height)}[data-sonner-toast]>*{transition:opacity .4s}[data-sonner-toast][data-x-position=right]{right:0}[data-sonner-toast][data-x-position=left]{left:0}[data-sonner-toast][data-expanded=false][data-front=false][data-styled=true]>*{opacity:0}[data-sonner-toast][data-visible=false]{opacity:0;pointer-events:none}[data-sonner-toast][data-mounted=true][data-expanded=true]{--y:translateY(calc(var(--lift) * var(--offset)));height:var(--initial-height)}[data-sonner-toast][data-removed=true][data-front=true][data-swipe-out=false]{--y:translateY(calc(var(--lift) * -100%));opacity:0}[data-sonner-toast][data-removed=true][data-front=false][data-swipe-out=false][data-expanded=true]{--y:translateY(calc(var(--lift) * var(--offset) + var(--lift) * -100%));opacity:0}[data-sonner-toast][data-removed=true][data-front=false][data-swipe-out=false][data-expanded=false]{--y:translateY(40%);opacity:0;transition:transform .5s,opacity .2s}[data-sonner-toast][data-removed=true][data-front=false]::before{height:calc(var(--initial-height) + 20%)}[data-sonner-toast][data-swiping=true]{transform:var(--y) translateY(var(--swipe-amount-y,0)) translateX(var(--swipe-amount-x,0));transition:none}[data-sonner-toast][data-swiped=true]{user-select:none}[data-sonner-toast][data-swipe-out=true][data-y-position=bottom],[data-sonner-toast][data-swipe-out=true][data-y-position=top]{animation-duration:.2s;animation-timing-function:ease-out;animation-fill-mode:forwards}[data-sonner-toast][data-swipe-out=true][data-swipe-direction=left]{animation-name:swipe-out-left}[data-sonner-toast][data-swipe-out=true][data-swipe-direction=right]{animation-name:swipe-out-right}[data-sonner-toast][data-swipe-out=true][data-swipe-direction=up]{animation-name:swipe-out-up}[data-sonner-toast][data-swipe-out=true][data-swipe-direction=down]{animation-name:swipe-out-down}@keyframes swipe-out-left{from{transform:var(--y) translateX(var(--swipe-amount-x));opacity:1}to{transform:var(--y) translateX(calc(var(--swipe-amount-x) - 100%));opacity:0}}@keyframes swipe-out-right{from{transform:var(--y) translateX(var(--swipe-amount-x));opacity:1}to{transform:var(--y) translateX(calc(var(--swipe-amount-x) + 100%));opacity:0}}@keyframes swipe-out-up{from{transform:var(--y) translateY(var(--swipe-amount-y));opacity:1}to{transform:var(--y) translateY(calc(var(--swipe-amount-y) - 100%));opacity:0}}@keyframes swipe-out-down{from{transform:var(--y) translateY(var(--swipe-amount-y));opacity:1}to{transform:var(--y) translateY(calc(var(--swipe-amount-y) + 100%));opacity:0}}@media (max-width:600px){[data-sonner-toaster]{position:fixed;right:var(--mobile-offset-right);left:var(--mobile-offset-left);width:100%}[data-sonner-toaster][dir=rtl]{left:calc(var(--mobile-offset-left) * -1)}[data-sonner-toaster] [data-sonner-toast]{left:0;right:0;width:calc(100% - var(--mobile-offset-left) * 2)}[data-sonner-toaster][data-x-position=left]{left:var(--mobile-offset-left)}[data-sonner-toaster][data-y-position=bottom]{bottom:var(--mobile-offset-bottom)}[data-sonner-toaster][data-y-position=top]{top:var(--mobile-offset-top)}[data-sonner-toaster][data-x-position=center]{left:var(--mobile-offset-left);right:var(--mobile-offset-right);transform:none}}[data-sonner-toaster][data-sonner-theme=light]{--normal-bg:#fff;--normal-border:var(--gray4);--normal-text:var(--gray12);--success-bg:hsl(143, 85%, 96%);--success-border:hsl(145, 92%, 87%);--success-text:hsl(140, 100%, 27%);--info-bg:hsl(208, 100%, 97%);--info-border:hsl(221, 91%, 93%);--info-text:hsl(210, 92%, 45%);--warning-bg:hsl(49, 100%, 97%);--warning-border:hsl(49, 91%, 84%);--warning-text:hsl(31, 92%, 45%);--error-bg:hsl(359, 100%, 97%);--error-border:hsl(359, 100%, 94%);--error-text:hsl(360, 100%, 45%)}[data-sonner-toaster][data-sonner-theme=light] [data-sonner-toast][data-invert=true]{--normal-bg:#000;--normal-border:hsl(0, 0%, 20%);--normal-text:var(--gray1)}[data-sonner-toaster][data-sonner-theme=dark] [data-sonner-toast][data-invert=true]{--normal-bg:#fff;--normal-border:var(--gray3);--normal-text:var(--gray12)}[data-sonner-toaster][data-sonner-theme=dark]{--normal-bg:#000;--normal-bg-hover:hsl(0, 0%, 12%);--normal-border:hsl(0, 0%, 20%);--normal-border-hover:hsl(0, 0%, 25%);--normal-text:var(--gray1);--success-bg:hsl(150, 100%, 6%);--success-border:hsl(147, 100%, 12%);--success-text:hsl(150, 86%, 65%);--info-bg:hsl(215, 100%, 6%);--info-border:hsl(223, 43%, 17%);--info-text:hsl(216, 87%, 65%);--warning-bg:hsl(64, 100%, 6%);--warning-border:hsl(60, 100%, 9%);--warning-text:hsl(46, 87%, 65%);--error-bg:hsl(358, 76%, 10%);--error-border:hsl(357, 89%, 16%);--error-text:hsl(358, 100%, 81%)}[data-sonner-toaster][data-sonner-theme=dark] [data-sonner-toast] [data-close-button]{background:var(--normal-bg);border-color:var(--normal-border);color:var(--normal-text)}[data-sonner-toaster][data-sonner-theme=dark] [data-sonner-toast] [data-close-button]:hover{background:var(--normal-bg-hover);border-color:var(--normal-border-hover)}[data-rich-colors=true][data-sonner-toast][data-type=success]{background:var(--success-bg);border-color:var(--success-border);color:var(--success-text)}[data-rich-colors=true][data-sonner-toast][data-type=success] [data-close-button]{background:var(--success-bg);border-color:var(--success-border);color:var(--success-text)}[data-rich-colors=true][data-sonner-toast][data-type=info]{background:var(--info-bg);border-color:var(--info-border);color:var(--info-text)}[data-rich-colors=true][data-sonner-toast][data-type=info] [data-close-button]{background:var(--info-bg);border-color:var(--info-border);color:var(--info-text)}[data-rich-colors=true][data-sonner-toast][data-type=warning]{background:var(--warning-bg);border-color:var(--warning-border);color:var(--warning-text)}[data-rich-colors=true][data-sonner-toast][data-type=warning] [data-close-button]{background:var(--warning-bg);border-color:var(--warning-border);color:var(--warning-text)}[data-rich-colors=true][data-sonner-toast][data-type=error]{background:var(--error-bg);border-color:var(--error-border);color:var(--error-text)}[data-rich-colors=true][data-sonner-toast][data-type=error] [data-close-button]{background:var(--error-bg);border-color:var(--error-border);color:var(--error-text)}.sonner-loading-wrapper{--size:16px;height:var(--size);width:var(--size);position:absolute;inset:0;z-index:10}.sonner-loading-wrapper[data-visible=false]{transform-origin:center;animation:sonner-fade-out .2s ease forwards}.sonner-spinner{position:relative;top:50%;left:50%;height:var(--size);width:var(--size)}.sonner-loading-bar{animation:sonner-spin 1.2s linear infinite;background:var(--gray11);border-radius:6px;height:8%;left:-10%;position:absolute;top:-3.9%;width:24%}.sonner-loading-bar:first-child{animation-delay:-1.2s;transform:rotate(.0001deg) translate(146%)}.sonner-loading-bar:nth-child(2){animation-delay:-1.1s;transform:rotate(30deg) translate(146%)}.sonner-loading-bar:nth-child(3){animation-delay:-1s;transform:rotate(60deg) translate(146%)}.sonner-loading-bar:nth-child(4){animation-delay:-.9s;transform:rotate(90deg) translate(146%)}.sonner-loading-bar:nth-child(5){animation-delay:-.8s;transform:rotate(120deg) translate(146%)}.sonner-loading-bar:nth-child(6){animation-delay:-.7s;transform:rotate(150deg) translate(146%)}.sonner-loading-bar:nth-child(7){animation-delay:-.6s;transform:rotate(180deg) translate(146%)}.sonner-loading-bar:nth-child(8){animation-delay:-.5s;transform:rotate(210deg) translate(146%)}.sonner-loading-bar:nth-child(9){animation-delay:-.4s;transform:rotate(240deg) translate(146%)}.sonner-loading-bar:nth-child(10){animation-delay:-.3s;transform:rotate(270deg) translate(146%)}.sonner-loading-bar:nth-child(11){animation-delay:-.2s;transform:rotate(300deg) translate(146%)}.sonner-loading-bar:nth-child(12){animation-delay:-.1s;transform:rotate(330deg) translate(146%)}@keyframes sonner-fade-in{0%{opacity:0;transform:scale(.8)}100%{opacity:1;transform:scale(1)}}@keyframes sonner-fade-out{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(.8)}}@keyframes sonner-spin{0%{opacity:1}100%{opacity:.15}}@media (prefers-reduced-motion){.sonner-loading-bar,[data-sonner-toast],[data-sonner-toast]>*{transition:none!important;animation:none!important}}.sonner-loader{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);transform-origin:center;transition:opacity .2s,transform .2s}.sonner-loader[data-visible=false]{opacity:0;transform:scale(.8) translate(-50%,-50%)}\");\n\nfunction isAction(action) {\n    return action.label !== undefined;\n}\n\n// Visible toasts amount\nconst VISIBLE_TOASTS_AMOUNT = 3;\n// Viewport padding\nconst VIEWPORT_OFFSET = '24px';\n// Mobile viewport padding\nconst MOBILE_VIEWPORT_OFFSET = '16px';\n// Default lifetime of a toasts (in ms)\nconst TOAST_LIFETIME = 4000;\n// Default toast width\nconst TOAST_WIDTH = 356;\n// Default gap between toasts\nconst GAP = 14;\n// Threshold to dismiss a toast\nconst SWIPE_THRESHOLD = 45;\n// Equal to exit animation duration\nconst TIME_BEFORE_UNMOUNT = 200;\nfunction cn(...classes) {\n    return classes.filter(Boolean).join(' ');\n}\nfunction getDefaultSwipeDirections(position) {\n    const [y, x] = position.split('-');\n    const directions = [];\n    if (y) {\n        directions.push(y);\n    }\n    if (x) {\n        directions.push(x);\n    }\n    return directions;\n}\nconst Toast = (props)=>{\n    var _toast_classNames, _toast_classNames1, _toast_classNames2, _toast_classNames3, _toast_classNames4, _toast_classNames5, _toast_classNames6, _toast_classNames7, _toast_classNames8;\n    const { invert: ToasterInvert, toast, unstyled, interacting, setHeights, visibleToasts, heights, index, toasts, expanded, removeToast, defaultRichColors, closeButton: closeButtonFromToaster, style, cancelButtonStyle, actionButtonStyle, className = '', descriptionClassName = '', duration: durationFromToaster, position, gap, expandByDefault, classNames, icons, closeButtonAriaLabel = 'Close toast' } = props;\n    const [swipeDirection, setSwipeDirection] = React.useState(null);\n    const [swipeOutDirection, setSwipeOutDirection] = React.useState(null);\n    const [mounted, setMounted] = React.useState(false);\n    const [removed, setRemoved] = React.useState(false);\n    const [swiping, setSwiping] = React.useState(false);\n    const [swipeOut, setSwipeOut] = React.useState(false);\n    const [isSwiped, setIsSwiped] = React.useState(false);\n    const [offsetBeforeRemove, setOffsetBeforeRemove] = React.useState(0);\n    const [initialHeight, setInitialHeight] = React.useState(0);\n    const remainingTime = React.useRef(toast.duration || durationFromToaster || TOAST_LIFETIME);\n    const dragStartTime = React.useRef(null);\n    const toastRef = React.useRef(null);\n    const isFront = index === 0;\n    const isVisible = index + 1 <= visibleToasts;\n    const toastType = toast.type;\n    const dismissible = toast.dismissible !== false;\n    const toastClassname = toast.className || '';\n    const toastDescriptionClassname = toast.descriptionClassName || '';\n    // Height index is used to calculate the offset as it gets updated before the toast array, which means we can calculate the new layout faster.\n    const heightIndex = React.useMemo(()=>heights.findIndex((height)=>height.toastId === toast.id) || 0, [\n        heights,\n        toast.id\n    ]);\n    const closeButton = React.useMemo(()=>{\n        var _toast_closeButton;\n        return (_toast_closeButton = toast.closeButton) != null ? _toast_closeButton : closeButtonFromToaster;\n    }, [\n        toast.closeButton,\n        closeButtonFromToaster\n    ]);\n    const duration = React.useMemo(()=>toast.duration || durationFromToaster || TOAST_LIFETIME, [\n        toast.duration,\n        durationFromToaster\n    ]);\n    const closeTimerStartTimeRef = React.useRef(0);\n    const offset = React.useRef(0);\n    const lastCloseTimerStartTimeRef = React.useRef(0);\n    const pointerStartRef = React.useRef(null);\n    const [y, x] = position.split('-');\n    const toastsHeightBefore = React.useMemo(()=>{\n        return heights.reduce((prev, curr, reducerIndex)=>{\n            // Calculate offset up until current toast\n            if (reducerIndex >= heightIndex) {\n                return prev;\n            }\n            return prev + curr.height;\n        }, 0);\n    }, [\n        heights,\n        heightIndex\n    ]);\n    const isDocumentHidden = useIsDocumentHidden();\n    const invert = toast.invert || ToasterInvert;\n    const disabled = toastType === 'loading';\n    offset.current = React.useMemo(()=>heightIndex * gap + toastsHeightBefore, [\n        heightIndex,\n        toastsHeightBefore\n    ]);\n    React.useEffect(()=>{\n        remainingTime.current = duration;\n    }, [\n        duration\n    ]);\n    React.useEffect(()=>{\n        // Trigger enter animation without using CSS animation\n        setMounted(true);\n    }, []);\n    React.useEffect(()=>{\n        const toastNode = toastRef.current;\n        if (toastNode) {\n            const height = toastNode.getBoundingClientRect().height;\n            // Add toast height to heights array after the toast is mounted\n            setInitialHeight(height);\n            setHeights((h)=>[\n                    {\n                        toastId: toast.id,\n                        height,\n                        position: toast.position\n                    },\n                    ...h\n                ]);\n            return ()=>setHeights((h)=>h.filter((height)=>height.toastId !== toast.id));\n        }\n    }, [\n        setHeights,\n        toast.id\n    ]);\n    React.useLayoutEffect(()=>{\n        // Keep height up to date with the content in case it updates\n        if (!mounted) return;\n        const toastNode = toastRef.current;\n        const originalHeight = toastNode.style.height;\n        toastNode.style.height = 'auto';\n        const newHeight = toastNode.getBoundingClientRect().height;\n        toastNode.style.height = originalHeight;\n        setInitialHeight(newHeight);\n        setHeights((heights)=>{\n            const alreadyExists = heights.find((height)=>height.toastId === toast.id);\n            if (!alreadyExists) {\n                return [\n                    {\n                        toastId: toast.id,\n                        height: newHeight,\n                        position: toast.position\n                    },\n                    ...heights\n                ];\n            } else {\n                return heights.map((height)=>height.toastId === toast.id ? {\n                        ...height,\n                        height: newHeight\n                    } : height);\n            }\n        });\n    }, [\n        mounted,\n        toast.title,\n        toast.description,\n        setHeights,\n        toast.id,\n        toast.jsx,\n        toast.action,\n        toast.cancel\n    ]);\n    const deleteToast = React.useCallback(()=>{\n        // Save the offset for the exit swipe animation\n        setRemoved(true);\n        setOffsetBeforeRemove(offset.current);\n        setHeights((h)=>h.filter((height)=>height.toastId !== toast.id));\n        setTimeout(()=>{\n            removeToast(toast);\n        }, TIME_BEFORE_UNMOUNT);\n    }, [\n        toast,\n        removeToast,\n        setHeights,\n        offset\n    ]);\n    React.useEffect(()=>{\n        if (toast.promise && toastType === 'loading' || toast.duration === Infinity || toast.type === 'loading') return;\n        let timeoutId;\n        // Pause the timer on each hover\n        const pauseTimer = ()=>{\n            if (lastCloseTimerStartTimeRef.current < closeTimerStartTimeRef.current) {\n                // Get the elapsed time since the timer started\n                const elapsedTime = new Date().getTime() - closeTimerStartTimeRef.current;\n                remainingTime.current = remainingTime.current - elapsedTime;\n            }\n            lastCloseTimerStartTimeRef.current = new Date().getTime();\n        };\n        const startTimer = ()=>{\n            // setTimeout(, Infinity) behaves as if the delay is 0.\n            // As a result, the toast would be closed immediately, giving the appearance that it was never rendered.\n            // See: https://github.com/denysdovhan/wtfjs?tab=readme-ov-file#an-infinite-timeout\n            if (remainingTime.current === Infinity) return;\n            closeTimerStartTimeRef.current = new Date().getTime();\n            // Let the toast know it has started\n            timeoutId = setTimeout(()=>{\n                toast.onAutoClose == null ? void 0 : toast.onAutoClose.call(toast, toast);\n                deleteToast();\n            }, remainingTime.current);\n        };\n        if (expanded || interacting || isDocumentHidden) {\n            pauseTimer();\n        } else {\n            startTimer();\n        }\n        return ()=>clearTimeout(timeoutId);\n    }, [\n        expanded,\n        interacting,\n        toast,\n        toastType,\n        isDocumentHidden,\n        deleteToast\n    ]);\n    React.useEffect(()=>{\n        if (toast.delete) {\n            deleteToast();\n            toast.onDismiss == null ? void 0 : toast.onDismiss.call(toast, toast);\n        }\n    }, [\n        deleteToast,\n        toast.delete\n    ]);\n    function getLoadingIcon() {\n        var _toast_classNames;\n        if (icons == null ? void 0 : icons.loading) {\n            var _toast_classNames1;\n            return /*#__PURE__*/ React.createElement(\"div\", {\n                className: cn(classNames == null ? void 0 : classNames.loader, toast == null ? void 0 : (_toast_classNames1 = toast.classNames) == null ? void 0 : _toast_classNames1.loader, 'sonner-loader'),\n                \"data-visible\": toastType === 'loading'\n            }, icons.loading);\n        }\n        return /*#__PURE__*/ React.createElement(Loader, {\n            className: cn(classNames == null ? void 0 : classNames.loader, toast == null ? void 0 : (_toast_classNames = toast.classNames) == null ? void 0 : _toast_classNames.loader),\n            visible: toastType === 'loading'\n        });\n    }\n    const icon = toast.icon || (icons == null ? void 0 : icons[toastType]) || getAsset(toastType);\n    var _toast_richColors, _icons_close;\n    return /*#__PURE__*/ React.createElement(\"li\", {\n        tabIndex: 0,\n        ref: toastRef,\n        className: cn(className, toastClassname, classNames == null ? void 0 : classNames.toast, toast == null ? void 0 : (_toast_classNames = toast.classNames) == null ? void 0 : _toast_classNames.toast, classNames == null ? void 0 : classNames.default, classNames == null ? void 0 : classNames[toastType], toast == null ? void 0 : (_toast_classNames1 = toast.classNames) == null ? void 0 : _toast_classNames1[toastType]),\n        \"data-sonner-toast\": \"\",\n        \"data-rich-colors\": (_toast_richColors = toast.richColors) != null ? _toast_richColors : defaultRichColors,\n        \"data-styled\": !Boolean(toast.jsx || toast.unstyled || unstyled),\n        \"data-mounted\": mounted,\n        \"data-promise\": Boolean(toast.promise),\n        \"data-swiped\": isSwiped,\n        \"data-removed\": removed,\n        \"data-visible\": isVisible,\n        \"data-y-position\": y,\n        \"data-x-position\": x,\n        \"data-index\": index,\n        \"data-front\": isFront,\n        \"data-swiping\": swiping,\n        \"data-dismissible\": dismissible,\n        \"data-type\": toastType,\n        \"data-invert\": invert,\n        \"data-swipe-out\": swipeOut,\n        \"data-swipe-direction\": swipeOutDirection,\n        \"data-expanded\": Boolean(expanded || expandByDefault && mounted),\n        \"data-testid\": toast.testId,\n        style: {\n            '--index': index,\n            '--toasts-before': index,\n            '--z-index': toasts.length - index,\n            '--offset': `${removed ? offsetBeforeRemove : offset.current}px`,\n            '--initial-height': expandByDefault ? 'auto' : `${initialHeight}px`,\n            ...style,\n            ...toast.style\n        },\n        onDragEnd: ()=>{\n            setSwiping(false);\n            setSwipeDirection(null);\n            pointerStartRef.current = null;\n        },\n        onPointerDown: (event)=>{\n            if (event.button === 2) return; // Return early on right click\n            if (disabled || !dismissible) return;\n            dragStartTime.current = new Date();\n            setOffsetBeforeRemove(offset.current);\n            // Ensure we maintain correct pointer capture even when going outside of the toast (e.g. when swiping)\n            event.target.setPointerCapture(event.pointerId);\n            if (event.target.tagName === 'BUTTON') return;\n            setSwiping(true);\n            pointerStartRef.current = {\n                x: event.clientX,\n                y: event.clientY\n            };\n        },\n        onPointerUp: ()=>{\n            var _toastRef_current, _toastRef_current1, _dragStartTime_current;\n            if (swipeOut || !dismissible) return;\n            pointerStartRef.current = null;\n            const swipeAmountX = Number(((_toastRef_current = toastRef.current) == null ? void 0 : _toastRef_current.style.getPropertyValue('--swipe-amount-x').replace('px', '')) || 0);\n            const swipeAmountY = Number(((_toastRef_current1 = toastRef.current) == null ? void 0 : _toastRef_current1.style.getPropertyValue('--swipe-amount-y').replace('px', '')) || 0);\n            const timeTaken = new Date().getTime() - ((_dragStartTime_current = dragStartTime.current) == null ? void 0 : _dragStartTime_current.getTime());\n            const swipeAmount = swipeDirection === 'x' ? swipeAmountX : swipeAmountY;\n            const velocity = Math.abs(swipeAmount) / timeTaken;\n            if (Math.abs(swipeAmount) >= SWIPE_THRESHOLD || velocity > 0.11) {\n                setOffsetBeforeRemove(offset.current);\n                toast.onDismiss == null ? void 0 : toast.onDismiss.call(toast, toast);\n                if (swipeDirection === 'x') {\n                    setSwipeOutDirection(swipeAmountX > 0 ? 'right' : 'left');\n                } else {\n                    setSwipeOutDirection(swipeAmountY > 0 ? 'down' : 'up');\n                }\n                deleteToast();\n                setSwipeOut(true);\n                return;\n            } else {\n                var _toastRef_current2, _toastRef_current3;\n                (_toastRef_current2 = toastRef.current) == null ? void 0 : _toastRef_current2.style.setProperty('--swipe-amount-x', `0px`);\n                (_toastRef_current3 = toastRef.current) == null ? void 0 : _toastRef_current3.style.setProperty('--swipe-amount-y', `0px`);\n            }\n            setIsSwiped(false);\n            setSwiping(false);\n            setSwipeDirection(null);\n        },\n        onPointerMove: (event)=>{\n            var _window_getSelection, // Apply transform using both x and y values\n            _toastRef_current, _toastRef_current1;\n            if (!pointerStartRef.current || !dismissible) return;\n            const isHighlighted = ((_window_getSelection = window.getSelection()) == null ? void 0 : _window_getSelection.toString().length) > 0;\n            if (isHighlighted) return;\n            const yDelta = event.clientY - pointerStartRef.current.y;\n            const xDelta = event.clientX - pointerStartRef.current.x;\n            var _props_swipeDirections;\n            const swipeDirections = (_props_swipeDirections = props.swipeDirections) != null ? _props_swipeDirections : getDefaultSwipeDirections(position);\n            // Determine swipe direction if not already locked\n            if (!swipeDirection && (Math.abs(xDelta) > 1 || Math.abs(yDelta) > 1)) {\n                setSwipeDirection(Math.abs(xDelta) > Math.abs(yDelta) ? 'x' : 'y');\n            }\n            let swipeAmount = {\n                x: 0,\n                y: 0\n            };\n            const getDampening = (delta)=>{\n                const factor = Math.abs(delta) / 20;\n                return 1 / (1.5 + factor);\n            };\n            // Only apply swipe in the locked direction\n            if (swipeDirection === 'y') {\n                // Handle vertical swipes\n                if (swipeDirections.includes('top') || swipeDirections.includes('bottom')) {\n                    if (swipeDirections.includes('top') && yDelta < 0 || swipeDirections.includes('bottom') && yDelta > 0) {\n                        swipeAmount.y = yDelta;\n                    } else {\n                        // Smoothly transition to dampened movement\n                        const dampenedDelta = yDelta * getDampening(yDelta);\n                        // Ensure we don't jump when transitioning to dampened movement\n                        swipeAmount.y = Math.abs(dampenedDelta) < Math.abs(yDelta) ? dampenedDelta : yDelta;\n                    }\n                }\n            } else if (swipeDirection === 'x') {\n                // Handle horizontal swipes\n                if (swipeDirections.includes('left') || swipeDirections.includes('right')) {\n                    if (swipeDirections.includes('left') && xDelta < 0 || swipeDirections.includes('right') && xDelta > 0) {\n                        swipeAmount.x = xDelta;\n                    } else {\n                        // Smoothly transition to dampened movement\n                        const dampenedDelta = xDelta * getDampening(xDelta);\n                        // Ensure we don't jump when transitioning to dampened movement\n                        swipeAmount.x = Math.abs(dampenedDelta) < Math.abs(xDelta) ? dampenedDelta : xDelta;\n                    }\n                }\n            }\n            if (Math.abs(swipeAmount.x) > 0 || Math.abs(swipeAmount.y) > 0) {\n                setIsSwiped(true);\n            }\n            (_toastRef_current = toastRef.current) == null ? void 0 : _toastRef_current.style.setProperty('--swipe-amount-x', `${swipeAmount.x}px`);\n            (_toastRef_current1 = toastRef.current) == null ? void 0 : _toastRef_current1.style.setProperty('--swipe-amount-y', `${swipeAmount.y}px`);\n        }\n    }, closeButton && !toast.jsx && toastType !== 'loading' ? /*#__PURE__*/ React.createElement(\"button\", {\n        \"aria-label\": closeButtonAriaLabel,\n        \"data-disabled\": disabled,\n        \"data-close-button\": true,\n        onClick: disabled || !dismissible ? ()=>{} : ()=>{\n            deleteToast();\n            toast.onDismiss == null ? void 0 : toast.onDismiss.call(toast, toast);\n        },\n        className: cn(classNames == null ? void 0 : classNames.closeButton, toast == null ? void 0 : (_toast_classNames2 = toast.classNames) == null ? void 0 : _toast_classNames2.closeButton)\n    }, (_icons_close = icons == null ? void 0 : icons.close) != null ? _icons_close : CloseIcon) : null, (toastType || toast.icon || toast.promise) && toast.icon !== null && ((icons == null ? void 0 : icons[toastType]) !== null || toast.icon) ? /*#__PURE__*/ React.createElement(\"div\", {\n        \"data-icon\": \"\",\n        className: cn(classNames == null ? void 0 : classNames.icon, toast == null ? void 0 : (_toast_classNames3 = toast.classNames) == null ? void 0 : _toast_classNames3.icon)\n    }, toast.promise || toast.type === 'loading' && !toast.icon ? toast.icon || getLoadingIcon() : null, toast.type !== 'loading' ? icon : null) : null, /*#__PURE__*/ React.createElement(\"div\", {\n        \"data-content\": \"\",\n        className: cn(classNames == null ? void 0 : classNames.content, toast == null ? void 0 : (_toast_classNames4 = toast.classNames) == null ? void 0 : _toast_classNames4.content)\n    }, /*#__PURE__*/ React.createElement(\"div\", {\n        \"data-title\": \"\",\n        className: cn(classNames == null ? void 0 : classNames.title, toast == null ? void 0 : (_toast_classNames5 = toast.classNames) == null ? void 0 : _toast_classNames5.title)\n    }, toast.jsx ? toast.jsx : typeof toast.title === 'function' ? toast.title() : toast.title), toast.description ? /*#__PURE__*/ React.createElement(\"div\", {\n        \"data-description\": \"\",\n        className: cn(descriptionClassName, toastDescriptionClassname, classNames == null ? void 0 : classNames.description, toast == null ? void 0 : (_toast_classNames6 = toast.classNames) == null ? void 0 : _toast_classNames6.description)\n    }, typeof toast.description === 'function' ? toast.description() : toast.description) : null), /*#__PURE__*/ React.isValidElement(toast.cancel) ? toast.cancel : toast.cancel && isAction(toast.cancel) ? /*#__PURE__*/ React.createElement(\"button\", {\n        \"data-button\": true,\n        \"data-cancel\": true,\n        style: toast.cancelButtonStyle || cancelButtonStyle,\n        onClick: (event)=>{\n            // We need to check twice because typescript\n            if (!isAction(toast.cancel)) return;\n            if (!dismissible) return;\n            toast.cancel.onClick == null ? void 0 : toast.cancel.onClick.call(toast.cancel, event);\n            deleteToast();\n        },\n        className: cn(classNames == null ? void 0 : classNames.cancelButton, toast == null ? void 0 : (_toast_classNames7 = toast.classNames) == null ? void 0 : _toast_classNames7.cancelButton)\n    }, toast.cancel.label) : null, /*#__PURE__*/ React.isValidElement(toast.action) ? toast.action : toast.action && isAction(toast.action) ? /*#__PURE__*/ React.createElement(\"button\", {\n        \"data-button\": true,\n        \"data-action\": true,\n        style: toast.actionButtonStyle || actionButtonStyle,\n        onClick: (event)=>{\n            // We need to check twice because typescript\n            if (!isAction(toast.action)) return;\n            toast.action.onClick == null ? void 0 : toast.action.onClick.call(toast.action, event);\n            if (event.defaultPrevented) return;\n            deleteToast();\n        },\n        className: cn(classNames == null ? void 0 : classNames.actionButton, toast == null ? void 0 : (_toast_classNames8 = toast.classNames) == null ? void 0 : _toast_classNames8.actionButton)\n    }, toast.action.label) : null);\n};\nfunction getDocumentDirection() {\n    if (typeof window === 'undefined') return 'ltr';\n    if (typeof document === 'undefined') return 'ltr'; // For Fresh purpose\n    const dirAttribute = document.documentElement.getAttribute('dir');\n    if (dirAttribute === 'auto' || !dirAttribute) {\n        return window.getComputedStyle(document.documentElement).direction;\n    }\n    return dirAttribute;\n}\nfunction assignOffset(defaultOffset, mobileOffset) {\n    const styles = {};\n    [\n        defaultOffset,\n        mobileOffset\n    ].forEach((offset, index)=>{\n        const isMobile = index === 1;\n        const prefix = isMobile ? '--mobile-offset' : '--offset';\n        const defaultValue = isMobile ? MOBILE_VIEWPORT_OFFSET : VIEWPORT_OFFSET;\n        function assignAll(offset) {\n            [\n                'top',\n                'right',\n                'bottom',\n                'left'\n            ].forEach((key)=>{\n                styles[`${prefix}-${key}`] = typeof offset === 'number' ? `${offset}px` : offset;\n            });\n        }\n        if (typeof offset === 'number' || typeof offset === 'string') {\n            assignAll(offset);\n        } else if (typeof offset === 'object') {\n            [\n                'top',\n                'right',\n                'bottom',\n                'left'\n            ].forEach((key)=>{\n                if (offset[key] === undefined) {\n                    styles[`${prefix}-${key}`] = defaultValue;\n                } else {\n                    styles[`${prefix}-${key}`] = typeof offset[key] === 'number' ? `${offset[key]}px` : offset[key];\n                }\n            });\n        } else {\n            assignAll(defaultValue);\n        }\n    });\n    return styles;\n}\nfunction useSonner() {\n    const [activeToasts, setActiveToasts] = React.useState([]);\n    React.useEffect(()=>{\n        return ToastState.subscribe((toast)=>{\n            if (toast.dismiss) {\n                setTimeout(()=>{\n                    ReactDOM.flushSync(()=>{\n                        setActiveToasts((toasts)=>toasts.filter((t)=>t.id !== toast.id));\n                    });\n                });\n                return;\n            }\n            // Prevent batching, temp solution.\n            setTimeout(()=>{\n                ReactDOM.flushSync(()=>{\n                    setActiveToasts((toasts)=>{\n                        const indexOfExistingToast = toasts.findIndex((t)=>t.id === toast.id);\n                        // Update the toast if it already exists\n                        if (indexOfExistingToast !== -1) {\n                            return [\n                                ...toasts.slice(0, indexOfExistingToast),\n                                {\n                                    ...toasts[indexOfExistingToast],\n                                    ...toast\n                                },\n                                ...toasts.slice(indexOfExistingToast + 1)\n                            ];\n                        }\n                        return [\n                            toast,\n                            ...toasts\n                        ];\n                    });\n                });\n            });\n        });\n    }, []);\n    return {\n        toasts: activeToasts\n    };\n}\nconst Toaster = /*#__PURE__*/ React.forwardRef(function Toaster(props, ref) {\n    const { id, invert, position = 'bottom-right', hotkey = [\n        'altKey',\n        'KeyT'\n    ], expand, closeButton, className, offset, mobileOffset, theme = 'light', richColors, duration, style, visibleToasts = VISIBLE_TOASTS_AMOUNT, toastOptions, dir = getDocumentDirection(), gap = GAP, icons, containerAriaLabel = 'Notifications' } = props;\n    const [toasts, setToasts] = React.useState([]);\n    const filteredToasts = React.useMemo(()=>{\n        if (id) {\n            return toasts.filter((toast)=>toast.toasterId === id);\n        }\n        return toasts.filter((toast)=>!toast.toasterId);\n    }, [\n        toasts,\n        id\n    ]);\n    const possiblePositions = React.useMemo(()=>{\n        return Array.from(new Set([\n            position\n        ].concat(filteredToasts.filter((toast)=>toast.position).map((toast)=>toast.position))));\n    }, [\n        filteredToasts,\n        position\n    ]);\n    const [heights, setHeights] = React.useState([]);\n    const [expanded, setExpanded] = React.useState(false);\n    const [interacting, setInteracting] = React.useState(false);\n    const [actualTheme, setActualTheme] = React.useState(theme !== 'system' ? theme : typeof window !== 'undefined' ? window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light' : 'light');\n    const listRef = React.useRef(null);\n    const hotkeyLabel = hotkey.join('+').replace(/Key/g, '').replace(/Digit/g, '');\n    const lastFocusedElementRef = React.useRef(null);\n    const isFocusWithinRef = React.useRef(false);\n    const removeToast = React.useCallback((toastToRemove)=>{\n        setToasts((toasts)=>{\n            var _toasts_find;\n            if (!((_toasts_find = toasts.find((toast)=>toast.id === toastToRemove.id)) == null ? void 0 : _toasts_find.delete)) {\n                ToastState.dismiss(toastToRemove.id);\n            }\n            return toasts.filter(({ id })=>id !== toastToRemove.id);\n        });\n    }, []);\n    React.useEffect(()=>{\n        return ToastState.subscribe((toast)=>{\n            if (toast.dismiss) {\n                // Prevent batching of other state updates\n                requestAnimationFrame(()=>{\n                    setToasts((toasts)=>toasts.map((t)=>t.id === toast.id ? {\n                                ...t,\n                                delete: true\n                            } : t));\n                });\n                return;\n            }\n            // Prevent batching, temp solution.\n            setTimeout(()=>{\n                ReactDOM.flushSync(()=>{\n                    setToasts((toasts)=>{\n                        const indexOfExistingToast = toasts.findIndex((t)=>t.id === toast.id);\n                        // Update the toast if it already exists\n                        if (indexOfExistingToast !== -1) {\n                            return [\n                                ...toasts.slice(0, indexOfExistingToast),\n                                {\n                                    ...toasts[indexOfExistingToast],\n                                    ...toast\n                                },\n                                ...toasts.slice(indexOfExistingToast + 1)\n                            ];\n                        }\n                        return [\n                            toast,\n                            ...toasts\n                        ];\n                    });\n                });\n            });\n        });\n    }, [\n        toasts\n    ]);\n    React.useEffect(()=>{\n        if (theme !== 'system') {\n            setActualTheme(theme);\n            return;\n        }\n        if (theme === 'system') {\n            // check if current preference is dark\n            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                // it's currently dark\n                setActualTheme('dark');\n            } else {\n                // it's not dark\n                setActualTheme('light');\n            }\n        }\n        if (typeof window === 'undefined') return;\n        const darkMediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n        try {\n            // Chrome & Firefox\n            darkMediaQuery.addEventListener('change', ({ matches })=>{\n                if (matches) {\n                    setActualTheme('dark');\n                } else {\n                    setActualTheme('light');\n                }\n            });\n        } catch (error) {\n            // Safari < 14\n            darkMediaQuery.addListener(({ matches })=>{\n                try {\n                    if (matches) {\n                        setActualTheme('dark');\n                    } else {\n                        setActualTheme('light');\n                    }\n                } catch (e) {\n                    console.error(e);\n                }\n            });\n        }\n    }, [\n        theme\n    ]);\n    React.useEffect(()=>{\n        // Ensure expanded is always false when no toasts are present / only one left\n        if (toasts.length <= 1) {\n            setExpanded(false);\n        }\n    }, [\n        toasts\n    ]);\n    React.useEffect(()=>{\n        const handleKeyDown = (event)=>{\n            var _listRef_current;\n            const isHotkeyPressed = hotkey.every((key)=>event[key] || event.code === key);\n            if (isHotkeyPressed) {\n                var _listRef_current1;\n                setExpanded(true);\n                (_listRef_current1 = listRef.current) == null ? void 0 : _listRef_current1.focus();\n            }\n            if (event.code === 'Escape' && (document.activeElement === listRef.current || ((_listRef_current = listRef.current) == null ? void 0 : _listRef_current.contains(document.activeElement)))) {\n                setExpanded(false);\n            }\n        };\n        document.addEventListener('keydown', handleKeyDown);\n        return ()=>document.removeEventListener('keydown', handleKeyDown);\n    }, [\n        hotkey\n    ]);\n    React.useEffect(()=>{\n        if (listRef.current) {\n            return ()=>{\n                if (lastFocusedElementRef.current) {\n                    lastFocusedElementRef.current.focus({\n                        preventScroll: true\n                    });\n                    lastFocusedElementRef.current = null;\n                    isFocusWithinRef.current = false;\n                }\n            };\n        }\n    }, [\n        listRef.current\n    ]);\n    return(// Remove item from normal navigation flow, only available via hotkey\n    /*#__PURE__*/ React.createElement(\"section\", {\n        ref: ref,\n        \"aria-label\": `${containerAriaLabel} ${hotkeyLabel}`,\n        tabIndex: -1,\n        \"aria-live\": \"polite\",\n        \"aria-relevant\": \"additions text\",\n        \"aria-atomic\": \"false\",\n        suppressHydrationWarning: true\n    }, possiblePositions.map((position, index)=>{\n        var _heights_;\n        const [y, x] = position.split('-');\n        if (!filteredToasts.length) return null;\n        return /*#__PURE__*/ React.createElement(\"ol\", {\n            key: position,\n            dir: dir === 'auto' ? getDocumentDirection() : dir,\n            tabIndex: -1,\n            ref: listRef,\n            className: className,\n            \"data-sonner-toaster\": true,\n            \"data-sonner-theme\": actualTheme,\n            \"data-y-position\": y,\n            \"data-x-position\": x,\n            style: {\n                '--front-toast-height': `${((_heights_ = heights[0]) == null ? void 0 : _heights_.height) || 0}px`,\n                '--width': `${TOAST_WIDTH}px`,\n                '--gap': `${gap}px`,\n                ...style,\n                ...assignOffset(offset, mobileOffset)\n            },\n            onBlur: (event)=>{\n                if (isFocusWithinRef.current && !event.currentTarget.contains(event.relatedTarget)) {\n                    isFocusWithinRef.current = false;\n                    if (lastFocusedElementRef.current) {\n                        lastFocusedElementRef.current.focus({\n                            preventScroll: true\n                        });\n                        lastFocusedElementRef.current = null;\n                    }\n                }\n            },\n            onFocus: (event)=>{\n                const isNotDismissible = event.target instanceof HTMLElement && event.target.dataset.dismissible === 'false';\n                if (isNotDismissible) return;\n                if (!isFocusWithinRef.current) {\n                    isFocusWithinRef.current = true;\n                    lastFocusedElementRef.current = event.relatedTarget;\n                }\n            },\n            onMouseEnter: ()=>setExpanded(true),\n            onMouseMove: ()=>setExpanded(true),\n            onMouseLeave: ()=>{\n                // Avoid setting expanded to false when interacting with a toast, e.g. swiping\n                if (!interacting) {\n                    setExpanded(false);\n                }\n            },\n            onDragEnd: ()=>setExpanded(false),\n            onPointerDown: (event)=>{\n                const isNotDismissible = event.target instanceof HTMLElement && event.target.dataset.dismissible === 'false';\n                if (isNotDismissible) return;\n                setInteracting(true);\n            },\n            onPointerUp: ()=>setInteracting(false)\n        }, filteredToasts.filter((toast)=>!toast.position && index === 0 || toast.position === position).map((toast, index)=>{\n            var _toastOptions_duration, _toastOptions_closeButton;\n            return /*#__PURE__*/ React.createElement(Toast, {\n                key: toast.id,\n                icons: icons,\n                index: index,\n                toast: toast,\n                defaultRichColors: richColors,\n                duration: (_toastOptions_duration = toastOptions == null ? void 0 : toastOptions.duration) != null ? _toastOptions_duration : duration,\n                className: toastOptions == null ? void 0 : toastOptions.className,\n                descriptionClassName: toastOptions == null ? void 0 : toastOptions.descriptionClassName,\n                invert: invert,\n                visibleToasts: visibleToasts,\n                closeButton: (_toastOptions_closeButton = toastOptions == null ? void 0 : toastOptions.closeButton) != null ? _toastOptions_closeButton : closeButton,\n                interacting: interacting,\n                position: position,\n                style: toastOptions == null ? void 0 : toastOptions.style,\n                unstyled: toastOptions == null ? void 0 : toastOptions.unstyled,\n                classNames: toastOptions == null ? void 0 : toastOptions.classNames,\n                cancelButtonStyle: toastOptions == null ? void 0 : toastOptions.cancelButtonStyle,\n                actionButtonStyle: toastOptions == null ? void 0 : toastOptions.actionButtonStyle,\n                closeButtonAriaLabel: toastOptions == null ? void 0 : toastOptions.closeButtonAriaLabel,\n                removeToast: removeToast,\n                toasts: filteredToasts.filter((t)=>t.position == toast.position),\n                heights: heights.filter((h)=>h.position == toast.position),\n                setHeights: setHeights,\n                expandByDefault: expand,\n                gap: gap,\n                expanded: expanded,\n                swipeDirections: props.swipeDirections\n            });\n        }));\n    })));\n});\n\nexport { Toaster, toast, useSonner };\n","// ImagePreview.tsx\nimport React from \"react\";\nimport Image from \"next/image\";\n\ninterface ImagePreviewProps {\n    file: File;\n    onRemove: () => void;\n    size?: string; // Tailwind size, e.g. \"w-32 h-32\"\n}\n\nexport default function ImagePreview({ file, onRemove, size = \"w-32 h-32\" }: ImagePreviewProps) {\n    return (\n        <div className={`relative group ${size}`}>\n            {/* Image */}\n            <Image\n                width={32}\n                height={32}\n                src={URL.createObjectURL(file)}\n                alt={\"Preview\"}\n                className={`rounded-lg border object-cover transition duration-300 group-hover:blur-sm ${size}`}\n            ></Image>\n\n\n            {/* Overlay */}\n            <div\n                className=\"absolute inset-0 flex items-center justify-center\n                   text-white text-sm font-medium\n                   bg-black/40 opacity-0 group-hover:opacity-100\n                   rounded-lg cursor-pointer transition duration-300\"\n                onClick={onRemove}\n            >\n                Remove\n            </div>\n        </div>\n    );\n}\n","// app/dashboard/onboard-company/components/CompanyStep.tsx\n\"use client\";\n\nimport React, { ChangeEvent, useState } from \"react\";\nimport ImagePreview from \"@/components/Dashboard/ImagePreview\";\n\ntype LocationData = {\n    latitude: number;\n    longitude: number;\n};\n\ninterface FormProps {\n    name: string;\n    contactNumber: string;\n    gstNumber: string;\n    aboutCompany: string;\n    workType: string;\n    unitType: string;\n    unitSqFeet: string;\n    certifications: string[];\n    companyLogo: File | null;\n    unitImages: File[];\n    location: LocationData | null;\n}\n\ntype Props = {\n    form: FormProps;\n    setForm: (updates: Partial<FormProps>) => void;\n    onNext: () => void;\n};\n\nconst availableCertifications = [\n    \"Import Export Certificate\",\n    \"ISO 9001\",\n    \"GOTS\",\n    \"Fair Trade\",\n    \"OEKO-TEX\",\n    \"SA8000\",\n    \"RCS\",\n    \"BCI Cotton\",\n    \"Sedex\",\n    \"OCS\",\n    \"GRS\",\n];\n\nconst workTypes = [\"DOMESTIC_WORK\", \"EXPORT_WORK\"];\nconst unitTypes = [\n    \"YARN_SPINNING\",\n    \"YARN_PROCESSING\",\n    \"WEAVING_UNIT\",\n    \"KNITTING_UNIT\",\n    \"DYEING_UNIT\",\n    \"FABRIC_PROCESSING_UNIT\",\n    \"FABRIC_FINISHING_UNIT\",\n    \"WASHING_UNIT\",\n    \"CUTTING_UNIT\",\n    \"COMPUTERIZED_EMBROIDERY_UNIT\",\n    \"MANUAL_EMBROIDERY_UNIT\",\n    \"FUSING_UNIT\",\n    \"PRINTING_UNIT\",\n    \"STITCHING_UNIT\",\n    \"CHECKING_UNIT\",\n    \"IRONING_PACKING_UNIT\",\n    \"KAJA_BUTTON_UNIT\",\n    \"MULTI_NEEDLE_DOUBLE_CHAIN_UNIT\",\n    \"OIL_REMOVING_MENDING_CENTER\",\n    \"PATTERN_MAKING_CENTER\",\n    \"FILM_SCREEN_MAKING_CENTER\",\n];\n\nexport default function CompanyStep({ form, setForm, onNext }: Props) {\n    const [errors, setErrors] = useState<Partial<Record<keyof FormProps, string>>>({});\n\n    const validate = () => {\n\n        const errs: typeof errors = {};\n        if (!form.name.trim()) errs.name = \"Company name is required\";\n        if (!form.contactNumber.trim()) errs.contactNumber = \"Contact number required\";\n        if (!form.unitType.trim()) errs.unitType = \"Unit Type required\";\n        if (!form.workType.trim()) errs.workType = \"Work Type required\";\n        const sq = Number(form.unitSqFeet);\n        if (isNaN(sq) || sq <= 0) errs.unitSqFeet = \"Unit sq feet must be positive\";\n\n        if (!form.location) errs.location = \"Location is required\";\n\n        setErrors(errs);\n        return Object.keys(errs).length === 0;\n    };\n\n    const handleChange = (e: ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {\n        const { name, value } = e.target;\n        setForm({\n            [name]: value,\n        } as Partial<FormProps>);\n\n        setErrors((prev) => ({ ...prev, [name]: undefined }));\n    };\n\n    const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {\n        const { name, files } = e.target;\n        if (!files) return;\n        if (name === \"companyLogo\") {\n            setForm({ companyLogo: files[0] });\n        } else if (name === \"unitImages\") {\n            setForm({ unitImages: Array.from(files) });\n        }\n    };\n\n    function handleCertToggle(cert: string) {\n        // Ensure form.certifications exists and is array\n        const certs = form.certifications ?? [];\n        const has = certs.includes(cert);\n\n        const newCerts = has\n            ? certs.filter((c) => c !== cert)\n            : [...certs, cert];\n\n        // Pass the object directly to setForm, not a function\n        setForm({ certifications: newCerts });\n    }\n    const handlePickLocation = () => {\n        if (!navigator.geolocation) {\n            alert(\"Geolocation not supported\");\n            return;\n        }\n        navigator.geolocation.getCurrentPosition(\n            (pos) => {\n                setForm({ location: { latitude: pos.coords.latitude, longitude: pos.coords.longitude } });\n                setErrors((prev) => ({ ...prev, location: undefined }));\n            },\n            (err) => {\n                console.error(\"Location error\", err);\n                alert(\"Could not fetch location\");\n            }\n        );\n    };\n\n    const onNextClicked = () => {\n        if (validate()) {\n            onNext();\n        }\n    };\n\n    return (\n        <div className=\"max-w-4xl mx-auto bg-white rounded-xl shadow-lg p-8\">\n            <div className=\"mb-8\">\n                <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">Company Information</h2>\n                <p className=\"text-gray-600\">Tell us about your company and manufacturing capabilities</p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                {/* Company Name */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Company Name <span className=\"text-red-500\">*</span>\n                    </label>\n                    <input\n                        name=\"name\"\n                        value={form.name}\n                        onChange={handleChange}\n                        placeholder=\"Enter your company name\"\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    />\n                    {errors.name && (\n                        <p className=\"text-sm text-red-500 flex items-center gap-1\">\n                            <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                                <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                            </svg>\n                            {errors.name}\n                        </p>\n                    )}\n                </div>\n\n                {/* Contact Number */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Contact Number <span className=\"text-red-500\">*</span>\n                    </label>\n                    <input\n                        name=\"contactNumber\"\n                        value={form.contactNumber}\n                        onChange={handleChange}\n                        placeholder=\"Enter contact number\"\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    />\n                    {errors.contactNumber && (\n                        <p className=\"text-sm text-red-500 flex items-center gap-1\">\n                            <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                                <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                            </svg>\n                            {errors.contactNumber}\n                        </p>\n                    )}\n                </div>\n\n                {/* GST Number */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">GST Number</label>\n                    <input\n                        name=\"gstNumber\"\n                        value={form.gstNumber}\n                        onChange={handleChange}\n                        placeholder=\"Enter GST number (optional)\"\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    />\n                </div>\n\n                {/* Unit Sq Feet */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Unit Area (Sq Feet) <span className=\"text-red-500\">*</span>\n                    </label>\n                    <input\n                        name=\"unitSqFeet\"\n                        type=\"number\"\n                        min=\"1\"\n                        value={form.unitSqFeet}\n                        onChange={handleChange}\n                        placeholder=\"Enter unit area in square feet\"\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    />\n                    {errors.unitSqFeet && (\n                        <p className=\"text-sm text-red-500 flex items-center gap-1\">\n                            <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                                <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                            </svg>\n                            {errors.unitSqFeet}\n                        </p>\n                    )}\n                </div>\n\n                {/* Unit Type */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Unit Type <span className=\"text-red-500\">*</span>\n                    </label>\n                    <select\n                        name=\"unitType\"\n                        value={form.unitType}\n                        onChange={handleChange}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors bg-white\"\n                    >\n                        <option value=\"\">Select your unit type</option>\n                        {unitTypes.map((u) => (\n                            <option key={u} value={u}>\n                                {u.replace(/_/g, ' ')}\n                            </option>\n                        ))}\n                    </select>\n                    {errors.unitType && (\n                        <p className=\"text-sm text-red-500 flex items-center gap-1\">\n                            <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                                <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                            </svg>\n                            {errors.unitType}\n                        </p>\n                    )}\n                </div>\n\n                {/* Work Type */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Work Type <span className=\"text-red-500\">*</span>\n                    </label>\n                    <select\n                        name=\"workType\"\n                        value={form.workType}\n                        onChange={handleChange}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors bg-white\"\n                    >\n                        <option value=\"\">Select work type</option>\n                        {workTypes.map((w) => (\n                            <option key={w} value={w}>\n                                {w.replace(/_/g, ' ')}\n                            </option>\n                        ))}\n                    </select>\n                    {errors.workType && (\n                        <p className=\"text-sm text-red-500 flex items-center gap-1\">\n                            <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                                <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                            </svg>\n                            {errors.workType}\n                        </p>\n                    )}\n                </div>\n            </div>\n\n            {/* About Company - Full Width */}\n            <div className=\"mt-8 space-y-2\">\n                <label className=\"block text-sm font-semibold text-gray-700\">About Company</label>\n                <textarea\n                    name=\"aboutCompany\"\n                    value={form.aboutCompany}\n                    onChange={handleChange}\n                    placeholder=\"Tell us about your company, manufacturing capabilities, and experience...\"\n                    rows={4}\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors resize-vertical\"\n                />\n            </div>\n\n            {/* Certifications */}\n            {form.workType==\"EXPORT_WORK\"&&\n            <div className=\"mt-8 space-y-4\">\n                <label className=\"block text-sm font-semibold text-gray-700\">\n                    Certifications & Standards\n                </label>\n                <p className=\"text-sm text-gray-500\">Select all certifications your company holds</p>\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3\">\n                    {availableCertifications.map((cert) => (\n                        <label key={cert} className=\"flex items-center gap-3 p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors\">\n                            <input\n                                type=\"checkbox\"\n                                checked={form.certifications?.includes(cert) ?? false}\n                                onChange={() => handleCertToggle(cert)}\n                                className=\"w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500\"\n                            />\n                            <span className=\"text-sm text-gray-700 font-medium\">{cert}</span>\n                        </label>\n                    ))}\n                </div>\n            </div>\n            }\n            {/* File Uploads */}\n            <div className=\"mt-8 grid grid-cols-1 md:grid-cols-2 gap-8\">\n                {/* Company Logo */}\n\n                <div className=\"space-y-2\">\n\n\n                    {/*Handling image upload*/}\n                    <label className=\"block text-sm font-semibold text-gray-700\">Company Logo</label>\n                    <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 hover:border-blue-400 transition-colors\">\n                        <input\n                            type=\"file\"\n                            name=\"companyLogo\"\n\n                            accept=\"image/*\"\n                            onChange={handleFileChange}\n                            className=\"w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-medium file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100\"\n                        />\n                        <p className=\"mt-2 text-xs text-gray-500\">PNG, JPG up to 2MB</p>\n                    </div>\n                    {form.companyLogo && (\n                        <div className=\"mt-4\">\n                            <ImagePreview\n                                size=\"w-24 h-24\"\n                                file={form.companyLogo}\n                                onRemove={() => setForm({ ...form, companyLogo: null })}\n                            />\n                        </div>\n                    )}\n                </div>\n\n                {/* Unit Images */}\n                <div className=\"space-y-2\">\n                    {/*preview images */}\n\n                    {/*handliing image upload */}\n                    <label className=\"block text-sm font-semibold text-gray-700\">Unit Images</label>\n                    <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 hover:border-blue-400 transition-colors\">\n                        <input\n                            type=\"file\"\n                            name=\"unitImages\"\n                            accept=\"image/*\"\n                            multiple\n                            onChange={handleFileChange}\n                            className=\"w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-medium file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100\"\n                        />\n                        <p className=\"mt-2 text-xs text-gray-500\">Multiple images, PNG or JPG up to 5MB </p>\n                    </div>\n                    {form.unitImages?.length > 0 && (\n                        <div className=\"mt-4 grid grid-cols-3 gap-2\">\n                            {form.unitImages.map((file, idx) => (\n                                <ImagePreview\n                                    key={idx}\n                                    file={file}\n                                    size=\"w-24 h-24\"\n                                    onRemove={() => {\n                                        const updated = form.unitImages.filter((_, i) => i !== idx);\n                                        setForm({ ...form, unitImages: updated });\n                                    }}\n                                />\n                            ))}\n                        </div>\n                    )}\n                </div>\n\n            </div>\n\n            {/* Location */}\n            <div className=\"mt-8 space-y-4\">\n                <label className=\"block text-sm font-semibold text-gray-700\">\n                    Location <span className=\"text-red-500\">*</span>\n                </label>\n                <div className=\"flex items-center gap-4\">\n                    <button\n                        type=\"button\"\n                        onClick={handlePickLocation}\n                        className=\"flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-lg hover:from-blue-700 hover:to-blue-800 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-all transform hover:scale-105\"\n                    >\n                        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" />\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" />\n                        </svg>\n                        Pick Current Location\n                    </button>\n                    {form.location && (\n                        <div className=\"flex items-center gap-2 px-4 py-2 bg-green-50 border border-green-200 rounded-lg\">\n                            <svg className=\"w-4 h-4 text-green-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                                <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                            </svg>\n                            <span className=\"text-sm text-green-700 font-medium\">\n                            Location: {form.location.latitude.toFixed(6)}, {form.location.longitude.toFixed(6)}\n                        </span>\n                        </div>\n                    )}\n                </div>\n                {errors.location && (\n                    <p className=\"text-sm text-red-500 flex items-center gap-1\">\n                        <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                            <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                        </svg>\n                        {errors.location}\n                    </p>\n                )}\n            </div>\n\n            {/* Next Button */}\n            <div className=\"flex justify-end mt-12 pt-6 border-t border-gray-200\">\n                <button\n                    type=\"button\"\n                    onClick={onNextClicked}\n                    className=\"flex items-center gap-2 px-8 py-3 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-lg hover:from-blue-700 hover:to-blue-800 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-all transform hover:scale-105 font-semibold shadow-lg\"\n                >\n                    Continue to Next Step\n                    <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 7l5 5m0 0l-5 5m5-5H6\" />\n                    </svg>\n                </button>\n            </div>\n        </div>\n    );\n}\n","import React, { useState } from \"react\";\n\ntype AllowedType = string | number;\n\ninterface MultiEnumSelectProps<T extends AllowedType> {\n    label: string;\n    options: T[];\n    value: T[];\n    onChange: (newValue: T[]) => void;\n}\n\nexport function MultiEnumSelect<T extends AllowedType>({\n                                                           label,\n                                                           options,\n                                                           value,\n                                                           onChange,\n                                                       }: MultiEnumSelectProps<T>) {\n    const [input, setInput] = useState(\"\");\n    const [isOpen, setIsOpen] = useState(false);\n\n    const handleAdd = (item: T) => {\n        if (!value.includes(item)) {\n            onChange([...value, item]);\n        }\n        setInput(\"\");\n        setIsOpen(false);\n    };\n\n    const handleRemove = (item: T) => {\n        onChange(value.filter((v) => v !== item));\n    };\n\n    // Filter based on input, but show all when input is empty\n    const filteredOptions = options.filter(\n        (opt) =>\n            opt.toString().toLowerCase().includes(input.toLowerCase()) &&\n            !value.includes(opt)\n    );\n\n    return (\n        <div className=\"space-y-2 relative\">\n            <label className=\"block text-sm font-semibold text-gray-700\">{label}</label>\n\n            {/* Selected chips */}\n            <div className=\"flex flex-wrap gap-2 mb-2\">\n                {value.map((item) => (\n                    <span\n                        key={item.toString()}\n                        className=\"flex items-center gap-1 bg-blue-100 text-blue-800 px-2 py-1 rounded-lg text-sm\"\n                    >\n            {item}\n                        <button\n                            type=\"button\"\n                            onClick={() => handleRemove(item)}\n                            className=\"text-red-500 hover:text-red-700\"\n                        >\n              ×\n            </button>\n          </span>\n                ))}\n            </div>\n\n            {/* Input */}\n            <input\n                type=\"text\"\n                value={input}\n                onChange={(e) => {\n                    setInput(e.target.value);\n                    setIsOpen(true);\n                }}\n                onFocus={() => setIsOpen(true)}\n                onBlur={() => setTimeout(() => setIsOpen(false), 150)} // delay to allow click\n                placeholder=\"Type or select...\"\n                className=\"w-full border px-3 py-2 rounded-lg\"\n            />\n\n            {/* Dropdown */}\n            {isOpen && (\n                <ul className=\"absolute z-10 w-full border rounded-lg mt-1 bg-white shadow max-h-40 overflow-y-auto\">\n                    {filteredOptions.map((opt) => (\n                        <li\n                            key={opt.toString()}\n                            onClick={() => handleAdd(opt)}\n                            className=\"px-3 py-2 hover:bg-blue-100 cursor-pointer\"\n                        >\n                            {opt}\n                        </li>\n                    ))}\n                    {filteredOptions.length === 0 && (\n                        <li className=\"px-3 py-2 text-gray-400\">No matches</li>\n                    )}\n                </ul>\n            )}\n        </div>\n    );\n}\n","import React, {useEffect, useState} from 'react';\nimport {MultiEnumSelect} from \"../Common/MultiEnumSelect\"\ninterface KnittingMachineData {\n    diameter: number;\n    gauge: number[];\n    machineType: string;\n    specialFeatures?: string[];\n    machineCylinderTrack: number;\n    takedownRollerType: string;\n    typeOfYarn: string[];\n    machineBrand: string;\n    noOfMachines: number;\n}\n\ninterface KnittingMachineProps {\n    machinery?: KnittingMachineData;\n    setMachinery: (machine: KnittingMachineData) => void;\n    onCancel: () => void;\n}\n\nconst KnittingMachine: React.FC<KnittingMachineProps> = ({\n                                                             machinery,\n                                                             setMachinery,\n                                                             onCancel,\n                                                         }) => {\n    const [formData, setFormData] = useState<KnittingMachineData>(machinery || {\n        diameter: 0,\n        gauge: [],\n        machineType: '',\n        specialFeatures: [],\n        machineCylinderTrack: 0,\n        takedownRollerType: '',\n        typeOfYarn: [],\n        machineBrand: '',\n        noOfMachines: 1,\n    });\n\n    const [errors, setErrors] = useState<Record<string, string>>({});\n\n    const diameterOptions = [\n        \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",\n        \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\",\n        \"26\", \"27\", \"28\", \"29\", \"30\", \"32\", \"34\", \"36\", \"38\", \"40\",\n        \"42\", \"44\"\n    ];\n\n    const guageOptions = [\n        \"5\", \"7\", \"9\", \"12\", \"14\", \"16\", \"18\", \"20\", \"24\", \"28\",\n        \"30\", \"32\", \"34\", \"36\", \"40\", \"44\", \"48\", \"52\", \"56\", \"60\"\n    ];\n\n    const machineTypes = [\n        \"Single Jersey\",\n        \"Double Jersey - Rib\",\n        \"Double Jersey - Interlock\",\n        \"3 Thread Fleece\",\n        \"Wrapper\",\n        \"Terry\",\n        \"Seamless\",\n        \"Garment Length\",\n    ];\n\n    const specialFunctionalities = [\n        \"Single Feeder\",\n        \"Auto-striper\",\n        \"Full Jacquard\",\n        \"Mini Jacquard\",\n        \"Wrapper\",\n        \"Pointel Mini Jacquard\",\n        \"Pointel Jacquard\",\n        \"Denim Knit\",\n        \"Double Side Terry\",\n        \"Matress\",\n        \"Polar Fleece\",\n        \"Poly Fleece\",\n        \"Quilt Design\",\n        \"Spacer\",\n        \"Sweater\",\n    ];\n\n    const cylinderTrackOptions = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"];\n    const takedownRollerTypes = [\"Tubular\", \"open width\"];\n    const yarnTypes = [\"cotton\", \"viscose/Spun\", \"polyester/filament\"];\n    const machineBrands = [\n        \"Mayer & Cie\", \"Unitex\", \"Year China\", \"Terrot\", \"Lakshmi Terrot\",\n        \"CMS\", \"Falmac\", \"FUKURAHA\", \"FUKUHAMA\", \"Buiyuan\", \"Liski\",\n        \"Pailung\", \"Santoni\", \"Smart\", \"Vilike\", \"Other\",\n    ];\n\n    const validate = () => {\n        const newErrors: Record<string, string> = {};\n\n        if (!formData.diameter || formData.diameter === 0) {\n            newErrors.diameter = 'Diameter is required';\n        }\n        if (!formData.gauge || formData.gauge.length === 0) {\n            newErrors.guage = 'At least one gauge must be selected';\n        }\n        if (!formData.machineType) {\n            newErrors.machineType = 'Machine type is required';\n        }\n        if (!formData.machineCylinderTrack || formData.machineCylinderTrack === 0) {\n            newErrors.machineCylinderTrack = 'Cylinder track is required';\n        }\n        if (!formData.takedownRollerType) {\n            newErrors.takedownRollerType = 'Takedown roller type is required';\n        }\n        if (!formData.typeOfYarn) {\n            newErrors.typeOfYarn = 'Yarn type is required';\n        }\n        if (!formData.machineBrand) {\n            newErrors.machineBrand = 'Machine brand is required';\n        }\n        if (!formData.noOfMachines || formData.noOfMachines < 1) {\n            newErrors.noOfMachines = 'Number of machines must be at least 1';\n        }\n\n        setErrors(newErrors);\n        return Object.keys(newErrors).length === 0;\n    };\n\n    const handleChange =<K extends keyof KnittingMachineData> (field: K, value: KnittingMachineData[K]) => {\n\n        const newData = { ...formData, [field]: value };\n        setFormData(newData);\n\n        if (errors[field]) {\n            setErrors(prev => ({ ...prev, [field]: '' }));\n        }\n\n    };\n\n    useEffect(() => {\n\n    }, [formData.gauge]);\n\n    const handleSubmit = () => {\n        if (validate()) {\n            setMachinery(formData);\n            // reset form for next entry\n            setFormData({\n                diameter: 0,\n                gauge: [],\n                machineType: '',\n                specialFeatures: [],\n                machineCylinderTrack: 0,\n                takedownRollerType: '',\n                typeOfYarn: [],\n                machineBrand: '',\n                noOfMachines: 1,\n            });\n            onCancel();\n        }\n    };\n\n\n    return (\n        <div className=\"bg-white border border-gray-200 rounded-lg p-6 space-y-6\">\n            {/* Header */}\n            <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-xl font-semibold text-gray-800\">\n                    Add Knitting Machine\n                </h3>\n                <button\n                    type=\"button\"\n                    onClick={onCancel}\n                    className=\"text-gray-600 hover:text-gray-800 p-2 rounded-full hover:bg-gray-100 transition-colors\"\n                    title=\"Cancel\"\n                >\n                    <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                    </svg>\n                </button>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {/* Diameter */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Diameter <span className=\"text-red-500\">*</span>\n                    </label>\n                    <select\n                        value={formData.diameter || ''}\n                        onChange={(e) => handleChange('diameter', Number(e.target.value))}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    >\n                        <option value=\"\">Select diameter</option>\n                        {diameterOptions.map(d => (\n                            <option key={d} value={d}>{d}</option>\n                        ))}\n                    </select>\n                    {errors.diameter && (\n                        <p className=\"text-sm text-red-500\">{errors.diameter}</p>\n                    )}\n                </div>\n\n                {/* Machine Type */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Machine Type <span className=\"text-red-500\">*</span>\n                    </label>\n                    <select\n                        value={formData.machineType}\n                        onChange={(e) => handleChange('machineType', e.target.value)}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    >\n                        <option value=\"\">Select machine type</option>\n                        {machineTypes.map(type => (\n                            <option key={type} value={type}>{type}</option>\n                        ))}\n                    </select>\n                    {errors.machineType && (\n                        <p className=\"text-sm text-red-500\">{errors.machineType}</p>\n                    )}\n                </div>\n\n                {/* Machine Brand */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Machine Brand <span className=\"text-red-500\">*</span>\n                    </label>\n                    <select\n                        value={formData.machineBrand}\n                        onChange={(e) => handleChange('machineBrand', e.target.value)}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    >\n                        <option value=\"\">Select machine brand</option>\n                        {machineBrands.map(brand => (\n                            <option key={brand} value={brand}>{brand}</option>\n                        ))}\n                    </select>\n                    {errors.machineBrand && (\n                        <p className=\"text-sm text-red-500\">{errors.machineBrand}</p>\n                    )}\n                </div>\n\n                {/* Number of Machines */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Number of Machines <span className=\"text-red-500\">*</span>\n                    </label>\n                    <input\n                        type=\"number\"\n                        min=\"1\"\n                        value={formData.noOfMachines || ''}\n                        onChange={(e) => handleChange('noOfMachines', Number(e.target.value))}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                        placeholder=\"Enter number of machines\"\n                    />\n                    {errors.noOfMachines && (\n                        <p className=\"text-sm text-red-500\">{errors.noOfMachines}</p>\n                    )}\n                </div>\n\n                {/* Cylinder Track */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Machine Cylinder Track <span className=\"text-red-500\">*</span>\n                    </label>\n                    <select\n                        value={formData.machineCylinderTrack || ''}\n                        onChange={(e) => handleChange('machineCylinderTrack', Number(e.target.value))}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    >\n                        <option value=\"\">Select cylinder track</option>\n                        {cylinderTrackOptions.map(track => (\n                            <option key={track} value={track}>{track}</option>\n                        ))}\n                    </select>\n                    {errors.machineCylinderTrack && (\n                        <p className=\"text-sm text-red-500\">{errors.machineCylinderTrack}</p>\n                    )}\n                </div>\n\n                {/* Takedown Roller Type */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Takedown Roller Type <span className=\"text-red-500\">*</span>\n                    </label>\n                    <select\n                        value={formData.takedownRollerType}\n                        onChange={(e) => handleChange('takedownRollerType', e.target.value)}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    >\n                        <option value=\"\">Select roller type</option>\n                        {takedownRollerTypes.map(type => (\n                            <option key={type} value={type}>{type}</option>\n                        ))}\n                    </select>\n                    {errors.takedownRollerType && (\n                        <p className=\"text-sm text-red-500\">{errors.takedownRollerType}</p>\n                    )}\n                </div>\n\n                {/* Yarn Type */}\n                <div className=\"space-y-2\">\n                    <MultiEnumSelect\n                        label=\"Type of Yarns *\"\n                        options={yarnTypes}\n                        value={formData.typeOfYarn}\n                        onChange={(newValue) => handleChange(\"typeOfYarn\", newValue)}\n                    />\n                    {errors.typeOfYarn && <p className=\"text-sm   text-red-500\">{errors.typeOfYarn}</p>}\n\n                </div>\n\n\n                        <div className={\"\"}>\n                            <MultiEnumSelect\n\n                                label=\"Special Features\"\n                                options={specialFunctionalities}\n                                value={formData.specialFeatures ?? []}\n                                onChange={(newValue) => handleChange(\"specialFeatures\", newValue)}\n                            />\n                        </div>\n\n\n\n            </div>\n\n            <div className=\"space-y-2 o\">\n                <MultiEnumSelect\n                    label=\"Gauge *\"\n                    options={guageOptions.map(Number)} // convert to numbers\n                    value={formData.gauge}\n                    onChange={(newValue) => handleChange(\"gauge\", newValue)}\n                />\n                {errors.guage && <p className=\"text-sm text-red-500\">{errors.guage}</p>}\n            </div>\n            {/* Gauge Selection */}\n\n\n\n            {/* Action Buttons */}\n            <div className=\"flex justify-end gap-3 pt-6 border-t border-gray-200\">\n                <button\n                    type=\"button\"\n                    onClick={onCancel}\n                    className=\"px-6 py-3 border border-gray-300 rounded-lg hover:bg-gray-50 font-medium transition-colors\"\n                >\n                    Cancel\n                </button>\n                <button\n                    type=\"button\"\n                    onClick={handleSubmit}\n                    className=\"px-6 py-3  bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium transition-colors\"\n                >\n                    Add Machine\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default KnittingMachine;","import React from 'react';\n\ninterface YarnSpinningData {\n    [key: string]: unknown;\n}\n\ninterface YarnSpinningProps {\n    machinery?: YarnSpinningData;\n    setMachinery: (machine: YarnSpinningData) => void;\n    onCancel: () => void;\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst YarnSpinningMachine: React.FC<YarnSpinningProps> = ({machinery, setMachinery, onCancel,\n                                                         }) => {\n\n\n    return (\n\n        <div className=\"bg-white border border-gray-200 rounded-lg p-6 space-y-6 text-center\">\n            <h3 className=\"text-xl font-semibold text-gray-800\">\n                Checking Machine Setup\n            </h3>\n            <p className=\"text-gray-600\">\n                The <span className=\"font-medium\">Yarn Spinning Machine</span> form is still\n                under development. You can skip this step for now and continue with\n                other configurations.\n            </p>\n        </div>\n    );\n};\n\nexport default YarnSpinningMachine;","import React, { useState} from 'react';\n\ninterface YarnProcessingMachineData {\n    typeOfYarnProcessingMachine: \"Yarn Dyeing\" | \"Yarn Twisting\" | \"Cone-Winding\";\n    noOfHeads: number;\n    typeOfYarn: \"Cotton\" | \"Viscose/Spun\" | \"Polyester/Filament\";\n    noOfMachines: number;\n}\n\ninterface YarnProcessingMachineProps {\n    machinery?: YarnProcessingMachineData;\n    setMachinery: (machine: YarnProcessingMachineData) => void;\n    onCancel: () => void;\n}\n\nconst YarnProcessingMachine: React.FC<YarnProcessingMachineProps> = ({\n                                                             machinery,\n                                                             setMachinery,\n                                                             onCancel,\n                                                         }) => {\n    const [formData, setFormData] = useState<YarnProcessingMachineData>(\n        machinery || {\n            typeOfYarnProcessingMachine: \"Yarn Dyeing\",\n            noOfHeads: 1,\n            typeOfYarn: \"Cotton\",\n            noOfMachines: 1,\n        }\n    );\n\n    const [errors, setErrors] = useState<Record<string, string>>({});\n    const machineTypes = [\"Yarn Dyeing\", \"Yarn Twisting\", \"Cone-Winding\"];\n    const yarnTypes = [\"Cotton\", \"Viscose/Spun\", \"Polyester/Filament\"];\n\n\n    const validate = () => {\n        const newErrors: Record<string, string> = {};\n\n        if (!formData.typeOfYarnProcessingMachine)\n            newErrors.typeOfYarnProcessingMachine = \"Required\";\n        if (!formData.noOfHeads || formData.noOfHeads <= 0)\n            newErrors.noOfHeads = \"Heads must be positive\";\n        if (!formData.typeOfYarn) newErrors.typeOfYarn = \"Required\";\n        if (!formData.noOfMachines || formData.noOfMachines <= 0)\n            newErrors.noOfMachines = \"Machines must be positive\";\n\n        setErrors(newErrors);\n        return Object.keys(newErrors).length === 0;\n    };\n\n    const handleChange = <K extends keyof YarnProcessingMachineData> (field: K, value: YarnProcessingMachineData[K]) => {\n\n        setFormData({ ...formData, [field]: value });\n        if (errors[field]) {\n            setErrors((prev) => ({ ...prev, [field]: \"\" }));\n        }\n    };\n\n\n    const handleSubmit = () => {\n        if (validate()) {\n            setMachinery(formData);\n            setFormData({\n                typeOfYarnProcessingMachine: \"Yarn Dyeing\",\n                noOfHeads: 1,\n                typeOfYarn: \"Cotton\",\n                noOfMachines: 1,\n            });\n            onCancel();\n        }\n    };\n\n    return (\n        <div className=\"bg-white border border-gray-200 rounded-lg p-6 space-y-6\">\n            <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-xl font-semibold text-gray-800\">\n                    Add Yarn Processing Machine\n                </h3>\n                <button\n                    type=\"button\"\n                    onClick={onCancel}\n                    className=\"text-gray-600 hover:text-gray-800 p-2 rounded-full hover:bg-gray-100 transition-colors\"\n                    title=\"Cancel\"\n                >\n                    <svg\n                        className=\"w-5 h-5\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        viewBox=\"0 0 24 24\"\n                    >\n                        <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={2}\n                            d=\"M6 18L18 6M6 6l12 12\"\n                        />\n                    </svg>\n                </button>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {/* Type of Yarn Processing Machine */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Type of Machine <span className=\"text-red-500\">*</span>\n                    </label>\n                    <select\n                        value={formData.typeOfYarnProcessingMachine}\n                        onChange={(e) =>\n                            handleChange(\n                                \"typeOfYarnProcessingMachine\",\n                                e.target.value as YarnProcessingMachineData[\"typeOfYarnProcessingMachine\"]\n                            )\n                        }\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    >\n                        {machineTypes.map((type) => (\n                            <option key={type} value={type}>\n                                {type}\n                            </option>\n                        ))}\n                    </select>\n                    {errors.typeOfYarnProcessingMachine && (\n                        <p className=\"text-sm text-red-500\">\n                            {errors.typeOfYarnProcessingMachine}\n                        </p>\n                    )}\n                </div>\n\n                {/* No of Heads */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Number of Heads <span className=\"text-red-500\">*</span>\n                    </label>\n                    <input\n                        type=\"number\"\n                        min=\"1\"\n                        value={formData.noOfHeads}\n                        onChange={(e) => handleChange(\"noOfHeads\", Number(e.target.value))}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    />\n                    {errors.noOfHeads && (\n                        <p className=\"text-sm text-red-500\">{errors.noOfHeads}</p>\n                    )}\n                </div>\n\n                {/* Yarn Type */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Yarn Type <span className=\"text-red-500\">*</span>\n                    </label>\n                    <select\n                        value={formData.typeOfYarn}\n                        onChange={(e) =>\n                            handleChange(\n                                \"typeOfYarn\",\n                                e.target.value as YarnProcessingMachineData[\"typeOfYarn\"]\n                            )\n                        }\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    >\n                        {yarnTypes.map((y) => (\n                            <option key={y} value={y}>\n                                {y}\n                            </option>\n                        ))}\n                    </select>\n                    {errors.typeOfYarn && (\n                        <p className=\"text-sm text-red-500\">{errors.typeOfYarn}</p>\n                    )}\n                </div>\n\n                {/* No of Machines */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Number of Machines <span className=\"text-red-500\">*</span>\n                    </label>\n                    <input\n                        type=\"number\"\n                        min=\"1\"\n                        value={formData.noOfMachines}\n                        onChange={(e) =>\n                            handleChange(\"noOfMachines\", Number(e.target.value))\n                        }\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    />\n                    {errors.noOfMachines && (\n                        <p className=\"text-sm text-red-500\">{errors.noOfMachines}</p>\n                    )}\n                </div>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex justify-end gap-3 pt-6 border-t border-gray-200\">\n                <button\n                    type=\"button\"\n                    onClick={onCancel}\n                    className=\"px-6 py-3 border border-gray-300 rounded-lg hover:bg-gray-50 font-medium transition-colors\"\n                >\n                    Cancel\n                </button>\n                <button\n                    type=\"button\"\n                    onClick={handleSubmit}\n                    className=\"px-6 py-3  bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium transition-colors\"\n                >\n                    Add Machine\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default YarnProcessingMachine;","import React, { useState} from 'react';\n\ninterface WeavingMachineData {\n    machineType: \"Hand Loom\" | \"Rapier Loom\" | \"Air Jet Loom\" | \"Hand Loom - Jacquard\"|\"Automatic Jacquard\"|\"Projectile Loom\" | \"Water Jet Loom\" | \"Other\";\n\n    typeOfYarn: \"Cotton\" | \"Viscose/Spun\" | \"Polyester/Filament\";\n    noOfMachines: number;\n}\n\ninterface WeavingMachineProps {\n    machinery?: WeavingMachineData;\n    setMachinery: (machine: WeavingMachineData) => void;\n    onCancel: () => void;\n}\n\nconst WeavingMachine: React.FC<WeavingMachineProps> = ({\n                                                                         machinery,\n                                                                         setMachinery,\n                                                                         onCancel,\n                                                                     }) => {\n    const [formData, setFormData] = useState<WeavingMachineData>(\n        machinery || {\n            machineType: \"Hand Loom\",\n            typeOfYarn: \"Cotton\",\n            noOfMachines: 1,\n        }\n    );\n\n    const [errors, setErrors] = useState<Record<string, string>>({});\n    const machineTypes: WeavingMachineData[\"machineType\"][] = [\n        \"Hand Loom\",\n        \"Rapier Loom\",\n        \"Air Jet Loom\",\n        \"Hand Loom - Jacquard\",\n        \"Automatic Jacquard\",\n        \"Projectile Loom\",\n        \"Water Jet Loom\",\n        \"Other\",\n    ];\n    const yarnTypes: WeavingMachineData[\"typeOfYarn\"][] = [\n        \"Cotton\",\n        \"Viscose/Spun\",\n        \"Polyester/Filament\",\n    ];\n\n\n    const validate = () => {\n        const newErrors: Record<string, string> = {};\n            if (!formData.machineType) newErrors.machineType = \"Machine type is required\";\n            if (!formData.typeOfYarn) newErrors.typeOfYarn = \"Yarn type is required\";\n            if (!formData.noOfMachines || formData.noOfMachines <= 0) {\n                newErrors.noOfMachines = \"Number of machines must be greater than 0\";\n            }\n        setErrors(newErrors);\n        return Object.keys(newErrors).length === 0;\n    };\n\n    const handleChange = <K extends keyof WeavingMachineData> (field: K, value: WeavingMachineData[K]) => {\n\n        setFormData({ ...formData, [field]: value });\n        if (errors[field]) {\n            setErrors((prev) => ({ ...prev, [field]: \"\" }));\n        }\n    };\n\n\n    const handleSubmit = () => {\n        if (validate()) {\n            setMachinery(formData);\n            setFormData({\n                machineType: \"Hand Loom\",\n                typeOfYarn: \"Cotton\",\n                noOfMachines: 1,\n            });\n            onCancel();\n        }\n    };\n\n    return (\n        <div className=\"bg-white border border-gray-200 rounded-lg p-6 space-y-6\">\n            <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-xl font-semibold text-gray-800\">\n                    Add Weaving Machine\n                </h3>\n                <button\n                    type=\"button\"\n                    onClick={onCancel}\n                    className=\"text-gray-600 hover:text-gray-800 p-2 rounded-full hover:bg-gray-100 transition-colors\"\n                    title=\"Cancel\"\n                >\n                    <svg\n                        className=\"w-5 h-5\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        viewBox=\"0 0 24 24\"\n                    >\n                        <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={2}\n                            d=\"M6 18L18 6M6 6l12 12\"\n                        />\n                    </svg>\n                </button>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {/* Type of Yarn Processing Machine */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Machine Type <span className=\"text-red-500\">*</span>\n                    </label>\n                    <select\n                        value={formData.machineType}\n                        onChange={(e) =>\n                            handleChange(\n                                \"machineType\",\n                                e.target.value as WeavingMachineData[\"machineType\"]\n                            )\n                        }\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    >\n                        {machineTypes.map((type) => (\n                            <option key={type} value={type}>\n                                {type}\n                            </option>\n                        ))}\n                    </select>\n                    {errors.typeOfYarnProcessingMachine && (\n                        <p className=\"text-sm text-red-500\">\n                            {errors.typeOfYarnProcessingMachine}\n                        </p>\n                    )}\n                </div>\n\n                {/* Yarn Type */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Yarn Type <span className=\"text-red-500\">*</span>\n                    </label>\n                    <select\n                        value={formData.typeOfYarn}\n                        onChange={(e) =>\n                            handleChange(\n                                \"typeOfYarn\",\n                                e.target.value as WeavingMachineData[\"typeOfYarn\"]\n                            )\n                        }\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    >\n                        {yarnTypes.map((y) => (\n                            <option key={y} value={y}>\n                                {y}\n                            </option>\n                        ))}\n                    </select>\n                    {errors.typeOfYarn && (\n                        <p className=\"text-sm text-red-500\">{errors.noOfHeads}</p>\n                    )}\n                </div>\n\n                {/* Number of Machines */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Number of Machines <span className=\"text-red-500\">*</span>\n                    </label>\n                    <input\n                        type=\"number\"\n                        min=\"1\"\n                        value={formData.noOfMachines}\n                        onChange={(e) => handleChange(\"noOfMachines\", Number(e.target.value))}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    />\n                    {errors.typeOfYarn && (\n                        <p className=\"text-sm text-red-500\">{errors.typeOfYarn}</p>\n                    )}\n                </div>\n\n\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex justify-end gap-3 pt-6 border-t border-gray-200\">\n                <button\n                    type=\"button\"\n                    onClick={onCancel}\n                    className=\"px-6 py-3 border border-gray-300 rounded-lg hover:bg-gray-50 font-medium transition-colors\"\n                >\n                    Cancel\n                </button>\n                <button\n                    type=\"button\"\n                    onClick={handleSubmit}\n                    className=\"px-6 py-3  bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium transition-colors\"\n                >\n                    Add Machine\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default WeavingMachine","import React, { useState } from \"react\";\n\ninterface DyeingMachineData {\n    DyeingMachineType: \"Jigger\" | \"Soft FLow\" | \"Jet\" | \"Winch\" | \"Beam\" | \"Air Flow\" | \"Pad Stream\";\n    minimumCapacity?: number;\n    maximumCapacity?: number;\n    typeOfFabric?: \"Tubular\" | \"open width\";\n    Maker?: string;\n    noOfMachines: number;\n}\n\ninterface Props {\n    machinery?: DyeingMachineData;\n    setMachinery: (machine: DyeingMachineData) => void;\n    onCancel: () => void;\n}\n\nconst machineTypes: DyeingMachineData[\"DyeingMachineType\"][] = [\n    \"Jigger\",\n    \"Soft FLow\",\n    \"Jet\",\n    \"Winch\",\n    \"Beam\",\n    \"Air Flow\",\n    \"Pad Stream\",\n];\n\nconst fabricTypes: (\"Tubular\" | \"open width\")[] = [\"Tubular\", \"open width\"];\n\nconst DyeingMachineForm: React.FC<Props> = ({ machinery, setMachinery, onCancel }) => {\n    const [formData, setFormData] = useState<DyeingMachineData>(\n        machinery || {\n            DyeingMachineType: \"Jigger\",\n            noOfMachines: 1,\n        }\n    );\n    const [errors, setErrors] = useState<Record<string, string>>({});\n\n    const handleChange =<K extends keyof DyeingMachineData> (field: K, value: DyeingMachineData[K]) => {\n        setFormData((prev) => ({ ...prev, [field]: value }));\n        if (errors[field]) setErrors((prev) => ({ ...prev, [field]: \"\" }));\n    };\n\n    const validate = () => {\n        const newErrors: Record<string, string> = {};\n        if (!formData.DyeingMachineType) newErrors.DyeingMachineType = \"Machine type is required\";\n        if (!formData.noOfMachines || formData.noOfMachines < 1)\n            newErrors.noOfMachines = \"At least 1 machine required\";\n        if (formData.DyeingMachineType !== \"Jigger\" && !formData.typeOfFabric)\n            newErrors.typeOfFabric = \"Fabric type is required\";\n        setErrors(newErrors);\n        return Object.keys(newErrors).length === 0;\n    };\n\n    const handleSubmit = () => {\n        if (validate()) {\n            setMachinery(formData);\n            onCancel();\n        }\n    };\n\n    return (\n        <div className=\"bg-white border border-gray-200 rounded-lg p-6 space-y-6 shadow-md\">\n            {/* Header */}\n            <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-xl font-semibold text-gray-800\">Add Dyeing Machine</h3>\n                <button\n                    type=\"button\"\n                    onClick={onCancel}\n                    className=\"text-gray-600 hover:text-gray-800 p-2 rounded-full hover:bg-gray-100 transition-colors\"\n                    title=\"Cancel\"\n                >\n                    <svg\n                        className=\"w-5 h-5\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        viewBox=\"0 0 24 24\"\n                    >\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                    </svg>\n                </button>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {/* Machine Type */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Machine Type <span className=\"text-red-500\">*</span>\n                    </label>\n                    <select\n                        value={formData.DyeingMachineType}\n                        onChange={(e) => handleChange(\"DyeingMachineType\", e.target.value as DyeingMachineData[\"DyeingMachineType\"])}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    >\n                        {machineTypes.map((type) => (\n                            <option key={type} value={type}>\n                                {type}\n                            </option>\n                        ))}\n                    </select>\n                    {errors.DyeingMachineType && <p className=\"text-sm text-red-500\">{errors.DyeingMachineType}</p>}\n                </div>\n\n                {/* Maker */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">Maker</label>\n                    <input\n                        type=\"text\"\n                        value={formData.Maker || \"\"}\n                        onChange={(e) => handleChange(\"Maker\", e.target.value)}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                        placeholder=\"Enter machine maker\"\n                    />\n                </div>\n\n                {/* Min Capacity */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">Minimum Capacity</label>\n                    <input\n                        min={0}\n                        type=\"number\"\n                        value={formData.minimumCapacity ?? \"\"}\n                        onChange={(e) => handleChange(\"minimumCapacity\", e.target.value ? Number(e.target.value) : undefined)}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                        placeholder=\"Enter min capacity\"\n                    />\n                </div>\n\n                {/* Max Capacity */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">Maximum Capacity</label>\n                    <input\n                        type=\"number\"\n                        value={formData.maximumCapacity ?? \"\"}\n                        onChange={(e) => handleChange(\"maximumCapacity\", e.target.value ? Number(e.target.value) : undefined)}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                        placeholder=\"Enter max capacity\"\n                    />\n                </div>\n\n                {/* Fabric type (required if not Jigger) */}\n\n                    <div className=\"space-y-2\">\n                        <label className=\"block text-sm font-semibold text-gray-700\">\n                            Type of Fabric {formData.DyeingMachineType !== \"Jigger\"? <span className=\"text-red-500\">*</span> : <></>  }\n                        </label>\n                        <select\n                            required={formData.DyeingMachineType === \"Jigger\"}\n                            value={formData.typeOfFabric || \"\"}\n                            onChange={(e) =>\n                                handleChange(\"typeOfFabric\", e.target.value as \"Tubular\" | \"open width\")\n                            }\n                            className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                        >\n                            <option value=\"\">Select fabric type</option>\n                            {fabricTypes.map((f) => (\n                                <option key={f} value={f}>\n                                    {f}\n                                </option>\n                            ))}\n                        </select>\n                        {errors.typeOfFabric && (\n                            <p className=\"text-sm text-red-500\">{errors.typeOfFabric}</p>\n                        )}\n\n                        {errors.typeOfFabric && <p className=\"text-sm text-red-500\">{errors.typeOfFabric}</p>}\n                    </div>\n\n\n                {/* No of Machines */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Number of Machines <span className=\"text-red-500\">*</span>\n                    </label>\n                    <input\n                        type=\"number\"\n                        min=\"1\"\n                        value={formData.noOfMachines}\n                        onChange={(e) => handleChange(\"noOfMachines\", Number(e.target.value))}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                        placeholder=\"Enter number of machines\"\n                    />\n                    {errors.noOfMachines && <p className=\"text-sm text-red-500\">{errors.noOfMachines}</p>}\n                </div>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex justify-end gap-3 pt-6 border-t border-gray-200\">\n                <button\n                    type=\"button\"\n                    onClick={onCancel}\n                    className=\"px-6 py-3 border border-gray-300 rounded-lg hover:bg-gray-50 font-medium transition-colors\"\n                >\n                    Cancel\n                </button>\n                <button\n                    type=\"button\"\n                    onClick={handleSubmit}\n                    className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium transition-colors\"\n                >\n                    Add Machine\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default DyeingMachineForm;\n","import React, { useState } from \"react\";\n\ninterface FabricProcessingMachineData {\n    machineType:\n        | \"Stenter\"\n        | \"Dryer\"\n        | \"Heat-setting\"\n        | \"Fabric Slitting\"\n        | \"Napping or Raising\"\n        | \"Raising\" |\n        \"Padding\"\n        | \"Mercerizing - Knit\"\n        | \"Peaching\"\n        | \"Sueding\"\n        | \"Embossing\"\n        | \"Calendring\"\n        | \"Mercherizing - Woven\";\n    typeOfFabric: \"Tubular\" | \"open width\";\n    maxWidthOfFabric: number;\n    machineBrand: string;\n    noOfMachines: number;\n}\n\ninterface FabricProcessingMachineProps {\n    machinery?: FabricProcessingMachineData;\n    setMachinery: (machine: FabricProcessingMachineData) => void;\n    onCancel: () => void;\n}\n\nconst FabricProcessingMachine: React.FC<FabricProcessingMachineProps> = ({\n                                                                             machinery,\n                                                                             setMachinery,\n                                                                             onCancel,\n                                                                         }) => {\n    const [formData, setFormData] = useState<FabricProcessingMachineData>(\n        machinery || {\n            machineType: \"Stenter\",\n            typeOfFabric: \"Tubular\",\n            maxWidthOfFabric: 1,\n            machineBrand: \"\",\n            noOfMachines: 1,\n        }\n    );\n\n    const [errors, setErrors] = useState<Record<string, string>>({});\n\n    const machineTypes: FabricProcessingMachineData[\"machineType\"][] = [\n        \"Stenter\",\n        \"Dryer\",\n        \"Heat-setting\",\n        \"Fabric Slitting\",\n        \"Napping or Raising\",\n        \"Raising\" ,\n        \"Padding\",\n        \"Mercerizing - Knit\",\n        \"Peaching\",\n        \"Sueding\",\n        \"Embossing\",\n        \"Calendring\",\n        \"Mercherizing - Woven\",\n    ];\n\n    const fabricTypes: FabricProcessingMachineData[\"typeOfFabric\"][] = [\n        \"Tubular\",\n        \"open width\",\n    ];\n\n    const validate = () => {\n        const newErrors: Record<string, string> = {};\n\n        if (!formData.machineType) newErrors.machineType = \"Required\";\n        if (!formData.typeOfFabric) newErrors.typeOfFabric = \"Required\";\n        if (!formData.maxWidthOfFabric || formData.maxWidthOfFabric <= 0)\n            newErrors.maxWidthOfFabric = \"Width must be positive\";\n        if (!formData.machineBrand.trim())\n            newErrors.machineBrand = \"Machine brand is required\";\n        if (!formData.noOfMachines || formData.noOfMachines <= 0)\n            newErrors.noOfMachines = \"Machines must be positive\";\n\n        setErrors(newErrors);\n        return Object.keys(newErrors).length === 0;\n    };\n\n    const handleChange = <K extends keyof FabricProcessingMachineData>(\n        field: K,\n        value: FabricProcessingMachineData[K]\n    ) => {\n        setFormData({ ...formData, [field]: value });\n        if (errors[field]) {\n            setErrors((prev) => ({ ...prev, [field]: \"\" }));\n        }\n    };\n\n    const handleSubmit = () => {\n        if (validate()) {\n            setMachinery(formData);\n            setFormData({\n                machineType: \"Stenter\",\n                typeOfFabric: \"Tubular\",\n                maxWidthOfFabric: 1,\n                machineBrand: \"\",\n                noOfMachines: 1,\n            });\n            onCancel();\n        }\n    };\n\n    return (\n        <div className=\"bg-white border border-gray-200 rounded-lg p-6 space-y-6\">\n            <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-xl font-semibold text-gray-800\">\n                    Add Fabric Processing Machine\n                </h3>\n                <button\n                    type=\"button\"\n                    onClick={onCancel}\n                    className=\"text-gray-600 hover:text-gray-800 p-2 rounded-full hover:bg-gray-100 transition-colors\"\n                    title=\"Cancel\"\n                >\n                    <svg\n                        className=\"w-5 h-5\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        viewBox=\"0 0 24 24\"\n                    >\n                        <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={2}\n                            d=\"M6 18L18 6M6 6l12 12\"\n                        />\n                    </svg>\n                </button>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {/* Machine Type */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Machine Type <span className=\"text-red-500\">*</span>\n                    </label>\n                    <select\n                        value={formData.machineType}\n                        onChange={(e) =>\n                            handleChange(\n                                \"machineType\",\n                                e.target.value as FabricProcessingMachineData[\"machineType\"]\n                            )\n                        }\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    >\n                        {machineTypes.map((type) => (\n                            <option key={type} value={type}>\n                                {type}\n                            </option>\n                        ))}\n                    </select>\n                    {errors.machineType && (\n                        <p className=\"text-sm text-red-500\">{errors.machineType}</p>\n                    )}\n                </div>\n\n                {/* Fabric Type */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Type of Fabric <span className=\"text-red-500\">*</span>\n                    </label>\n                    <select\n                        value={formData.typeOfFabric}\n                        onChange={(e) =>\n                            handleChange(\n                                \"typeOfFabric\",\n                                e.target.value as FabricProcessingMachineData[\"typeOfFabric\"]\n                            )\n                        }\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    >\n                        {fabricTypes.map((f) => (\n                            <option key={f} value={f}>\n                                {f}\n                            </option>\n                        ))}\n                    </select>\n                    {errors.typeOfFabric && (\n                        <p className=\"text-sm text-red-500\">{errors.typeOfFabric}</p>\n                    )}\n                </div>\n\n                {/* Max Width of Fabric */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Max Width of Fabric <span className=\"text-red-500\">*</span>\n                    </label>\n                    <input\n                        type=\"number\"\n                        min=\"1\"\n                        value={formData.maxWidthOfFabric}\n                        onChange={(e) =>\n                            handleChange(\"maxWidthOfFabric\", Number(e.target.value))\n                        }\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    />\n                    {errors.maxWidthOfFabric && (\n                        <p className=\"text-sm text-red-500\">{errors.maxWidthOfFabric}</p>\n                    )}\n                </div>\n\n                {/* Machine Brand */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Machine Brand <span className=\"text-red-500\">*</span>\n                    </label>\n                    <input\n                        type=\"text\"\n                        value={formData.machineBrand}\n                        onChange={(e) => handleChange(\"machineBrand\", e.target.value)}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    />\n                    {errors.machineBrand && (\n                        <p className=\"text-sm text-red-500\">{errors.machineBrand}</p>\n                    )}\n                </div>\n\n                {/* No of Machines */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Number of Machines <span className=\"text-red-500\">*</span>\n                    </label>\n                    <input\n                        type=\"number\"\n                        min=\"1\"\n                        value={formData.noOfMachines}\n                        onChange={(e) =>\n                            handleChange(\"noOfMachines\", Number(e.target.value))\n                        }\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    />\n                    {errors.noOfMachines && (\n                        <p className=\"text-sm text-red-500\">{errors.noOfMachines}</p>\n                    )}\n                </div>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex justify-end gap-3 pt-6 border-t border-gray-200\">\n                <button\n                    type=\"button\"\n                    onClick={onCancel}\n                    className=\"px-6 py-3 border border-gray-300 rounded-lg hover:bg-gray-50 font-medium transition-colors\"\n                >\n                    Cancel\n                </button>\n                <button\n                    type=\"button\"\n                    onClick={handleSubmit}\n                    className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium transition-colors\"\n                >\n                    Add Machine\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default FabricProcessingMachine;\n","import React, { useState } from \"react\";\n\ninterface FabricFinishingMachineData {\n    machineType:\"Compacting\"| \"Steaming\" | \"Calendring\"\n    typeOfFabric: \"Tubular\" | \"open width\";\n    maxWidthOfFabric: number;\n    machineBrand: string;\n    noOfMachines: number;\n}\n\ninterface FabricFinishingMachineProps {\n    machinery?: FabricFinishingMachineData;\n    setMachinery: (machine: FabricFinishingMachineData) => void;\n    onCancel: () => void;\n}\n\nconst FabricFinishingMachine: React.FC<FabricFinishingMachineProps> = ({\n                                                                             machinery,\n                                                                             setMachinery,\n                                                                             onCancel,\n                                                                         }) => {\n    const [formData, setFormData] = useState<FabricFinishingMachineData>(\n        machinery || {\n            machineType: \"Compacting\",\n            typeOfFabric: \"Tubular\",\n            maxWidthOfFabric: 1,\n            machineBrand: \"\",\n            noOfMachines: 1,\n        }\n    );\n\n    const [errors, setErrors] = useState<Record<string, string>>({});\n\n    const machineTypes = [\"Compacting\", \"Steaming\", \"Calendring\"];\n\n    const fabricTypes = [\"Tubular\", \"open width\"];\n\n    const validate = () => {\n        const newErrors: Record<string, string> = {};\n\n        if (!formData.machineType) newErrors.machineType = \"Required\";\n        if (!formData.typeOfFabric) newErrors.typeOfFabric = \"Required\";\n        if (!formData.maxWidthOfFabric || formData.maxWidthOfFabric <= 0)\n            newErrors.maxWidthOfFabric = \"Width must be positive\";\n        if (!formData.machineBrand.trim())\n            newErrors.machineBrand = \"Brand is required\";\n        if (!formData.noOfMachines || formData.noOfMachines <= 0)\n            newErrors.noOfMachines = \"Machines must be positive\";\n        setErrors(newErrors);\n        return Object.keys(newErrors).length === 0;\n    };\n\n    const handleChange = (\n        field: keyof FabricFinishingMachineData,\n        value: unknown\n    ) => {\n        setFormData({ ...formData, [field]: value });\n        if (errors[field]) {\n            setErrors((prev) => ({ ...prev, [field]: \"\" }));\n        }\n    };\n\n    const handleSubmit = () => {\n        if (validate()) {\n            setMachinery(formData);\n            setFormData({\n                machineType: \"Compacting\",\n                typeOfFabric: \"Tubular\",\n                maxWidthOfFabric: 1,\n                machineBrand: \"\",\n                noOfMachines: 1,\n            });\n            onCancel();\n        }\n    };\n\n    return (\n        <div className=\"bg-white border border-gray-200 rounded-lg p-6 space-y-6\">\n            <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-xl font-semibold text-gray-800\">\n                    Add Fabric Finishing Machine\n                </h3>\n                <button\n                    type=\"button\"\n                    onClick={onCancel}\n                    className=\"text-gray-600 hover:text-gray-800 p-2 rounded-full hover:bg-gray-100 transition-colors\"\n                    title=\"Cancel\"\n                >\n                    <svg\n                        className=\"w-5 h-5\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        viewBox=\"0 0 24 24\"\n                    >\n                        <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={2}\n                            d=\"M6 18L18 6M6 6l12 12\"\n                        />\n                    </svg>\n                </button>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {/* Machine Type */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Machine Type <span className=\"text-red-500\">*</span>\n                    </label>\n                    <select\n                        value={formData.machineType}\n                        onChange={(e) =>\n                            handleChange(\n                                \"machineType\",\n                                e.target.value as FabricFinishingMachineData[\"machineType\"]\n                            )\n                        }\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    >\n                        {machineTypes.map((type) => (\n                            <option key={type} value={type}>\n                                {type}\n                            </option>\n                        ))}\n                    </select>\n                    {errors.machineType && (\n                        <p className=\"text-sm text-red-500\">{errors.machineType}</p>\n                    )}\n                </div>\n\n                {/* Type of Fabric */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Type of Fabric <span className=\"text-red-500\">*</span>\n                    </label>\n                    <select\n                        value={formData.typeOfFabric}\n                        onChange={(e) =>\n                            handleChange(\n                                \"typeOfFabric\",\n                                e.target.value as FabricFinishingMachineData[\"typeOfFabric\"]\n                            )\n                        }\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    >\n                        {fabricTypes.map((type) => (\n                            <option key={type} value={type}>\n                                {type}\n                            </option>\n                        ))}\n                    </select>\n                    {errors.typeOfFabric && (\n                        <p className=\"text-sm text-red-500\">{errors.typeOfFabric}</p>\n                    )}\n                </div>\n\n                {/* Max Width of Fabric */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Max Width of Fabric <span className=\"text-red-500\">*</span>\n                    </label>\n                    <input\n                        type=\"number\"\n                        min=\"1\"\n                        value={formData.maxWidthOfFabric}\n                        onChange={(e) =>\n                            handleChange(\"maxWidthOfFabric\", Number(e.target.value))\n                        }\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    />\n                    {errors.maxWidthOfFabric && (\n                        <p className=\"text-sm text-red-500\">{errors.maxWidthOfFabric}</p>\n                    )}\n                </div>\n\n                {/* Machine Brand */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Machine Brand <span className=\"text-red-500\">*</span>\n                    </label>\n                    <input\n                        type=\"text\"\n                        value={formData.machineBrand}\n                        onChange={(e) => handleChange(\"machineBrand\", e.target.value)}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    />\n                    {errors.machineBrand && (\n                        <p className=\"text-sm text-red-500\">{errors.machineBrand}</p>\n                    )}\n                </div>\n\n                {/* No of Machines */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Number of Machines <span className=\"text-red-500\">*</span>\n                    </label>\n                    <input\n                        type=\"number\"\n                        min=\"1\"\n                        value={formData.noOfMachines}\n                        onChange={(e) =>\n                            handleChange(\"noOfMachines\", Number(e.target.value))\n                        }\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    />\n                    {errors.noOfMachines && (\n                        <p className=\"text-sm text-red-500\">{errors.noOfMachines}</p>\n                    )}\n                </div>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex justify-end gap-3 pt-6 border-t border-gray-200\">\n                <button\n                    type=\"button\"\n                    onClick={onCancel}\n                    className=\"px-6 py-3 border border-gray-300 rounded-lg hover:bg-gray-50 font-medium transition-colors\"\n                >\n                    Cancel\n                </button>\n                <button\n                    type=\"button\"\n                    onClick={handleSubmit}\n                    className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium transition-colors\"\n                >\n                    Add Machine\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default FabricFinishingMachine;\n","import React, { useState } from \"react\";\n\ninterface WashingMachineData {\n    machineType: \"Washing Machine\" | \"Tumble Dryer\" | \"Hydro Machine\";\n    noOfMachines: number;\n}\n\ninterface WashingMachineProps {\n    machinery?: WashingMachineData;\n    setMachinery: (machine: WashingMachineData) => void;\n    onCancel: () => void;\n}\n\nconst WashingMachineForm: React.FC<WashingMachineProps> = ({\n                                                               machinery,\n                                                               setMachinery,\n                                                               onCancel,\n                                                           }) => {\n    const [formData, setFormData] = useState<WashingMachineData>(\n        machinery || {\n            machineType: \"Washing Machine\",\n            noOfMachines: 1,\n        }\n    );\n\n    const [errors, setErrors] = useState<Record<string, string>>({});\n    const machineTypes = [\"Washing Machine\", \"Tumble Dryer\", \"Hydro Machine\"];\n\n    const validate = () => {\n        const newErrors: Record<string, string> = {};\n        if (!formData.machineType) newErrors.machineType = \"Required\";\n        if (!formData.noOfMachines || formData.noOfMachines <= 0) {\n            newErrors.noOfMachines = \"Machines must be positive\";\n        }\n        setErrors(newErrors);\n        return Object.keys(newErrors).length === 0;\n    };\n\n    const handleChange = <K extends keyof WashingMachineData> (field: K, value: WashingMachineData[K]) => {\n        setFormData({ ...formData, [field]: value });\n        if (errors[field]) {\n            setErrors((prev) => ({ ...prev, [field]: \"\" }));\n        }\n    };\n\n    const handleSubmit = () => {\n        if (validate()) {\n            setMachinery(formData);\n            setFormData({\n                machineType: \"Washing Machine\",\n                noOfMachines: 1,\n            });\n            onCancel();\n        }\n    };\n\n    return (\n        <div className=\"bg-white border border-gray-200 rounded-lg p-6 space-y-6\">\n            <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-xl font-semibold text-gray-800\">\n                    Add Washing Machine\n                </h3>\n                <button\n                    type=\"button\"\n                    onClick={onCancel}\n                    className=\"text-gray-600 hover:text-gray-800 p-2 rounded-full hover:bg-gray-100 transition-colors\"\n                    title=\"Cancel\"\n                >\n                    <svg\n                        className=\"w-5 h-5\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        viewBox=\"0 0 24 24\"\n                    >\n                        <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={2}\n                            d=\"M6 18L18 6M6 6l12 12\"\n                        />\n                    </svg>\n                </button>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {/* Machine Type */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Machine Type <span className=\"text-red-500\">*</span>\n                    </label>\n                    <select\n                        value={formData.machineType}\n                        onChange={(e) =>\n                            handleChange(\n                                \"machineType\",\n                                e.target.value as WashingMachineData[\"machineType\"]\n                            )\n                        }\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    >\n                        {machineTypes.map((type) => (\n                            <option key={type} value={type}>\n                                {type}\n                            </option>\n                        ))}\n                    </select>\n                    {errors.machineType && (\n                        <p className=\"text-sm text-red-500\">{errors.machineType}</p>\n                    )}\n                </div>\n\n                {/* Number of Machines */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Number of Machines <span className=\"text-red-500\">*</span>\n                    </label>\n                    <input\n                        type=\"number\"\n                        min=\"1\"\n                        value={formData.noOfMachines}\n                        onChange={(e) =>\n                            handleChange(\"noOfMachines\", Number(e.target.value))\n                        }\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    />\n                    {errors.noOfMachines && (\n                        <p className=\"text-sm text-red-500\">{errors.noOfMachines}</p>\n                    )}\n                </div>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex justify-end gap-3 pt-6 border-t border-gray-200\">\n                <button\n                    type=\"button\"\n                    onClick={onCancel}\n                    className=\"px-6 py-3 border border-gray-300 rounded-lg hover:bg-gray-50 font-medium transition-colors\"\n                >\n                    Cancel\n                </button>\n                <button\n                    type=\"button\"\n                    onClick={handleSubmit}\n                    className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium transition-colors\"\n                >\n                    Add Machine\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default WashingMachineForm;\n","import React, { useState } from \"react\";\n\ninterface CuttingMachineData {\n    machineType: \"Hand Cutting\" | \"Straight Knife\" | \"Band Knife\" | \"Automatic Cutting\";\n    noOfMachines: number;\n}\n\ninterface CuttingMachineProps {\n    machinery?: CuttingMachineData;\n    setMachinery: (machine: CuttingMachineData) => void;\n    onCancel: () => void;\n}\n\nconst CuttingMachineForm: React.FC<CuttingMachineProps> = ({\n                                                               machinery,\n                                                               setMachinery,\n                                                               onCancel,\n                                                           }) => {\n    const [formData, setFormData] = useState<CuttingMachineData>(\n        machinery || {\n            machineType: \"Hand Cutting\",\n            noOfMachines: 1,\n        }\n    );\n\n    const [errors, setErrors] = useState<Record<string, string>>({});\n    const machineTypes = [\"Hand Cutting\", \"Straight Knife\", \"Band Knife\",\"Automatic Cutting\"];\n\n    const validate = () => {\n        const newErrors: Record<string, string> = {};\n        if (!formData.machineType) newErrors.machineType = \"Required\";\n        if (!formData.noOfMachines || formData.noOfMachines <= 0) {\n            newErrors.noOfMachines = \"Machines must be positive\";\n        }\n        setErrors(newErrors);\n        return Object.keys(newErrors).length === 0;\n    };\n\n    const handleChange =<K extends keyof CuttingMachineData> (field: K, value: CuttingMachineData[K]) => {\n        setFormData({ ...formData, [field]: value });\n        if (errors[field]) {\n            setErrors((prev) => ({ ...prev, [field]: \"\" }));\n        }\n    };\n\n    const handleSubmit = () => {\n        if (validate()) {\n            setMachinery(formData);\n            setFormData({\n                machineType: \"Hand Cutting\",\n                noOfMachines: 1,\n            });\n            onCancel();\n        }\n    };\n\n    return (\n        <div className=\"bg-white border border-gray-200 rounded-lg p-6 space-y-6\">\n            <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-xl font-semibold text-gray-800\">\n                    Add Cutting Machine\n                </h3>\n                <button\n                    type=\"button\"\n                    onClick={onCancel}\n                    className=\"text-gray-600 hover:text-gray-800 p-2 rounded-full hover:bg-gray-100 transition-colors\"\n                    title=\"Cancel\"\n                >\n                    <svg\n                        className=\"w-5 h-5\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        viewBox=\"0 0 24 24\"\n                    >\n                        <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={2}\n                            d=\"M6 18L18 6M6 6l12 12\"\n                        />\n                    </svg>\n                </button>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {/* Machine Type */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Machine Type <span className=\"text-red-500\">*</span>\n                    </label>\n                    <select\n                        value={formData.machineType}\n                        onChange={(e) =>\n                            handleChange(\n                                \"machineType\",\n                                e.target.value as CuttingMachineData[\"machineType\"]\n                            )\n                        }\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    >\n                        {machineTypes.map((type) => (\n                            <option key={type} value={type}>\n                                {type}\n                            </option>\n                        ))}\n                    </select>\n                    {errors.machineType && (\n                        <p className=\"text-sm text-red-500\">{errors.machineType}</p>\n                    )}\n                </div>\n\n                {/* Number of Machines */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Number of Machines <span className=\"text-red-500\">*</span>\n                    </label>\n                    <input\n                        type=\"number\"\n                        min=\"1\"\n                        value={formData.noOfMachines}\n                        onChange={(e) =>\n                            handleChange(\"noOfMachines\", Number(e.target.value))\n                        }\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    />\n                    {errors.noOfMachines && (\n                        <p className=\"text-sm text-red-500\">{errors.noOfMachines}</p>\n                    )}\n                </div>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex justify-end gap-3 pt-6 border-t border-gray-200\">\n                <button\n                    type=\"button\"\n                    onClick={onCancel}\n                    className=\"px-6 py-3 border border-gray-300 rounded-lg hover:bg-gray-50 font-medium transition-colors\"\n                >\n                    Cancel\n                </button>\n                <button\n                    type=\"button\"\n                    onClick={handleSubmit}\n                    className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium transition-colors\"\n                >\n                    Add Machine\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default CuttingMachineForm;\n","import React, { useState } from \"react\";\n\ninterface ComputerizedEmbroideryData {\n    machineType: \"Chenley\" | \"With Sequence\" | \"Without Sequence\" | \"Tufft\" | \"Schiffli M/c\";\n    noOfHeads: number;\n    machineBrand: string;\n    model?: string;\n    noOfMachines: number;\n}\n\ninterface ComputerizedEmbroideryProps {\n    machinery?: ComputerizedEmbroideryData;\n    setMachinery: (machine: ComputerizedEmbroideryData) => void;\n    onCancel: () => void;\n}\n\nconst ComputerizedEmbroidery: React.FC<ComputerizedEmbroideryProps> = ({\n                                                                           machinery,\n                                                                           setMachinery,\n                                                                           onCancel,\n                                                                       }) => {\n    const [formData, setFormData] = useState<ComputerizedEmbroideryData>(\n        machinery || {\n            machineType: \"Chenley\",\n            noOfHeads: 1,\n            machineBrand: \"\",\n            model: \"\",\n            noOfMachines: 1,\n        }\n    );\n\n    const [errors, setErrors] = useState<Record<string, string>>({});\n\n    const machineTypes = [\"Chenley\", \"With Sequence\", \"Without Sequence\", \"Tufft\", \"Schiffli M/c\"];\n\n    const validate = () => {\n        const newErrors: Record<string, string> = {};\n\n        if (!formData.machineType) newErrors.machineType = \"Required\";\n        if (!formData.noOfHeads || formData.noOfHeads <= 0) newErrors.noOfHeads = \"Heads must be positive\";\n        if (!formData.machineBrand.trim()) newErrors.machineBrand = \"Brand is required\";\n        if (!formData.noOfMachines || formData.noOfMachines <= 0) newErrors.noOfMachines = \"Machines must be positive\";\n\n        setErrors(newErrors);\n        return Object.keys(newErrors).length === 0;\n    };\n\n    const handleChange =<K extends keyof ComputerizedEmbroideryData> (field: K, value: ComputerizedEmbroideryData[K]) => {\n        setFormData({ ...formData, [field]: value });\n        if (errors[field]) {\n            setErrors((prev) => ({ ...prev, [field]: \"\" }));\n        }\n    };\n\n    const handleSubmit = () => {\n        if (validate()) {\n            setMachinery(formData);\n            setFormData({\n                machineType: \"Chenley\",\n                noOfHeads: 1,\n                machineBrand: \"\",\n                model: \"\",\n                noOfMachines: 1,\n            });\n            onCancel();\n        }\n    };\n\n    return (\n        <div className=\"bg-white border border-gray-200 rounded-lg p-6 space-y-6\">\n            <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-xl font-semibold text-gray-800\">Add Computerized Embroidery Machine</h3>\n                <button\n                    type=\"button\"\n                    onClick={onCancel}\n                    className=\"text-gray-600 hover:text-gray-800 p-2 rounded-full hover:bg-gray-100 transition-colors\"\n                    title=\"Cancel\"\n                >\n                    <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                    </svg>\n                </button>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {/* Machine Type */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Machine Type <span className=\"text-red-500\">*</span>\n                    </label>\n                    <select\n                        value={formData.machineType}\n                        onChange={(e) =>\n                            handleChange(\"machineType\", e.target.value as ComputerizedEmbroideryData[\"machineType\"])\n                        }\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    >\n                        {machineTypes.map((type) => (\n                            <option key={type} value={type}>\n                                {type}\n                            </option>\n                        ))}\n                    </select>\n                    {errors.machineType && <p className=\"text-sm text-red-500\">{errors.machineType}</p>}\n                </div>\n\n                {/* No of Heads */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Number of Heads <span className=\"text-red-500\">*</span>\n                    </label>\n                    <input\n                        type=\"number\"\n                        min=\"1\"\n                        value={formData.noOfHeads}\n                        onChange={(e) => handleChange(\"noOfHeads\", Number(e.target.value))}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    />\n                    {errors.noOfHeads && <p className=\"text-sm text-red-500\">{errors.noOfHeads}</p>}\n                </div>\n\n                {/* Machine Brand */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Machine Brand <span className=\"text-red-500\">*</span>\n                    </label>\n                    <input\n                        type=\"text\"\n                        value={formData.machineBrand}\n                        onChange={(e) => handleChange(\"machineBrand\", e.target.value)}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    />\n                    {errors.machineBrand && <p className=\"text-sm text-red-500\">{errors.machineBrand}</p>}\n                </div>\n\n                {/* Model (Optional) */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">Model (Optional)</label>\n                    <input\n                        type=\"text\"\n                        value={formData.model || \"\"}\n                        onChange={(e) => handleChange(\"model\", e.target.value)}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    />\n                </div>\n\n                {/* No of Machines */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Number of Machines <span className=\"text-red-500\">*</span>\n                    </label>\n                    <input\n                        type=\"number\"\n                        min=\"1\"\n                        value={formData.noOfMachines}\n                        onChange={(e) => handleChange(\"noOfMachines\", Number(e.target.value))}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    />\n                    {errors.noOfMachines && <p className=\"text-sm text-red-500\">{errors.noOfMachines}</p>}\n                </div>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex justify-end gap-3 pt-6 border-t border-gray-200\">\n                <button\n                    type=\"button\"\n                    onClick={onCancel}\n                    className=\"px-6 py-3 border border-gray-300 rounded-lg hover:bg-gray-50 font-medium transition-colors\"\n                >\n                    Cancel\n                </button>\n                <button\n                    type=\"button\"\n                    onClick={handleSubmit}\n                    className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium transition-colors\"\n                >\n                    Add Machine\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default ComputerizedEmbroidery;\n","import React, { useState } from \"react\";\n\ninterface ManualEmbeddingMachineData {\n    machineType: \"Chenley\" | \"With Sequence\" | \"Without Sequence\" | \"Tufft\" | \"Schiffli M/c\";\n    noOfHeads: number;\n    machineBrand: string;\n    model?: string;\n    noOfMachines: number;\n}\n\ninterface ManualEmbeddingMachineProps {\n    machinery?: ManualEmbeddingMachineData;\n    setMachinery: (machine: ManualEmbeddingMachineData) => void;\n    onCancel: () => void;\n}\n\nconst ManualEmbeddingMachine: React.FC<ManualEmbeddingMachineProps> = ({\n                                                                           machinery,\n                                                                           setMachinery,\n                                                                           onCancel,\n                                                                       }) => {\n    const [formData, setFormData] = useState<ManualEmbeddingMachineData>(\n        machinery || {\n            machineType: \"Chenley\",\n            noOfHeads: 1,\n            machineBrand: \"\",\n            model: \"\",\n            noOfMachines: 1,\n        }\n    );\n\n    const [errors, setErrors] = useState<Record<string, string>>({});\n    const machineTypes = [\"Chenley\", \"With Sequence\", \"Without Sequence\", \"Tufft\", \"Schiffli M/c\"];\n\n    const validate = () => {\n        const newErrors: Record<string, string> = {};\n\n        if (!formData.machineType) newErrors.machineType = \"Required\";\n        if (!formData.noOfHeads || formData.noOfHeads <= 0)\n            newErrors.noOfHeads = \"Heads must be positive\";\n        if (!formData.machineBrand) newErrors.machineBrand = \"Required\";\n        if (!formData.noOfMachines || formData.noOfMachines <= 0)\n            newErrors.noOfMachines = \"Machines must be positive\";\n\n        setErrors(newErrors);\n        return Object.keys(newErrors).length === 0;\n    };\n\n    const handleChange = <K extends keyof ManualEmbeddingMachineData>(field: K, value: ManualEmbeddingMachineData[K]) => {\n        setFormData({ ...formData, [field]: value });\n        if (errors[field]) {\n            setErrors((prev) => ({ ...prev, [field]: \"\" }));\n        }\n    };\n\n    const handleSubmit = () => {\n        if (validate()) {\n            setMachinery(formData);\n            setFormData({\n                machineType: \"Chenley\",\n                noOfHeads: 1,\n                machineBrand: \"\",\n                model: \"\",\n                noOfMachines: 1,\n            });\n            onCancel();\n        }\n    };\n\n    return (\n        <div className=\"bg-white border border-gray-200 rounded-lg p-6 space-y-6\">\n            <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-xl font-semibold text-gray-800\">Add Manual Embedding Machine</h3>\n                <button\n                    type=\"button\"\n                    onClick={onCancel}\n                    className=\"text-gray-600 hover:text-gray-800 p-2 rounded-full hover:bg-gray-100 transition-colors\"\n                    title=\"Cancel\"\n                >\n                    <svg\n                        className=\"w-5 h-5\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        viewBox=\"0 0 24 24\"\n                    >\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                    </svg>\n                </button>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {/* Machine Type */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Machine Type <span className=\"text-red-500\">*</span>\n                    </label>\n                    <select\n                        value={formData.machineType}\n                        onChange={(e) => handleChange(\"machineType\", e.target.value as ManualEmbeddingMachineData[\"machineType\"])}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    >\n                        {machineTypes.map((type) => (\n                            <option key={type} value={type}>\n                                {type}\n                            </option>\n                        ))}\n                    </select>\n                    {errors.machineType && <p className=\"text-sm text-red-500\">{errors.machineType}</p>}\n                </div>\n\n                {/* No of Heads */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Number of Heads <span className=\"text-red-500\">*</span>\n                    </label>\n                    <input\n                        type=\"number\"\n                        min=\"1\"\n                        value={formData.noOfHeads}\n                        onChange={(e) => handleChange(\"noOfHeads\", Number(e.target.value))}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    />\n                    {errors.noOfHeads && <p className=\"text-sm text-red-500\">{errors.noOfHeads}</p>}\n                </div>\n\n                {/* Machine Brand */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Machine Brand <span className=\"text-red-500\">*</span>\n                    </label>\n                    <input\n                        type=\"text\"\n                        value={formData.machineBrand}\n                        onChange={(e) => handleChange(\"machineBrand\", e.target.value)}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    />\n                    {errors.machineBrand && <p className=\"text-sm text-red-500\">{errors.machineBrand}</p>}\n                </div>\n\n                {/* Model (Optional) */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">Model (Optional)</label>\n                    <input\n                        type=\"text\"\n                        value={formData.model || \"\"}\n                        onChange={(e) => handleChange(\"model\", e.target.value)}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    />\n                </div>\n\n                {/* No of Machines */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Number of Machines <span className=\"text-red-500\">*</span>\n                    </label>\n                    <input\n                        type=\"number\"\n                        min=\"1\"\n                        value={formData.noOfMachines}\n                        onChange={(e) => handleChange(\"noOfMachines\", Number(e.target.value))}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    />\n                    {errors.noOfMachines && <p className=\"text-sm text-red-500\">{errors.noOfMachines}</p>}\n                </div>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex justify-end gap-3 pt-6 border-t border-gray-200\">\n                <button\n                    type=\"button\"\n                    onClick={onCancel}\n                    className=\"px-6 py-3 border border-gray-300 rounded-lg hover:bg-gray-50 font-medium transition-colors\"\n                >\n                    Cancel\n                </button>\n                <button\n                    type=\"button\"\n                    onClick={handleSubmit}\n                    className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium transition-colors\"\n                >\n                    Add Machine\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default ManualEmbeddingMachine;\n","import React, { useState } from \"react\";\n\ninterface FusingMachineData {\n    machineType: \"Roller\" | \"Curing Machine\" | \"Single Flat bed\" | \"Double Flat Bed\" | \"Four Side Flat Bed\";\n    bedSizeLength?: number;\n    bedSizeBreath?: number;\n    noOfMachines?: number;\n}\n\ninterface FusingMachineProps {\n    machinery?: FusingMachineData;\n    setMachinery: (machine: FusingMachineData) => void;\n    onCancel: () => void;\n}\n\nconst FusingMachine: React.FC<FusingMachineProps> = ({\n                                                         machinery,\n                                                         setMachinery,\n                                                         onCancel,\n                                                     }) => {\n    const [formData, setFormData] = useState<FusingMachineData>(\n        machinery || {\n            machineType: \"Roller\",\n            bedSizeLength: undefined,\n            bedSizeBreath: undefined,\n            noOfMachines: undefined,\n        }\n    );\n\n    const [errors, setErrors] = useState<Record<string, string>>({});\n    const machineTypes = [\n        \"Roller\",\n        \"Curing Machine\",\n        \"Single Flat bed\",\n        \"Double Flat Bed\",\n        \"Four Side Flat Bed\",\n    ];\n\n    const validate = () => {\n        const newErrors: Record<string, string> = {};\n\n        if (!formData.machineType) newErrors.machineType = \"Required\";\n\n        if (formData.bedSizeLength !== undefined && formData.bedSizeLength <= 0) {\n            newErrors.bedSizeLength = \"Must be positive\";\n        }\n\n        if (formData.bedSizeBreath !== undefined && formData.bedSizeBreath <= 0) {\n            newErrors.bedSizeBreath = \"Must be positive\";\n        }\n\n        if (formData.noOfMachines !== undefined && formData.noOfMachines <= 0) {\n            newErrors.noOfMachines = \"Must be positive\";\n        }\n\n        setErrors(newErrors);\n        return Object.keys(newErrors).length === 0;\n    };\n\n    const handleChange = <K extends keyof FusingMachineData>(field: K, value: FusingMachineData[K]) => {\n        setFormData({ ...formData, [field]: value });\n        if (errors[field]) {\n            setErrors((prev) => ({ ...prev, [field]: \"\" }));\n        }\n    };\n\n    const handleSubmit = () => {\n        if (validate()) {\n            setMachinery(formData);\n            setFormData({\n                machineType: \"Roller\",\n                bedSizeLength: undefined,\n                bedSizeBreath: undefined,\n                noOfMachines: undefined,\n            });\n            onCancel();\n        }\n    };\n\n    return (\n        <div className=\"bg-white border border-gray-200 rounded-lg p-6 space-y-6\">\n            <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-xl font-semibold text-gray-800\">\n                    Add Fusing Machine\n                </h3>\n                <button\n                    type=\"button\"\n                    onClick={onCancel}\n                    className=\"text-gray-600 hover:text-gray-800 p-2 rounded-full hover:bg-gray-100 transition-colors\"\n                    title=\"Cancel\"\n                >\n                    <svg\n                        className=\"w-5 h-5\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        viewBox=\"0 0 24 24\"\n                    >\n                        <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={2}\n                            d=\"M6 18L18 6M6 6l12 12\"\n                        />\n                    </svg>\n                </button>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {/* Machine Type */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Machine Type <span className=\"text-red-500\">*</span>\n                    </label>\n                    <select\n                        value={formData.machineType}\n                        onChange={(e) =>\n                            handleChange(\"machineType\", e.target.value as FusingMachineData[\"machineType\"])\n                        }\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    >\n                        {machineTypes.map((type) => (\n                            <option key={type} value={type}>\n                                {type}\n                            </option>\n                        ))}\n                    </select>\n                    {errors.machineType && (\n                        <p className=\"text-sm text-red-500\">{errors.machineType}</p>\n                    )}\n                </div>\n\n                {/* Bed Size Length */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Bed Size Length (cm)\n                    </label>\n                    <input\n                        type=\"number\"\n                        min=\"1\"\n                        value={formData.bedSizeLength ?? \"\"}\n                        onChange={(e) => handleChange(\"bedSizeLength\", e.target.value ? Number(e.target.value) : undefined)}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    />\n                    {errors.bedSizeLength && (\n                        <p className=\"text-sm text-red-500\">{errors.bedSizeLength}</p>\n                    )}\n                </div>\n\n                {/* Bed Size Breath */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Bed Size Breath (cm)\n                    </label>\n                    <input\n                        type=\"number\"\n                        min=\"1\"\n                        value={formData.bedSizeBreath ?? \"\"}\n                        onChange={(e) => handleChange(\"bedSizeBreath\", e.target.value ? Number(e.target.value) : undefined)}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    />\n                    {errors.bedSizeBreath && (\n                        <p className=\"text-sm text-red-500\">{errors.bedSizeBreath}</p>\n                    )}\n                </div>\n\n                {/* No of Machines */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Number of Machines\n                    </label>\n                    <input\n                        type=\"number\"\n                        min=\"1\"\n                        value={formData.noOfMachines ?? \"\"}\n                        onChange={(e) => handleChange(\"noOfMachines\", e.target.value ? Number(e.target.value) : undefined)}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    />\n                    {errors.noOfMachines && (\n                        <p className=\"text-sm text-red-500\">{errors.noOfMachines}</p>\n                    )}\n                </div>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex justify-end gap-3 pt-6 border-t border-gray-200\">\n                <button\n                    type=\"button\"\n                    onClick={onCancel}\n                    className=\"px-6 py-3 border border-gray-300 rounded-lg hover:bg-gray-50 font-medium transition-colors\"\n                >\n                    Cancel\n                </button>\n                <button\n                    type=\"button\"\n                    onClick={handleSubmit}\n                    className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium transition-colors\"\n                >\n                    Add Machine\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default FusingMachine;\n","import React, { useState } from \"react\";\n\ninterface PrintingMachineData {\n    PrintingMachineType:\n        | \"Wooden Table\"\n        | \"Manual M/c\"\n        | \"Automatic M/c\"\n        | \"Glass Table\"\n        | \"Rotary M/c\"\n        | \"Sublimation Print\"\n        | \"Heat Transfers\"\n        | \"Emboss Print\"\n        | \"Digital Sticker Print (DTF)\"\n        | \"Digital Print (DTG)\"\n        | \"Burnout\";\n    PalletSize: number;\n}\n\ninterface PrintingMachineProps {\n    machinery?: PrintingMachineData;\n    setMachinery: (machine: PrintingMachineData) => void;\n    onCancel: () => void;\n}\n\nconst PrintingMachine: React.FC<PrintingMachineProps> = ({\n                                                             machinery,\n                                                             setMachinery,\n                                                             onCancel,\n                                                         }) => {\n    const [formData, setFormData] = useState<PrintingMachineData>(\n        machinery || {\n            PrintingMachineType: \"Wooden Table\",\n            PalletSize: 1,\n        }\n    );\n\n    const [errors, setErrors] = useState<Record<string, string>>({});\n\n    const machineTypes: PrintingMachineData[\"PrintingMachineType\"][] = [\n        \"Wooden Table\",\n        \"Manual M/c\",\n        \"Automatic M/c\",\n        \"Glass Table\",\n        \"Rotary M/c\",\n        \"Sublimation Print\",\n        \"Heat Transfers\",\n        \"Emboss Print\",\n        \"Digital Sticker Print (DTF)\",\n        \"Digital Print (DTG)\",\n        \"Burnout\",\n    ];\n\n    const validate = () => {\n        const newErrors: Record<string, string> = {};\n        if (!formData.PrintingMachineType)\n            newErrors.PrintingMachineType = \"Required\";\n        if (!formData.PalletSize || formData.PalletSize <= 0)\n            newErrors.PalletSize = \"Pallet size must be positive\";\n\n        setErrors(newErrors);\n        return Object.keys(newErrors).length === 0;\n    };\n\n    const handleChange =<K extends keyof PrintingMachineData> (field: K, value: PrintingMachineData[K]) => {\n        setFormData({ ...formData, [field]: value });\n        if (errors[field]) {\n            setErrors((prev) => ({ ...prev, [field]: \"\" }));\n        }\n    };\n\n    const handleSubmit = () => {\n        if (validate()) {\n            setMachinery(formData);\n            setFormData({\n                PrintingMachineType: \"Wooden Table\",\n                PalletSize: 1,\n            });\n            onCancel();\n        }\n    };\n\n    return (\n        <div className=\"bg-white border border-gray-200 rounded-lg p-6 space-y-6\">\n            <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-xl font-semibold text-gray-800\">\n                    Add Printing Machine\n                </h3>\n                <button\n                    type=\"button\"\n                    onClick={onCancel}\n                    className=\"text-gray-600 hover:text-gray-800 p-2 rounded-full hover:bg-gray-100 transition-colors\"\n                    title=\"Cancel\"\n                >\n                    <svg\n                        className=\"w-5 h-5\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        viewBox=\"0 0 24 24\"\n                    >\n                        <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={2}\n                            d=\"M6 18L18 6M6 6l12 12\"\n                        />\n                    </svg>\n                </button>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {/* Machine Type */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Machine Type <span className=\"text-red-500\">*</span>\n                    </label>\n                    <select\n                        value={formData.PrintingMachineType}\n                        onChange={(e) =>\n                            handleChange(\n                                \"PrintingMachineType\",\n                                e.target.value as PrintingMachineData[\"PrintingMachineType\"]\n                            )\n                        }\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    >\n                        {machineTypes.map((type) => (\n                            <option key={type} value={type}>\n                                {type}\n                            </option>\n                        ))}\n                    </select>\n                    {errors.PrintingMachineType && (\n                        <p className=\"text-sm text-red-500\">{errors.PrintingMachineType}</p>\n                    )}\n                </div>\n\n                {/* Pallet Size */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Pallet Size <span className=\"text-red-500\">*</span>\n                    </label>\n                    <input\n                        type=\"number\"\n                        min=\"1\"\n                        value={formData.PalletSize}\n                        onChange={(e) => handleChange(\"PalletSize\", Number(e.target.value))}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    />\n                    {errors.PalletSize && (\n                        <p className=\"text-sm text-red-500\">{errors.PalletSize}</p>\n                    )}\n                </div>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex justify-end gap-3 pt-6 border-t border-gray-200\">\n                <button\n                    type=\"button\"\n                    onClick={onCancel}\n                    className=\"px-6 py-3 border border-gray-300 rounded-lg hover:bg-gray-50 font-medium transition-colors\"\n                >\n                    Cancel\n                </button>\n                <button\n                    type=\"button\"\n                    onClick={handleSubmit}\n                    className=\"px-6 py-3  bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium transition-colors\"\n                >\n                    Add Machine\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default PrintingMachine;\n","import React, { useState } from \"react\";\n\ninterface StitchingMachineData {\n    machineType:\n        | \"Single Needle (singer)\"\n        | \"Double Needle\"\n        | \"Overlock\"\n        | \"Flatlock\"\n        | \"Feed of the arm\"\n        | \"Edge Cutter\"\n        | \"Chain Stitch\"\n        | \"Others\";\n    noOfMachines?: number;\n}\n\ninterface StitchingMachineProps {\n    machinery?: StitchingMachineData;\n    setMachinery: (machine: StitchingMachineData) => void;\n    onCancel: () => void;\n}\n\nconst StitchingMachine: React.FC<StitchingMachineProps> = ({\n                                                               machinery,\n                                                               setMachinery,\n                                                               onCancel,\n                                                           }) => {\n    const [formData, setFormData] = useState<StitchingMachineData>(\n        machinery || {\n            machineType: \"Single Needle (singer)\",\n            noOfMachines: 1,\n        }\n    );\n\n    const [errors, setErrors] = useState<Record<string, string>>({});\n\n    const machineTypes: StitchingMachineData[\"machineType\"][] = [\n        \"Single Needle (singer)\",\n        \"Double Needle\",\n        \"Overlock\",\n        \"Flatlock\",\n        \"Feed of the arm\",\n        \"Edge Cutter\",\n        \"Chain Stitch\",\n        \"Others\",\n    ];\n\n    const validate = () => {\n        const newErrors: Record<string, string> = {};\n        if (!formData.machineType) newErrors.machineType = \"Required\";\n        if (formData.noOfMachines !== undefined && formData.noOfMachines <= 0) {\n            newErrors.noOfMachines = \"Machines must be positive\";\n        }\n        setErrors(newErrors);\n        return Object.keys(newErrors).length === 0;\n    };\n\n    const handleChange = <K extends keyof StitchingMachineData> (field: K, value: StitchingMachineData[K]) => {\n        setFormData({ ...formData, [field]: value });\n        if (errors[field]) {\n            setErrors((prev) => ({ ...prev, [field]: \"\" }));\n        }\n    };\n\n    const handleSubmit = () => {\n        if (validate()) {\n            setMachinery(formData);\n            setFormData({\n                machineType: \"Single Needle (singer)\",\n                noOfMachines: 1,\n            });\n            onCancel();\n        }\n    };\n\n    return (\n        <div className=\"bg-white border border-gray-200 rounded-lg p-6 space-y-6\">\n            <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-xl font-semibold text-gray-800\">\n                    Add Stitching Machine\n                </h3>\n                <button\n                    type=\"button\"\n                    onClick={onCancel}\n                    className=\"text-gray-600 hover:text-gray-800 p-2 rounded-full hover:bg-gray-100 transition-colors\"\n                    title=\"Cancel\"\n                >\n                    <svg\n                        className=\"w-5 h-5\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        viewBox=\"0 0 24 24\"\n                    >\n                        <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={2}\n                            d=\"M6 18L18 6M6 6l12 12\"\n                        />\n                    </svg>\n                </button>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {/* Machine Type */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Machine Type <span className=\"text-red-500\">*</span>\n                    </label>\n                    <select\n                        value={formData.machineType}\n                        onChange={(e) =>\n                            handleChange(\n                                \"machineType\",\n                                e.target.value as StitchingMachineData[\"machineType\"]\n                            )\n                        }\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    >\n                        {machineTypes.map((type) => (\n                            <option key={type} value={type}>\n                                {type}\n                            </option>\n                        ))}\n                    </select>\n                    {errors.machineType && (\n                        <p className=\"text-sm text-red-500\">{errors.machineType}</p>\n                    )}\n                </div>\n\n                {/* No of Machines */}\n                <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-semibold text-gray-700\">\n                        Number of Machines\n                    </label>\n                    <input\n                        type=\"number\"\n                        min=\"1\"\n                        value={formData.noOfMachines || \"\"}\n                        onChange={(e) =>\n                            handleChange(\"noOfMachines\", Number(e.target.value))\n                        }\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                    />\n                    {errors.noOfMachines && (\n                        <p className=\"text-sm text-red-500\">{errors.noOfMachines}</p>\n                    )}\n                </div>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex justify-end gap-3 pt-6 border-t border-gray-200\">\n                <button\n                    type=\"button\"\n                    onClick={onCancel}\n                    className=\"px-6 py-3 border border-gray-300 rounded-lg hover:bg-gray-50 font-medium transition-colors\"\n                >\n                    Cancel\n                </button>\n                <button\n                    type=\"button\"\n                    onClick={handleSubmit}\n                    className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium transition-colors\"\n                >\n                    Add Machine\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default StitchingMachine;\n","import React from \"react\";\n\n// Define a loose shape for the props instead of using `any`\ninterface CheckingMachineData {\n    // Add real fields later when the form is developed\n    [key: string]: unknown;\n}\n\ninterface CheckingMachineProps {\n    machinery?: CheckingMachineData;\n    setMachinery: (machine: CheckingMachineData) => void;\n    onCancel: () => void;\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst CheckingMachine: React.FC<CheckingMachineProps> = ({machinery, setMachinery, onCancel}) => {\n    return (\n\n        <div className=\"bg-white border border-gray-200 rounded-lg p-6 space-y-6 text-center\">\n            <h3 className=\"text-xl font-semibold text-gray-800\">\n                Checking Machine Setup\n            </h3>\n            <p className=\"text-gray-600\">\n                The <span className=\"font-medium\">Checking Machine</span> form is still\n                under development. You can skip this step for now and continue with\n                other configurations.\n            </p>\n        </div>\n    );\n};\n\nexport default CheckingMachine;\n","import React from \"react\";\n\ninterface IronPackingMachineData {\n    // Add real fields later when the form is developed\n    [key: string]: unknown;\n}\ninterface IronPackingMachineProps {\n    machinery?: IronPackingMachineData; // optional because schema is empty\n    setMachinery: (machine: IronPackingMachineData) => void;\n    onCancel: () => void;\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst IronPackingMachine: React.FC<IronPackingMachineProps> = ({machinery, setMachinery, onCancel}) => {\n    return (\n        <div className=\"bg-white border border-gray-200 rounded-lg p-6 space-y-6 text-center\">\n            <h3 className=\"text-xl font-semibold text-gray-800\">\n                Checking Machine Setup\n            </h3>\n            <p className=\"text-gray-600\">\n                The <span className=\"font-medium\">Iron & Packing</span> form is still\n                under development. You can skip this step for now and continue with\n                other configurations.\n            </p>\n        </div>\n    );\n};\n\nexport default IronPackingMachine;\n","import React from \"react\";\n\ninterface KajaButtonMachineData{\n    [ket:string]: unknown;\n}\ninterface KajaButtonMachineProps {\n    machinery?: KajaButtonMachineData; // optional because schema is empty\n    setMachinery: (machine: KajaButtonMachineData) => void;\n    onCancel: () => void;\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst KajaButtonMachine: React.FC<KajaButtonMachineProps> = ({machinery, setMachinery, onCancel,}) => {\n    return (\n        <div className=\"bg-white border border-gray-200 rounded-lg p-6 space-y-6 text-center\">\n            <h3 className=\"text-xl font-semibold text-gray-800\">\n                Checking Machine Setup\n            </h3>\n            <p className=\"text-gray-600\">\n                The <span className=\"font-medium\">Iron & Packing</span> form is still\n                under development. You can skip this step for now and continue with\n                other configurations.\n            </p>\n        </div>\n    );\n};\n\nexport default KajaButtonMachine;\n","import React from \"react\";\n\ninterface MultiNeedleDoubleChainData {\n    [key: string]: unknown;\n}\ninterface MultiNeedleDoubleChainProps {\n    machinery?: MultiNeedleDoubleChainData; // optional because schema is empty\n    setMachinery: (machine: MultiNeedleDoubleChainData) => void;\n    onCancel: () => void;\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst MultiNeedleDoubleChainMachine: React.FC<MultiNeedleDoubleChainProps> = ({machinery, setMachinery, onCancel,\n                                                           }) => {\n    return (\n        <div className=\"bg-white border border-gray-200 rounded-lg p-6 space-y-6 text-center\">\n            <h3 className=\"text-xl font-semibold text-gray-800\">\n                Checking Machine Setup\n            </h3>\n            <p className=\"text-gray-600\">\n                The <span className=\"font-medium\">Multi needle /Doublechain</span> form is still\n                under development. You can skip this step for now and continue with\n                other configurations.\n            </p>\n        </div>\n    );\n};\n\nexport default MultiNeedleDoubleChainMachine;\n","import React from \"react\";\ninterface OilRemovingMendingCenterData {\n    [key: string]: unknown;\n}\ninterface OilRemovingMendingCenterProps {\n    machinery?: OilRemovingMendingCenterData; // optional because schema is empty\n    setMachinery: (machine: OilRemovingMendingCenterData) => void;\n    onCancel: () => void;\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst OilRemovingMendingCenterMachine: React.FC<OilRemovingMendingCenterProps> = ({machinery, setMachinery, onCancel,}) => {\n    return (\n        <div className=\"bg-white border border-gray-200 rounded-lg p-6 space-y-6 text-center\">\n            <h3 className=\"text-xl font-semibold text-gray-800\">\n                Checking Machine Setup\n            </h3>\n            <p className=\"text-gray-600\">\n                The <span className=\"font-medium\">Oil Removing/ Mending Center</span> form is still\n                under development. You can skip this step for now and continue with\n                other configurations.\n            </p>\n        </div>\n    );\n};\n\nexport default OilRemovingMendingCenterMachine;\n","import React from \"react\";\n\ninterface PatternMakingCenterMachineData{\n    [key: string]: unknown;\n}\ninterface PatternMakingCenterMachineProps {\n    machinery?: PatternMakingCenterMachineData; // optional because schema is empty\n    setMachinery: (machine: PatternMakingCenterMachineData) => void;\n    onCancel: () => void;\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst PatternMakingCenterMachine: React.FC<PatternMakingCenterMachineProps> = ({machinery, setMachinery, onCancel,\n                                                             }) => {\n    return (\n        <div className=\"bg-white border border-gray-200 rounded-lg p-6 space-y-6 text-center\">\n            <h3 className=\"text-xl font-semibold text-gray-800\">\n                Checking Machine Setup\n            </h3>\n            <p className=\"text-gray-600\">\n                The <span className=\"font-medium\">Iron & Packing</span> form is still\n                under development. You can skip this step for now and continue with\n                other configurations.\n            </p>\n        </div>\n    );\n};\n\nexport default PatternMakingCenterMachine;\n","import React from \"react\";\n\ninterface FilmScreenMakingCenterMachineData{\n    [key: string]: unknown;\n}\ninterface FilmScreenMakingCenterMachineProps {\n    machinery?: FilmScreenMakingCenterMachineData; // optional because schema is empty\n    setMachinery: (machine: FilmScreenMakingCenterMachineData) => void;\n    onCancel: () => void;\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst FilmScreenMakingCenterMachine: React.FC<FilmScreenMakingCenterMachineProps> = ({machinery, setMachinery, onCancel,\n                                                                               }) => {\n    return (\n        <div className=\"bg-white border border-gray-200 rounded-lg p-6 space-y-6 text-center\">\n            <h3 className=\"text-xl font-semibold text-gray-800\">\n                Checking Machine Setup\n            </h3>\n            <p className=\"text-gray-600\">\n                The <span className=\"font-medium\">Iron & Packing</span> form is still\n                under development. You can skip this step for now and continue with\n                other configurations.\n            </p>\n        </div>\n    );\n};\n\nexport default FilmScreenMakingCenterMachine;\n","import KnittingMachine from \"./KnittinngMachineForm\";\nimport YarnSpinningMachine from \"./YarnSpinningMachineForm\";\nimport YarnProcessingMachine from \"./YarnProcessingMachineForm\";\nimport WeavingMachine from \"./WeavingMachineForm\";\nimport DyeingMachine from \"./DyeingMachineForm\";\nimport FabricProcessingMachine from \"./FabricProcessingMachineForm\";\nimport FabricFinishingMachine from \"./FabricFinishingMachineForm\";\nimport WashingMachine from \"./WashingMachineForm\";\nimport CuttingMachine from \"./CuttingMachineForm\";\nimport ComputerizedEmbroideryMachine from \"./ComputerizedEmbroideryMachineForm\";\nimport ManualEmbroideryMachine from \"./ManualEmbroideryMachineForm\";\nimport FusingMachine from \"./FusingMachineForm\";\nimport PrintingMachine from \"./PrintingMachineForm\";\nimport StitchingMachine from \"./StitchingMachineForm\";\nimport CheckingMachine from \"./CheckingMachineForm\";\nimport IronPackingMachine from \"./IronPackingMachineForm\";\nimport KajaButtonMachine from \"./KajaButtonMachineForm\";\nimport MultiNeedleDoubleChainMachine from \"./MultiNeedleDoubleChainMachineForm\";\nimport OilRemovingMendingCenterMachine from \"./OilRemovingMendingCenterMachineForm\";\nimport PatternMakinigCenterMachine from \"./PatternMakinigCenterMachineForm\";\nimport FilmScreenMakingCenterMachine from \"./FilmScreenMakingCenterMachineForm\";\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport const MachineryForms: Record<string, React.ComponentType<any>> = {\n\n    YARN_SPINNING: YarnSpinningMachine,\n    YARN_PROCESSING:YarnProcessingMachine,\n    WEAVING_UNIT:WeavingMachine,\n    KNITTING_UNIT: KnittingMachine,\n    DYEING_UNIT:DyeingMachine,\n    FABRIC_PROCESSING_UNIT:FabricProcessingMachine,\n    FABRIC_FINISHING_UNIT:FabricFinishingMachine,\n    WASHING_UNIT:WashingMachine,\n    CUTTING_UNIT:CuttingMachine,\n    COMPUTERIZED_EMBROIDERY_UNIT:ComputerizedEmbroideryMachine,\n    MANUAL_EMBROIDERY_UNIT:ManualEmbroideryMachine,\n    FUSING_UNIT:FusingMachine,\n    PRINTING_UNIT:PrintingMachine,\n    STITCHING_UNIT:StitchingMachine,\n    CHECKING_UNIT:CheckingMachine,\n    IRONING_PACKING_UNIT:IronPackingMachine,\n    KAJA_BUTTON_UNIT:KajaButtonMachine,\n    MULTI_NEEDLE_DOUBLE_CHAIN_UNIT:MultiNeedleDoubleChainMachine,\n    OIL_REMOVING_MENDING_CENTER:OilRemovingMendingCenterMachine,\n    PATTERN_MAKING_CENTER:PatternMakinigCenterMachine,\n    FILM_SCREEN_MAKING_CENTER:FilmScreenMakingCenterMachine\n};\n","\"use client\";\n\nimport React, {useEffect, useState} from \"react\";\n\nimport {MachineryForms} from \"@/components/Forms\";\nexport type MachineData = string | number | boolean | MachineData[] | { [key: string]: MachineData };\ntype Props = {\n    form: {\n        unitType: string;\n        machinery: MachineData[];\n    };\n    setForm: (updates: Partial<{ machinery: MachineData[] }>) => void;\n    onNext: () => void;\n    onBack: () => void;\n};\n\n// Simple machine preview component\nconst MachinePreview = ({ machine, index, onDelete }: {\n    machine: MachineData;\n    index: number;\n    onDelete: (index: number) => void;\n}) => {\n    // Get random subset of fields to display\n    const getDisplayFields = () => {\n        if (typeof machine === \"object\" && machine !== null && !Array.isArray(machine)) {\n            const entries = Object.entries(machine);\n            const displayItems: string[] = [];\n\n            // Take up to 3-4 fields for display\n            entries.slice(0, 4).forEach(([key, value]) => {\n                // Format the key nicely\n                const formattedKey = key\n                    .replace(/([A-Z])/g, ' $1')\n                    .replace(/_/g, ' ')\n                    .trim()\n                    .split(' ')\n                    .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n                    .join(' ');\n\n                // Format the value\n                let formattedValue = String(value);\n                if (typeof value === 'object' && value !== null) {\n                    formattedValue = Array.isArray(value) ? `[${value.length} items]` : '{...}';\n                }\n\n                // Add to display items\n                if (formattedValue && formattedValue !== 'null' && formattedValue !== 'undefined') {\n                    displayItems.push(`${formattedKey}: ${formattedValue}`);\n                }\n            });\n\n            return displayItems.join(' • ');\n        }\n        return `Machine ${index + 1}`;\n    };\n\n    return (\n        <div className=\"flex items-center justify-between p-3 bg-gray-50 border border-gray-200 rounded-lg hover:bg-gray-100 transition-colors\">\n            <div className=\"flex items-center gap-3 flex-1\">\n                <div className=\"w-8 h-8 bg-blue-100 rounded flex items-center justify-center flex-shrink-0\">\n                    <span className=\"text-blue-600 font-semibold text-sm\">{index + 1}</span>\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-sm font-medium text-gray-700 truncate\">\n                        {getDisplayFields()}\n                    </p>\n                </div>\n            </div>\n            <button\n                onClick={() => onDelete(index)}\n                className=\"ml-2 p-1.5 text-red-500 hover:bg-red-50 rounded transition-colors flex-shrink-0\"\n                title=\"Remove machine\"\n            >\n                <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                </svg>\n            </button>\n        </div>\n    );\n};\n\nexport default function MachineryStep({ form, setForm, onNext, onBack }: Props) {\n    const [errors, setErrors] = useState<string>(\"\");\n    const [machineCardOpen, setMachineCardOpen] = useState(false);\n\n    const onNextClicked = () => {\n        setErrors(\"\");\n        onNext();\n    };\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n\n    const handleAddMachine = (machine: any) => {\n        setForm({ machinery: [...form.machinery, machine] });\n        setMachineCardOpen(false);\n    };\n\n    const handleDeleteMachine = (index: number) => {\n        const updatedMachinery = form.machinery.filter((_, i) => i !== index);\n        setForm({ machinery: updatedMachinery });\n    };\n\n    useEffect(()=>{\n        setForm({ machinery: [] });\n    },[form.unitType,setForm])\n\n    const onCancel = () => setMachineCardOpen(false);\n\n    const MachineForm = MachineryForms[form.unitType];\n\n    return (\n        <div className=\"space-y-4\">\n            <h2 className=\"text-xl font-bold mb-4\">\n                Add {form.unitType.replace(/_/g, ' ')} Machines\n            </h2>\n\n            <button\n                onClick={() => setMachineCardOpen(true)}\n                className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n            >\n                Add Machine\n            </button>\n\n            {machineCardOpen && MachineForm && (\n                <MachineForm onCancel={onCancel} setMachinery={handleAddMachine} />\n            )}\n\n            {errors && <p className=\"text-red-500 text-sm\">{errors}</p>}\n\n            {/* Machine preview list */}\n            {form.machinery.length > 0 && (\n                <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                        <h4 className=\"font-semibold text-gray-800\">Machines Added ({form.machinery.length})</h4>\n                    </div>\n                    <div className=\"space-y-2\">\n                        {form.machinery.map((machine, i) => (\n                            <MachinePreview\n                                key={i}\n                                machine={machine}\n                                index={i}\n                                onDelete={handleDeleteMachine}\n                            />\n                        ))}\n                    </div>\n                </div>\n            )}\n\n            <div className=\"flex justify-between pt-6\">\n                <button\n                    onClick={onBack}\n                    className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n                >\n                    Back\n                </button>\n                <button\n                    onClick={onNextClicked}\n                    className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700\"\n                >\n                    Next\n                </button>\n            </div>\n        </div>\n    );\n}","\"use client\";\n\nimport React, { useState, ChangeEvent } from \"react\";\n\ntype Service = {\n    title: string;\n    description: string;\n};\n\ntype Props = {\n    form: {\n        services: Service[];\n    };\n    setForm: (updates: Partial<{ services: Service[] }>) => void;\n    onBack: () => void;\n    onSubmit: () => void;\n};\n\nexport default function ServiceStep({ form, setForm, onBack, onSubmit }: Props) {\n    const [service, setService] = useState<Service>({ title: \"\", description: \"\" });\n    const [errors, setErrors] = useState<string>(\"\");\n    const [showAddForm, setShowAddForm] = useState(false);\n\n    const handleChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        const { name, value } = e.target;\n        setService({ ...service, [name]: value });\n        if (errors) setErrors(\"\"); // Clear errors when user starts typing\n    };\n\n    const addService = () => {\n        if (!service.title?.trim()) {\n            setErrors(\"Service title is required\");\n            return;\n        }\n        setForm({ services: [...form.services, service] });\n        setService({ title: \"\", description: \"\" });\n        setErrors(\"\");\n        setShowAddForm(false);\n    };\n\n    const removeService = (indexToRemove: number) => {\n        const updatedServices = form.services.filter((_, index) => index !== indexToRemove);\n        setForm({ services: updatedServices });\n    };\n\n    const editService = (indexToEdit: number) => {\n        const serviceToEdit = form.services[indexToEdit];\n        setService(serviceToEdit);\n        removeService(indexToEdit);\n        setShowAddForm(true);\n    };\n\n    const cancelAdd = () => {\n        setService({ title: \"\", description: \"\" });\n        setErrors(\"\");\n        setShowAddForm(false);\n    };\n\n    return (\n        <div className=\"max-w-4xl p-10 rounded-lg mx-auto bg-white\">\n            {/* Header */}\n            <div className=\"mb-8\">\n                <div className=\"flex items-center justify-between mb-4\">\n                    <div>\n                        <h2 className=\"text-2xl font-bold text-gray-900\">Services Offered</h2>\n                        <p className=\"text-sm text-gray-600 mt-1\">Add the services your company provides to clients</p>\n                    </div>\n                    <div className=\"text-sm text-gray-500 bg-gray-100 px-3 py-1 rounded-full\">\n                        Step 3 / 3\n                    </div>\n                </div>\n            </div>\n\n            {/* Add Service Button */}\n            {!showAddForm && (\n                <div className=\"mb-6\">\n                    <button\n                        type=\"button\"\n                        onClick={() => setShowAddForm(true)}\n                        className=\"inline-flex items-center px-6 py-3 bg-blue-600 text-white font-medium rounded-xl hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors duration-200 shadow-sm\"\n                    >\n                        <svg className=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\n                        </svg>\n                        Add Service\n                    </button>\n                </div>\n            )}\n\n            {/* Add Service Form */}\n            {showAddForm && (\n                <div className=\"bg-white border border-gray-200 rounded-2xl p-6 mb-6 shadow-sm\">\n                    <div className=\"flex items-center justify-between mb-6\">\n                        <h3 className=\"text-lg font-semibold text-gray-900\">Add New Service</h3>\n                        <button\n                            type=\"button\"\n                            onClick={cancelAdd}\n                            className=\"text-gray-400 hover:text-gray-600 transition-colors\"\n                        >\n                            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                            </svg>\n                        </button>\n                    </div>\n\n                    <div className=\"flex flex-col gap-6\">\n                        {/* Service Title */}\n                        <div className=\"lg:col-span-1\">\n                            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                                Service Title <span className=\"text-red-500\">*</span>\n                            </label>\n                            <input\n                                type=\"text\"\n                                name=\"title\"\n                                value={service.title || \"\"}\n                                onChange={handleChange}\n                                placeholder=\"e.g., Custom Knitting, Yarn Dyeing\"\n                                className={`w-full px-4 py-3 border rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors ${\n                                    errors ? 'border-red-300 bg-red-50' : 'border-gray-300'\n                                }`}\n                            />\n                        </div>\n\n                        {/* Description */}\n                        <div className=\"lg:col-span-1\">\n                            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                                Description <span className=\"text-gray-400 text-xs\">(optional)</span>\n                            </label>\n                            <textarea\n                                name=\"description\"\n                                value={service.description || \"\"}\n                                onChange={handleChange}\n                                rows={3}\n                                placeholder=\"Brief description of the service...\"\n                                className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors resize-none\"\n                            />\n                        </div>\n                    </div>\n\n                    {/* Error Message */}\n                    {errors && (\n                        <div className=\"mt-4 p-3 bg-red-50 border border-red-200 rounded-lg\">\n                            <p className=\"text-sm text-red-600 flex items-center\">\n                                <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                                </svg>\n                                {errors}\n                            </p>\n                        </div>\n                    )}\n\n                    {/* Add Service Action Buttons */}\n                    <div className=\"flex justify-end gap-3 mt-6\">\n                        <button\n                            type=\"button\"\n                            onClick={cancelAdd}\n                            className=\"px-6 py-2.5 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors font-medium\"\n                        >\n                            Cancel\n                        </button>\n                        <button\n                            type=\"button\"\n                            onClick={addService}\n                            className=\"px-6 py-2.5 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium shadow-sm\"\n                        >\n                            Add Service\n                        </button>\n                    </div>\n                </div>\n            )}\n\n            {/* Services Added Section */}\n            <div className=\"mb-8\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n                    <svg className=\"w-5 h-5 mr-2 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                    </svg>\n                    Services Added: <span className=\"text-blue-600 ml-1\">({form.services.length})</span>\n                </h3>\n\n                {form.services.length === 0 ? (\n                    <div className=\"text-center py-12 bg-gray-50 rounded-2xl border border-dashed border-gray-300\">\n                        <svg className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10\" />\n                        </svg>\n                        <p className=\"text-gray-500 text-lg mb-2\">No services added yet</p>\n                        <p className=\"text-gray-400 text-sm\">Click  `&quot; Add Service  `&quot; to get started</p>\n                    </div>\n                ) : (\n                    <div className=\"grid gap-4\">\n                        {form.services.map((s, idx) => (\n                            <div\n                                key={idx}\n                                className=\"bg-white border border-gray-200 rounded-xl p-5 hover:shadow-md transition-shadow group\"\n                            >\n                                <div className=\"flex items-start justify-between\">\n                                    <div className=\"flex-1\">\n                                        <div className=\"flex items-center mb-2\">\n                                            <div className=\"w-2 h-2 bg-blue-500 rounded-full mr-3\"></div>\n                                            <h4 className=\"font-semibold text-gray-900 text-lg\">{s.title}</h4>\n                                        </div>\n                                        {s.description && (\n                                            <p className=\"text-gray-600 ml-5 leading-relaxed\">{s.description}</p>\n                                        )}\n                                    </div>\n                                    <div className=\"flex gap-2 opacity-0 group-hover:opacity-100 transition-opacity ml-4\">\n                                        <button\n                                            type=\"button\"\n                                            onClick={() => editService(idx)}\n                                            className=\"p-2 text-gray-400 hover:text-blue-600 hover:bg-blue-50 rounded-lg transition-colors\"\n                                            title=\"Edit service\"\n                                        >\n                                            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z\" />\n                                            </svg>\n                                        </button>\n                                        <button\n                                            type=\"button\"\n                                            onClick={() => removeService(idx)}\n                                            className=\"p-2 text-gray-400 hover:text-red-600 hover:bg-red-50 rounded-lg transition-colors\"\n                                            title=\"Remove service\"\n                                        >\n                                            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n                                            </svg>\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                )}\n            </div>\n\n            {/* Navigation Buttons */}\n            <div className=\"flex justify-between pt-6 border-t border-gray-200\">\n                <button\n                    type=\"button\"\n                    onClick={onBack}\n                    className=\"inline-flex items-center px-6 py-3 text-gray-700 bg-white border border-gray-300 rounded-xl hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition-colors font-medium\"\n                >\n                    <svg className=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n                    </svg>\n                    Back\n                </button>\n\n                <button\n                    type=\"button\"\n                    onClick={onSubmit}\n                    disabled={form.services.length === 0}\n                    className={`inline-flex items-center px-8 py-3 text-white font-medium rounded-xl focus:outline-none focus:ring-2 focus:ring-offset-2 transition-colors shadow-sm ${\n                        form.services.length === 0\n                            ? 'bg-gray-400 cursor-not-allowed'\n                            : 'bg-green-600 hover:bg-green-700 focus:ring-green-500'\n                    }`}\n                >\n                    <svg className=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                    </svg>\n                    Submit Application\n                </button>\n            </div>\n        </div>\n    );\n}"],"names":[],"mappings":"qFAGA,EAAA,EAAA,CAAA,CAAA,OCQA,EAAA,EAAA,CAAA,CAAA,OAgBA,IAAM,EAAO,MAAM,IAAI,IAAI,CAAC,GACtB,EAAS,CAAC,CAAE,SAAO,WAAE,CAAS,CAAE,GACb,EAAA,OAAK,CAAC,aAAa,CAAC,MAAO,CAC5C,UAAW,CACP,yBACA,EACH,CAAC,MAAM,CAAC,SAAS,IAAI,CAAC,KACvB,eAAgB,CACpB,EAAiB,CAAd,CAAc,OAAK,CAAC,EAAT,WAAsB,CAAC,MAAO,CACxC,UAAW,gBACf,EAAG,EAAK,GAAG,CAAC,CAAC,EAAG,IAAI,AAAc,EAAA,OAAK,CAAC,CAAT,YAAsB,CAAC,MAAO,CACrD,UAAW,qBACX,IAAK,CAAC,YAAY,EAAE,EAAA,CAAG,AAC3B,MAEF,EAA4B,EAAA,OAAK,CAAC,EAApB,WAAiC,AAAtB,CAAuB,MAAO,CACzD,MAAO,6BACP,QAAS,YACT,KAAM,eACN,OAAQ,KACR,MAAO,IACX,EAAiB,CAAd,CAAc,OAAK,CAAC,EAAT,WAAsB,CAAC,OAAQ,CACzC,SAAU,UACV,EAAG,yJACH,SAAU,SACd,IACM,EAA4B,EAAA,OAAK,CAAC,EAApB,WAAiC,AAAtB,CAAuB,MAAO,CACzD,MAAO,6BACP,QAAS,YACT,KAAM,eACN,OAAQ,KACR,MAAO,IACX,EAAiB,CAAd,CAAc,OAAK,CAAC,EAAT,WAAsB,CAAC,OAAQ,CACzC,SAAU,UACV,EAAG,4OACH,SAAU,SACd,IACM,EAAyB,EAAA,OAAd,AAAmB,CAAC,UAAT,GAAsB,CAAC,MAAO,CACtD,MAAO,6BACP,QAAS,YACT,KAAM,eACN,OAAQ,KACR,MAAO,IACX,EAAiB,CAAd,CAAc,OAAK,CAAC,EAAT,WAAsB,CAAC,OAAQ,CACzC,SAAU,UACV,EAAG,0OACH,SAAU,SACd,IACM,EAA0B,EAAA,OAAK,CAAnB,AAAoB,WAAT,EAAsB,CAAC,MAAO,CACvD,MAAO,6BACP,QAAS,YACT,KAAM,eACN,OAAQ,KACR,MAAO,IACX,EAAiB,CAAd,CAAc,OAAK,CAAC,EAAT,WAAsB,CAAC,OAAQ,CACzC,SAAU,UACV,EAAG,sIACH,SAAU,SACd,IACM,EAA0B,EAAA,OAAK,CAAnB,AAAoB,WAAT,EAAsB,CAAC,MAAO,CACvD,MAAO,6BACP,MAAO,KACP,OAAQ,KACR,QAAS,YACT,KAAM,OACN,OAAQ,eACR,YAAa,MACb,cAAe,QACf,eAAgB,OACpB,EAAiB,CAAd,CAAc,OAAK,CAAC,EAAT,WAAsB,CAAC,OAAQ,CACzC,GAAI,KACJ,GAAI,IACJ,GAAI,IACJ,GAAI,IACR,GAAkB,CAAd,CAAc,OAAK,CAAC,EAAT,WAAsB,CAAC,OAAQ,CAC1C,GAAI,IACJ,GAAI,IACJ,GAAI,KACJ,GAAI,IACR,IAcI,EAAgB,EA0Pd,EAAa,IAAI,AAzPvB,MAAM,AACF,aAAa,CAET,IAAI,CAAC,SAAS,CAAG,AAAC,IACd,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GACf,KACH,IAAM,EAAQ,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,GACvC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,EAAO,EACnC,GAEJ,IAAI,CAAC,OAAO,CAAG,AAAC,IACZ,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,AAAC,GAAa,EAAW,GACtD,EACA,IAAI,CAAC,QAAQ,CAAG,AAAC,IACb,IAAI,CAAC,OAAO,CAAC,GACb,IAAI,CAAC,MAAM,CAAG,IACP,IAAI,CAAC,MAAM,CACd,EACH,AACL,EACA,IAAI,CAAC,MAAM,CAAG,AAAC,IACX,IAAI,EACJ,GAAM,CAAE,SAAO,CAAE,GAAG,EAAM,CAAG,EACvB,EAAkD,UAA7C,OAAO,AAAS,MAAR,EAAe,KAAK,EAAI,EAAK,EAAA,AAAE,GAAkB,CAAyB,AAAxB,OAAC,EAAW,EAAK,EAAA,AAAE,EAAY,KAAK,EAAI,EAAS,MAAM,AAAN,EAAU,EAAI,EAAK,EAAE,CAAG,IACxI,EAAgB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,AAAC,GAC7B,EAAM,EAAE,GAAK,GAElB,OAAmC,IAArB,EAAK,MAA4B,KAAjB,EAAwB,EAAK,WAAW,CA+B5E,OA9BI,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,IACzB,CAD8B,GAC1B,CAAC,eAAe,CAAC,MAAM,CAAC,GAE5B,EACA,IAAI,CAAC,MAAM,CAAG,CADC,GACG,CAAC,MAAM,CAAC,GAAG,CAAC,AAAC,GAC3B,AAAI,EAAM,EAAE,GAAK,GACb,CADiB,GACb,CAAC,OAAO,CAAC,CACT,GAAG,CAAK,CACR,GAAG,CAAI,IACP,EACA,MAAO,CACX,GACO,CACH,GAAG,CAAK,CACR,GAAG,CAAI,IACP,cACA,EACA,MAAO,CACX,GAEG,GAGX,IAAI,CAAC,QAAQ,CAAC,CACV,MAAO,EACP,GAAG,CAAI,aACP,KACA,CACJ,GAEG,CACX,EACA,IAAI,CAAC,OAAO,CAAG,AAAC,IACR,GACA,CADI,GACA,CAAC,eAAe,CAAC,GAAG,CAAC,GACzB,sBAAsB,IAAI,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,AAAC,GAAa,EAAW,IAChE,EACA,SAAS,CACb,MAER,IAAI,CAAC,MAAM,CAAC,OAAO,CAAE,AAAD,IAChB,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,AAAC,GAAa,EAAW,CAC1C,GAAI,EAAM,EAAE,CACZ,SAAS,CACb,GACR,GAEG,GAEX,IAAI,CAAC,OAAO,CAAG,CAAC,EAAS,IACd,IAAI,CAAC,MAAM,CAAC,CACf,GAAG,CAAI,SACP,CACJ,GAEJ,IAAI,CAAC,KAAK,CAAG,CAAC,EAAS,IACZ,IAAI,CAAC,MAAM,CAAC,CACf,GAAG,CAAI,SACP,EACA,KAAM,OACV,GAEJ,IAAI,CAAC,OAAO,CAAG,CAAC,EAAS,IACd,IAAI,CAAC,MAAM,CAAC,CACf,GAAG,CAAI,CACP,KAAM,UACN,SACJ,GAEJ,IAAI,CAAC,IAAI,CAAG,CAAC,EAAS,IACX,IAAI,CAAC,MAAM,CAAC,CACf,GAAG,CAAI,CACP,KAAM,eACN,CACJ,GAEJ,IAAI,CAAC,OAAO,CAAG,CAAC,EAAS,IACd,IAAI,CAAC,MAAM,CAAC,CACf,GAAG,CAAI,CACP,KAAM,kBACN,CACJ,GAEJ,IAAI,CAAC,OAAO,CAAG,CAAC,EAAS,IACd,IAAI,CAAC,MAAM,CAAC,CACf,GAAG,CAAI,CACP,KAAM,kBACN,CACJ,GAEJ,IAAI,CAAC,OAAO,CAAG,CAAC,EAAS,SAiBjB,EAZA,EAJJ,GAIS,AAJL,CAAC,EAED,IAFO,QAKU,IAAjB,EAAK,KAAuB,EAAhB,GACZ,EAAK,IAAI,CAAC,MAAM,CAAC,CACb,GAAG,CAAI,SACP,EACA,KAAM,UACN,QAAS,EAAK,OAAO,CACrB,YAAyC,YAA5B,OAAO,EAAK,WAAW,CAAkB,EAAK,WAAW,MAAG,CAC7E,EAAA,EAEJ,IAAM,EAAI,QAAQ,OAAO,CAAC,aAAmB,SAAW,IAAY,GAChE,OAAuB,IAAP,EAEd,EAAkB,EAAE,IAAI,CAAC,MAAO,IAMlC,GALA,CAKI,CALK,CACL,UACA,EACH,CAC8B,EAAA,OAAK,AACR,CADS,cAAc,CAAC,GAEhD,GAAgB,EAChB,IAAI,CAAC,MAAM,CAAC,IACR,EACA,KAAM,UACN,QAAS,CACb,QACG,GAAI,EAAe,IAAa,CAAC,EAAS,EAAE,CAAE,CACjD,GAAgB,EAChB,IAAM,EAAoC,YAAtB,OAAO,EAAK,KAAK,CAAkB,MAAM,EAAK,KAAK,CAAC,CAAC,oBAAoB,EAAE,EAAS,MAAM,CAAA,CAAE,EAAI,EAAK,KAAK,CACxH,EAA0C,YAA5B,OAAO,EAAK,WAAW,CAAkB,MAAM,EAAK,WAAW,CAAC,CAAC,oBAAoB,EAAE,EAAS,MAAM,CAAA,CAAE,EAAI,EAAK,WAAW,CAE1I,EAD0C,AAC1B,UADG,EAAmC,KAA5B,GAA6B,EAAA,OAAK,CAAC,cAAc,CAAC,GAC3B,CACnD,QAAS,CACb,EAFyC,EAGzC,IAAI,CAAC,MAAM,CAAC,IACR,EACA,KAAM,oBACN,EACA,GAAG,CAAa,AACpB,EACJ,MAAO,GAAI,aAAoB,MAAO,CAClC,GAAgB,EAChB,IAAM,EAAoC,YAAtB,OAAO,EAAK,KAAK,CAAkB,MAAM,EAAK,KAAK,CAAC,GAAY,EAAK,KAAK,CACxF,EAA0C,YAA5B,OAAO,EAAK,WAAW,CAAkB,MAAM,EAAK,WAAW,CAAC,GAAY,EAAK,WAAW,CAE1G,EAD0C,AAC1B,UADG,EAAmC,KAA5B,GAA6B,EAAA,OAAK,CAAC,cAAc,CAAC,GAC3B,CACnD,QAAS,CACb,EAFyC,EAGzC,IAAI,CAAC,MAAM,CAAC,IACR,EACA,KAAM,oBACN,EACA,GAAG,CAAa,AACpB,EACJ,MAAO,QAAqB,IAAjB,EAAK,OAAO,CAAgB,CACnC,GAAgB,EAChB,IAAM,EAAsC,YAAxB,OAAO,EAAK,OAAO,CAAkB,MAAM,EAAK,OAAO,CAAC,GAAY,EAAK,OAAO,CAC9F,EAA0C,YAA5B,OAAO,EAAK,WAAW,CAAkB,MAAM,EAAK,WAAW,CAAC,GAAY,EAAK,WAAW,CAE1G,EAAgB,AAD0B,UAAvB,EAAmC,KAA5B,GAA6B,EAAA,OAAK,CAAC,cAAc,CAAC,GAC3B,CACnD,QAAS,CACb,EAFyC,EAGzC,IAAI,CAAC,MAAM,CAAC,IACR,EACA,KAAM,sBACN,EACA,GAAG,CAAa,AACpB,EACJ,CACJ,GAAG,KAAK,CAAC,MAAO,IAKZ,GAJA,EAAS,CACL,SACA,EACH,MACkB,IAAf,EAAK,KAAK,CAAgB,CAC1B,GAAgB,EAChB,IAAM,EAAoC,YAAtB,OAAO,EAAK,KAAK,CAAkB,MAAM,EAAK,KAAK,CAAC,GAAS,EAAK,KAAK,CACrF,EAA0C,YAA5B,OAAO,EAAK,WAAW,CAAkB,MAAM,EAAK,WAAW,CAAC,GAAS,EAAK,WAAW,CAEvG,EAD0C,AAC1B,UADG,EAAmC,KAA5B,GAA6B,EAAA,OAAK,CAAC,cAAc,CAAC,GAC3B,CACnD,QAAS,CACb,EAFyC,EAGzC,IAAI,CAAC,MAAM,CAAC,IACR,EACA,KAAM,oBACN,EACA,GAAG,CACP,AADoB,EAExB,CACJ,GAAG,OAAO,CAAC,KACH,IAEA,IAAI,CAAC,MAFU,CAEH,CAAC,GACb,OAAK,GAEO,MAAhB,CAAuB,CAAlB,IAAuB,GAAhB,EAAoB,EAAK,OAAO,CAAC,IAAI,CAAC,EACtD,GACM,EAAS,IAAI,IAAI,QAAQ,CAAC,EAAS,IAAS,EAAgB,IAAI,CAAC,IAAkB,WAAd,CAAM,CAAC,EAAE,CAAgB,EAAO,CAAM,CAAC,EAAE,EAAI,EAAQ,CAAM,CAAC,EAAE,GAAG,KAAK,CAAC,UAClJ,AAAkB,UAAd,OAAO,GAAmB,AAAc,UAAU,OAAjB,EAE1B,QACH,CACJ,EAEO,OAAO,MAAM,CAAC,EAAI,CACrB,QACJ,EAER,EACA,IAAI,CAAC,MAAM,CAAG,CAAC,EAAK,KAChB,IAAM,EAAK,CAAC,AAAQ,QAAO,KAAK,EAAI,EAAK,EAAA,AAAE,GAAK,IAMhD,OALA,IAAI,CAAC,MAAM,CAAC,CACR,IAAK,EAAI,MACT,EACA,GAAG,CAAI,AACX,GACO,CACX,EACA,IAAI,CAAC,eAAe,CAAG,IACZ,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,AAAC,GAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,EAAM,EAAE,GAEzE,IAAI,CAAC,WAAW,CAAG,EAAE,CACrB,IAAI,CAAC,MAAM,CAAG,EAAE,CAChB,IAAI,CAAC,eAAe,CAAG,IAAI,GAC/B,CACJ,EAYM,EAAiB,AAAC,GACb,GAAwB,UAAhB,OAAO,GAAqB,OAAQ,GAA2B,WAAnB,OAAO,EAAK,EAAE,EAAkB,WAAY,GAAQ,AAAuB,iBAAhB,EAAK,MAAM,CAM/H,EAAQ,OAAO,MAAM,CAAC,AAhBN,CAAC,EAAS,KAC5B,IAAM,EAAK,CAAS,MAAR,EAAe,KAAK,EAAI,EAAK,EAAE,AAAF,GAAO,IAMhD,OALA,EAAW,QAAQ,CAAC,CAChB,MAAO,EACP,GAAG,CAAI,IACP,CACJ,GACO,CACX,EAQwC,CACpC,QAAS,EAAW,OAAO,CAC3B,KAAM,EAAW,IAAI,CACrB,QAAS,EAAW,OAAO,CAC3B,MAAO,EAAW,KAAK,CACvB,OAAQ,EAAW,MAAM,CACzB,QAAS,EAAW,OAAO,CAC3B,QAAS,EAAW,OAAO,CAC3B,QAAS,EAAW,OAAO,CAC3B,QAAS,EAAW,OAAO,AAC/B,EAAG,CACC,WAde,IAAI,EAAW,MAAM,CAepC,UAdc,IAAI,EAAW,eAAe,EAehD,GAIA,SAAS,EAAS,CAAM,EACpB,OAAO,KAAiB,MAAV,KAAK,AACvB,CAkBA,SAAS,EAAG,GAAG,CAAO,EAClB,OAAO,EAAQ,MAAM,CAAC,SAAS,IAAI,CAAC,IACxC,EAxBA,AAlZA,SAAqB,AAAZ,CAAgB,EACvB,GAAI,CAAC,GAA2B,aAAnB,OAAO,SAAyB,OAC7C,IAAI,EAAO,SAAS,IAAI,EAAI,SAAS,oBAAoB,CAAC,OAAO,CAAC,EAAE,CAChE,EAAQ,SAAS,aAAa,CAAC,SACnC,EAAM,IAAI,CAAG,WACb,EAAK,WAAW,CAAC,GAChB,EAAM,UAAU,CAAI,EAAM,UAAU,CAAC,OAAO,CAAG,EAAQ,EAAM,WAAW,CAAC,SAAS,cAAc,CAAC,GACpG,EA2YY,+gdAoCZ,IAAM,EAAQ,AAAC,QACP,EAAmB,EAAoB,EAAoB,EAAoB,EAAoB,EAAoB,EAAoB,EAAoB,EA0M/J,EAAmB,EAzMvB,GAAM,CAAE,OAAQ,CAAa,OAAE,CAAK,UAAE,CAAQ,aAAE,CAAW,YAAE,CAAU,eAAE,CAAa,CAAE,SAAO,OAAE,CAAK,QAAE,CAAM,CAAE,UAAQ,aAAE,CAAW,mBAAE,CAAiB,CAAE,YAAa,CAAsB,OAAE,CAAK,mBAAE,CAAiB,mBAAE,CAAiB,WAAE,EAAY,EAAE,sBAAE,EAAuB,EAAE,CAAE,SAAU,CAAmB,UAAE,CAAQ,CAAE,KAAG,iBAAE,CAAe,YAAE,CAAU,OAAE,CAAK,sBAAE,EAAuB,aAAa,CAAE,CAAG,EAC5Y,CAAC,EAAgB,EAAkB,CAAG,EAAA,OAAK,CAAC,QAAQ,CAAC,MACrD,CAAC,EAAmB,EAAqB,CAAG,EAAA,OAAK,CAAC,QAAQ,CAAC,MAC3D,CAAC,EAAS,EAAW,CAAG,EAAA,OAAK,CAAC,QAAQ,EAAC,GACvC,CAAC,EAAS,EAAW,CAAG,EAAA,OAAK,CAAC,QAAQ,EAAC,GACvC,CAAC,GAAS,GAAW,CAAG,EAAA,OAAK,CAAC,QAAQ,EAAC,GACvC,CAAC,GAAU,GAAY,CAAG,EAAA,OAAK,CAAC,QAAQ,EAAC,GACzC,CAAC,GAAU,GAAY,CAAG,EAAA,OAAK,CAAC,QAAQ,EAAC,GACzC,CAAC,GAAoB,GAAsB,CAAG,EAAA,OAAK,CAAC,QAAQ,CAAC,GAC7D,CAAC,GAAe,GAAiB,CAAG,EAAA,OAAK,CAAC,QAAQ,CAAC,GACnD,GAAgB,EAAA,OAAK,CAAC,MAAM,CAAC,EAAM,QAAQ,EAAI,GAnClC,KAoCb,GAAgB,EAAA,OAAK,CAAC,EADgD,IAC1C,CAAC,MAC7B,GAAW,EAAA,OAAK,CAAC,MAAM,CAAC,MACxB,GAAU,AAAU,MACpB,GAAY,EAAQ,GAAK,EACzB,GAAY,EAAM,IAAI,CACtB,IAAoC,IAAtB,EAAM,WAAW,CAC/B,GAAiB,EAAM,SAAS,EAAI,GACpC,GAA4B,EAAM,oBAAoB,EAAI,GAE1D,GAAc,EAAA,OAAK,CAAC,OAAO,CAAC,IAAI,EAAQ,SAAS,CAAC,AAAC,GAAS,EAAO,OAAO,GAAK,EAAM,EAAE,GAAK,EAAG,CACjG,EACA,EAAM,EAAE,CACX,EACK,GAAc,EAAA,OAAK,CAAC,OAAO,CAAC,KAC9B,IAAI,EACJ,OAAO,AAA4C,OAA3C,EAAqB,EAAM,WAAA,AAAW,EAAY,EAAqB,CACnF,EAAG,CACC,EAAM,WAAW,CACjB,EACH,EACK,GAAW,EAAA,OAAK,CAAC,OAAO,CAAC,IAAI,EAAM,QAAQ,EAAI,OAAuC,CACxF,EAAM,QAAQ,CACd,EACH,EAH2E,AAItE,GAAyB,EAAA,OAAK,CAAC,MAAM,CAAC,GACtC,GAAS,EAAA,OAAK,CAAC,MAAM,CAAC,GACtB,GAA6B,EAAA,OAAK,CAAC,MAAM,CAAC,GAC1C,GAAkB,EAAA,OAAK,CAAC,MAAM,CAAC,MAC/B,CAAC,GAAG,GAAE,CAAG,EAAS,KAAK,CAAC,KACxB,GAAqB,EAAA,OAAK,CAAC,OAAO,CAAC,IAC9B,EAAQ,MAAM,CAAC,CAAC,EAAM,EAAM,IAE/B,AAAI,GAAgB,GACT,EAEJ,EAAO,EAAK,IAHc,EAGR,CAC1B,GACJ,CACC,EACA,GACH,EACK,GAAmB,CAjYD,KACxB,GAAM,CAAC,EAAkB,EAAoB,CAAG,EAAA,OAAK,CAAC,QAAQ,CAAC,SAAS,MAAM,EAQ9E,OAPA,EAAA,OAAK,CAAC,SAAS,CAAC,KACZ,IAAM,EAAW,KACb,EAAoB,SAAS,MAAM,CACvC,EAEA,OADA,SAAS,gBAAgB,CAAC,mBAAoB,GACvC,IAAI,OAAO,mBAAmB,CAAC,mBAAoB,EAC9D,EAAG,EAAE,EACE,EACX,IAwXU,GAAS,EAAM,MAAM,EAAI,EACzB,GAAyB,YAAd,GACjB,GAAO,OAAO,CAAG,EAAA,OAAK,CAAC,OAAO,CAAC,IAAI,GAAc,EAAM,GAAoB,CACvE,GACA,GACH,EACD,EAAA,OAAK,CAAC,SAAS,CAAC,KACZ,GAAc,OAAO,CAAG,EAC5B,EAAG,CACC,GACH,EACD,EAAA,OAAK,CAAC,SAAS,CAAC,KAEZ,EAAW,GACf,EAAG,EAAE,EACL,EAAA,OAAK,CAAC,SAAS,CAAC,KACZ,IAAM,EAAY,GAAS,OAAO,CAClC,GAAI,EAAW,CACX,IAAM,EAAS,EAAU,qBAAqB,GAAG,MAAM,CAWvD,OATA,GAAiB,GACjB,EAAW,AAAC,GAAI,CACR,CACI,QAAS,EAAM,EAAE,QACjB,EACA,SAAU,EAAM,QACpB,AAD4B,KAEzB,EACN,EACE,IAAI,EAAY,AAAD,GAAK,EAAE,MAAM,CAAC,AAAC,GAAS,EAAO,OAAO,GAAK,EAAM,EAAE,EAC7E,CACJ,EAAG,CACC,EACA,EAAM,EAAE,CACX,EACD,EAAA,OAAK,CAAC,eAAe,CAAC,KAElB,GAAI,CAAC,EAAS,OACd,IAAM,EAAY,GAAS,OAAO,CAC5B,EAAiB,EAAU,KAAK,CAAC,MAAM,CAC7C,EAAU,KAAK,CAAC,MAAM,CAAG,OACzB,IAAM,EAAY,EAAU,qBAAqB,GAAG,MAAM,AAC1D,GAAU,KAAK,CAAC,MAAM,CAAG,EACzB,GAAiB,GACjB,EAAW,AAAC,GACc,AACtB,EAD8B,EAC1B,CAAC,CAD6B,CAAC,AAAC,GAAS,EAAO,OAAO,CACvC,EAD4C,EAAM,EAAE,EAW7D,EAAQ,GAAG,CAAC,AAAC,GAAS,EAAO,OAAO,GAAK,EAAM,EAAE,CAAG,CACnD,GAAG,CAAM,CACT,OAAQ,CACZ,EAAI,GAZD,CACH,CACI,QAAS,EAAM,EAAE,CACjB,OAAQ,EACR,SAAU,EAAM,QAAQ,AAC5B,KACG,EACN,CAQb,EAAG,CACC,EACA,EAAM,KAAK,CACX,EAAM,WAAW,CACjB,EACA,EAAM,EAAE,CACR,EAAM,GAAG,CACT,EAAM,MAAM,CACZ,EAAM,MAAM,CACf,EACD,IAAM,GAAc,EAAA,OAAK,CAAC,WAAW,CAAC,KAElC,GAAW,GACX,GAAsB,GAAO,OAAO,EACpC,EAAW,AAAC,GAAI,EAAE,MAAM,CAAC,AAAC,GAAS,EAAO,OAAO,GAAK,EAAM,EAAE,GAC9D,WAAW,KACP,EAAY,EAChB,EArJoB,CAqJjB,GACP,EAAG,CACC,EACA,EACA,EACA,GACH,EACD,EAAA,OAAK,CAAC,SAAS,CAAC,SAER,EADJ,KAAI,EAAM,OAAO,EAAkB,YAAd,EAAc,GAAa,EAAM,QAAQ,GAAK,KAAY,AAAe,WAAW,GAApB,IAAI,CA4BzF,OALI,GAAY,GAAe,GAC3B,CArBe,KACf,GAAI,GAA2B,GAmBc,IAnBP,CAAG,GAAuB,OAAO,CAAE,CAErE,IAAM,EAAc,IAAI,OAAO,OAAO,GAAK,GAAuB,OAAO,CACzE,GAAc,OAAO,CAAG,GAAc,OAAO,CAAG,CACpD,CACA,GAA2B,OAAO,CAAG,IAAI,OAAO,OAAO,GAC3D,IAKQ,GAAc,OAAO,GAAK,MAC9B,GAAuB,CADiB,MACV,CAAG,IAAI,OAAO,OAAO,GAEnD,EAAY,WAAW,KACE,MAArB,CAA4B,CAAtB,IAA2B,OAAhB,EAAoB,EAAM,WAAW,CAAC,IAAI,CAAC,EAAO,GACnE,IACJ,EAAG,GAAc,OAAO,GAOrB,IAAI,aAAa,EAC5B,EAAG,CACC,EACA,EACA,EACA,GACA,GACA,GACH,EACD,EAAA,OAAK,CAAC,SAAS,CAAC,KACR,EAAM,MAAM,EAAE,CACd,KACmB,MAAnB,CAA0B,CAApB,IAAyB,KAAhB,EAAoB,EAAM,SAAS,CAAC,IAAI,CAAC,EAAO,GAEvE,EAAG,CACC,GACA,EAAM,MAAM,CACf,EAeD,IAAM,GAAO,EAAM,IAAI,GAAK,AAAS,CAAV,OAAiB,KAAK,EAAI,CAAK,CAAC,GAAA,AAAU,GAAK,CApnB7D,AAAC,IACd,OAAO,GACH,IAAK,UACD,OAAO,CACX,KAAK,OACD,OAAO,CACX,KAAK,UACD,OAAO,CACX,KAAK,QACD,OAAO,CACX,SACI,OAAO,IACf,EACJ,EAumBuF,IAEnF,OAAO,AAAc,EAAA,OAAK,CAAC,CAAT,YAAsB,CAAC,KAAM,CAC3C,SAAU,EACV,IAAK,GACL,UAAW,EAAG,EAAW,GAA8B,MAAd,EAAqB,KAAK,EAAI,EAAW,KAAK,CAAW,MAAT,CAAgB,EAAmD,AAA1C,GAAJ,IAAK,EAAoB,EAAM,UAAA,AAAU,EAAY,KAAK,EAAI,EAAkB,KAAK,CAAgB,MAAd,EAAqB,KAAK,EAAI,EAAW,OAAO,CAAgB,MAAd,EAAqB,KAAK,EAAI,CAAU,CAAC,GAAU,CAAW,MAAT,CAAgB,EAAS,AAA2C,GAA/C,IAAK,EAAqB,EAAM,UAAA,AAAU,EAAY,KAAK,EAAI,CAAkB,CAAC,GAAU,EAC7Z,oBAAqB,GACrB,mBAAoB,AAA0C,OAAzC,EAAoB,EAAM,UAAA,AAAU,EAAY,EAAoB,EACzF,cAAe,CAAC,CAAQ,EAAM,GAAG,EAAI,EAAM,QAAQ,EAAI,CAAA,EACvD,eAAgB,EAChB,gBAAgB,CAAQ,EAAM,OAAO,CACrC,cAAe,GACf,eAAgB,EAChB,eAAgB,GAChB,kBAAmB,GACnB,kBAAmB,GACnB,aAAc,EACd,aAAc,GACd,eAAgB,GAChB,mBAAoB,GACpB,YAAa,GACb,cAAe,GACf,iBAAkB,GAClB,uBAAwB,EACxB,iBAAiB,EAAQ,GAAY,GAAmB,CAAA,EACxD,cAAe,EAAM,MAAM,CAC3B,MAAO,CACH,UAAW,EACX,kBAAmB,EACnB,YAAa,EAAO,MAAM,CAAG,EAC7B,WAAY,CAAA,EAAG,EAAU,GAAqB,GAAO,OAAO,CAAC,EAAE,CAAC,CAChE,mBAAoB,EAAkB,OAAS,CAAA,EAAG,GAAc,EAAE,CAAC,CACnE,GAAG,CAAK,CACR,GAAG,EAAM,KAAK,AAClB,EACA,UAAW,KACP,IAAW,GACX,EAAkB,MAClB,GAAgB,OAAO,CAAG,IAC9B,EACA,cAAgB,AAAD,IACU,GAAG,CAApB,EAAM,KAAsB,CAAhB,GACZ,IAAa,KACjB,GADgB,AACF,KADgB,EACT,CAAG,IAAI,EAFkC,GAG9D,GAAsB,GAAO,OAAO,EAEpC,EAAM,MAAM,CAAC,iBAAiB,CAAC,EAAM,SAAS,EACjB,UAAU,CAAnC,EAAM,MAAM,CAAC,OAAO,GACxB,IAAW,GACX,GAAgB,OAAO,CAAG,CACtB,EAAG,EAAM,OAAO,CAChB,EAAG,EAAM,OAAO,AACpB,GACJ,EACA,YAAa,SACL,EAAmB,EAAoB,EAoBnC,EAAoB,EAnB5B,GAAI,IAAY,CAAC,GAAa,OAC9B,GAAgB,OAAO,CAAG,KAC1B,IAAM,EAAe,OAAO,CAAC,AAA0C,OAAzC,EAAoB,GAAS,OAAA,AAAO,EAAY,KAAK,EAAI,EAAkB,KAAK,CAAC,gBAAgB,CAAC,oBAAoB,OAAO,CAAC,KAAM,GAAA,CAAG,EAAK,GACpK,EAAe,OAAO,CAAC,AAA2C,OAA1C,EAAqB,GAAS,OAAA,AAAO,EAAY,KAAK,EAAI,EAAmB,KAAK,CAAC,gBAAgB,CAAC,oBAAoB,OAAO,CAAC,KAAM,GAAA,CAAG,EAAK,GACtK,EAAY,IAAI,OAAO,OAAO,IAA0D,AAApD,CAAD,MAAE,EAAyB,GAAc,OAAA,AAAO,EAAY,KAAK,EAAI,EAAuB,OAAO,EAAA,CAAE,CACxI,EAAiC,AAAnB,QAAyB,EAAe,EACtD,EAAW,KAAK,GAAG,CAAC,GAAe,EACzC,GAAI,KAAK,GAAG,CAAC,IA1RD,IA0RoC,EAAW,IAAM,CAC7D,CADyB,EACH,GAAO,OAAO,EACjB,MAAnB,CAA0B,CAApB,IAAyB,KAAhB,EAAoB,EAAM,SAAS,CAAC,IAAI,CAAC,EAAO,GACxC,KAAK,CAAxB,EACA,EAAqB,EAAe,EAAI,QAAU,QAElD,EAAqB,EAAe,EAAI,OAAS,MAErD,KACA,IAAY,GACZ,MACJ,CAEI,AAA2C,MAFxC,CAEF,AAAiD,EAA5B,GAAS,AAAwB,OAAxB,AAAO,GAAqB,EAAmB,KAAK,CAAC,WAAW,CAAC,mBAAoB,CAAC,GAAG,CAAC,EACzH,AAA2C,OAA1C,AAAiD,EAA5B,GAAS,AAAwB,OAAxB,AAAO,GAAqB,EAAmB,KAAK,CAAC,WAAW,CAAC,mBAAoB,CAAC,GAAG,CAAC,EAE7H,IAAY,GACZ,IAAW,GACX,EAAkB,KACtB,EACA,cAAe,AAAC,QACR,EACJ,EAAmB,EAMf,EALJ,GAAI,CAAC,GAAgB,OAAO,EAAI,CAAC,IACX,AAAC,CAAkD,OAAjD,EAAuB,OAAO,YAAY,EAAA,CAAE,CAAY,KAAK,EAAI,EAAqB,QAAQ,GAAG,MAAA,AAAM,EAAI,EADrF,OAG9C,IAAM,EAAS,EAAM,OAAO,CAAG,GAAgB,OAAO,CAAC,CAAC,CAClD,EAAS,EAAM,OAAO,CAAG,GAAgB,OAAO,CAAC,CAAC,CAElD,EAAsE,AAApD,OAAC,EAAyB,EAAM,eAAA,AAAe,EAAY,EAjT/F,AAiTwH,SAjTrF,AAA1B,CAAkC,EACvC,GAAM,CAAC,EAAG,EAAE,CAAG,EAAS,KAAK,CAAC,KACxB,EAAa,EAAE,CAOrB,OANI,GAAG,AACH,EAAW,IAAI,CAAC,GAEhB,GAAG,AACH,EAAW,IAAI,CAAC,GAEb,CACX,EAuSkJ,EAElI,EAAC,IAAmB,KAAK,GAAG,CAAC,GAAU,EAApB,CAAyB,KAAK,GAAG,CAAC,IAAU,CAAC,EAChE,CADmE,CACjD,KAAK,GAAG,CAAC,GAAU,KAAK,GAAG,CAAC,GAAU,IAAM,KAElE,IAAI,EAAc,CACd,EAAG,EACH,EAAG,CACP,EACM,EAAgB,AAAD,GAEV,GAAK,CAAD,GADI,EACG,GADE,GAAG,CAAC,GAAS,EACf,CAAM,CAG5B,GAAuB,KAAK,CAAxB,GAEA,GAAI,EAAgB,QAAQ,CAAC,QAAU,EAAgB,QAAQ,CAAC,UAC5D,CADuE,EACnE,EAAgB,QAAQ,CAAC,QAAU,EAAS,GAAK,EAAgB,QAAQ,CAAC,WAAa,EAAS,EAChG,CADmG,CACvF,CAAC,CAAG,MACb,CAEH,IAAM,EAAgB,EAAS,EAAa,GAE5C,EAAY,CAAC,CAAG,KAAK,GAAG,CAAC,GAAiB,KAAK,GAAG,CAAC,GAAU,EAAgB,CACjF,CACJ,MACG,GAAI,AAAmB,KAAK,KAE3B,EAAgB,QAAQ,CAAC,SAAW,EAAgB,QAAQ,CAAC,QAAA,EAC7D,CADuE,EACnE,EAAgB,QAAQ,CAAC,SAAW,EAAS,GAAK,EAAgB,QAAQ,CAAC,UAAY,EAAS,EAChG,CADmG,CACvF,CAAC,CAAG,MACb,CAEH,IAAM,EAAgB,EAAS,EAAa,GAE5C,EAAY,CAAC,CAAG,KAAK,GAAG,CAAC,GAAiB,KAAK,GAAG,CAAC,GAAU,EAAgB,CACjF,EAGJ,KAAK,GAAG,CAAC,EAAY,CAAC,EAAI,GAAK,KAAK,GAAG,CAAC,EAAY,CAAC,GAAI,GAAG,AAC5D,IAAY,GAE0B,AAA1C,OAAC,AAAgD,EAA5B,GAAS,AAAwB,OAAxB,AAAO,GAAqB,EAAkB,KAAK,CAAC,WAAW,CAAC,mBAAoB,CAAA,EAAG,EAAY,CAAC,CAAC,EAAE,CAAC,EACtI,AAA2C,OAA1C,AAAiD,EAA5B,GAAiC,AAAxB,OAAA,AAAO,GAAqB,EAAmB,KAAK,CAAC,WAAW,CAAC,mBAAoB,CAAA,EAAG,EAAY,CAAC,CAAC,EAAE,CAAC,CAC5I,CACJ,EAAG,IAAe,CAAC,EAAM,GAAG,EAAkB,YAAd,AAA0B,GAAc,EAAA,MAAH,CAAQ,CAAC,aAAa,CAAC,SAAU,CAClG,aAAc,EACd,gBAAiB,GACjB,qBAAqB,EACrB,QAAS,IAAY,CAAC,GAAc,KAAK,EAAI,KACzC,KACmB,MAAnB,CAA0B,CAApB,IAAyB,KAAhB,EAAoB,EAAM,SAAS,CAAC,IAAI,CAAC,EAAO,EACnE,EACA,UAAW,EAAiB,MAAd,EAAqB,KAAK,EAAI,EAAW,WAAW,CAAW,MAAT,CAAgB,EAAS,AAA2C,GAA/C,IAAK,EAAqB,EAAM,UAAA,AAAU,EAAY,KAAK,EAAI,EAAmB,WAAW,CAC1L,EAAG,AAAyD,OAAxD,EAAwB,MAAT,EAAgB,KAAK,EAAI,EAAM,KAAA,AAAK,EAAY,EAAe,GAAa,KAAM,CAAC,IAAa,EAAM,IAAI,EAAI,EAAM,OAAA,AAAO,GAAoB,OAAf,CAAuB,CAAjB,IAAI,GAAc,CAAU,MAAT,EAAgB,KAAK,EAAI,CAAK,CAAC,GAAA,AAAU,IAAM,MAAQ,EAAM,IAAA,AAAI,EAAkB,EAAd,AAAc,OAAK,CAAC,GAAT,UAAsB,CAAC,MAAO,CACtR,YAAa,GACb,UAAW,EAAiB,MAAd,EAAqB,KAAK,EAAI,EAAW,IAAI,CAAW,MAAT,CAAgB,EAAS,AAA2C,GAA/C,IAAK,EAAqB,EAAM,UAAA,AAAU,EAAY,KAAK,EAAI,EAAmB,IAAI,CAC5K,EAAG,EAAM,OAAO,EAAmB,YAAf,EAAM,IAAI,EAAkB,CAAC,EAAM,IAAI,CAAG,EAAM,IAAI,EAAI,AAnK5E,SAAS,MACD,EAEI,QADR,CAAa,MAAT,EAAgB,KAAK,EAAI,EAAM,OAAA,AAAO,EAAE,AAEnB,EAAA,OAAK,CAAC,aAAa,CAAC,MAAO,CAC5C,UAAW,EAAG,AAAc,QAAO,KAAK,EAAI,EAAW,MAAM,CAAW,MAAT,CAAgB,EAAS,AAA2C,GAA/C,IAAK,EAAqB,EAAM,UAAA,AAAU,EAAY,KAAK,EAAI,EAAmB,MAAM,CAAE,iBAC9K,eAA8B,YAAd,EACpB,EAAG,EAAM,OAAO,EAEC,EAAA,OAAK,CAAC,aAAa,CAAC,EAAQ,CAC7C,UAAW,EAAiB,MAAd,EAAqB,KAAK,EAAI,EAAW,MAAM,CAAW,MAAT,CAAgB,EAAmD,AAA1C,GAAJ,IAAK,EAAoB,EAAM,UAAA,AAAU,EAAY,KAAK,EAAI,EAAkB,MAAM,EAC1K,QAAuB,YAAd,EACb,EACJ,IAsJ+F,KAAqB,YAAf,EAAM,IAAI,CAAiB,GAAO,MAAQ,KAAoB,CAAd,CAAc,OAAK,CAAC,EAAT,WAAsB,CAAC,MAAO,CAC1L,eAAgB,GAChB,UAAW,EAAiB,MAAd,EAAqB,KAAK,EAAI,EAAW,OAAO,CAAW,MAAT,CAAgB,EAAoD,AAA3C,GAAJ,IAAK,EAAqB,EAAM,UAAA,AAAU,EAAY,KAAK,EAAI,EAAmB,OAAO,CAClL,EAAiB,CAAd,CAAc,OAAK,CAAC,EAAT,WAAsB,CAAC,MAAO,CACxC,aAAc,GACd,UAAW,EAAiB,MAAd,EAAqB,KAAK,EAAI,EAAW,KAAK,CAAW,MAAT,CAAgB,EAAS,AAA2C,GAA/C,GAAK,GAAqB,EAAM,UAAA,AAAU,EAAY,KAAK,EAAI,EAAmB,KAAK,CAC9K,EAAG,EAAM,GAAG,CAAG,EAAM,GAAG,CAA0B,YAAvB,OAAO,EAAM,KAAK,CAAkB,EAAM,KAAK,GAAK,EAAM,KAAK,EAAG,EAAM,WAAW,CAAiB,EAAA,AAAd,OAAmB,CAAC,GAAT,UAAsB,CAAC,MAAO,CACtJ,mBAAoB,GACpB,UAAW,EAAG,EAAsB,GAA2B,AAAc,QAAO,KAAK,EAAI,EAAW,WAAW,CAAW,MAAT,CAAgB,EAAS,AAA2C,GAA/C,IAAK,EAAqB,EAAM,UAAA,AAAU,EAAY,KAAK,EAAI,EAAmB,WAAW,CAC3O,EAAgC,YAA7B,OAAO,EAAM,WAAW,CAAkB,EAAM,WAAW,GAAK,EAAM,WAAW,EAAI,MAAqB,CAAd,CAAc,OAAK,CAAC,EAAT,YAAuB,CAAC,EAAM,MAAM,EAAI,EAAM,MAAM,CAAG,EAAM,MAAM,EAAI,EAAS,EAAM,MAAM,EAAkB,EAAd,AAAc,OAAK,CAAC,GAAT,UAAsB,CAAC,SAAU,CAClP,eAAe,EACf,eAAe,EACf,MAAO,EAAM,iBAAiB,EAAI,EAClC,QAAS,AAAC,IAED,EAAS,EAAM,MAAM,GAAG,AACxB,KACL,AAAwB,OAAO,CADb,AACZ,IAA8B,EAAxB,CAAC,OAAO,EAAoB,EAAM,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,EAAM,MAAM,CAAE,GAChF,KACJ,EACA,UAAW,EAAiB,MAAd,EAAqB,KAAK,EAAI,EAAW,YAAY,CAAW,MAAT,CAAgB,EAAS,AAA2C,GAA/C,IAAK,EAAqB,EAAM,UAAA,AAAU,EAAY,KAAK,EAAI,EAAmB,YAAY,CAC5L,EAAG,EAAM,MAAM,CAAC,KAAK,EAAI,KAAoB,CAAd,CAAc,OAAK,CAAC,EAAT,YAAuB,CAAC,EAAM,MAAM,EAAI,EAAM,MAAM,CAAG,EAAM,MAAM,EAAI,EAAS,EAAM,MAAM,EAAkB,EAAd,AAAc,OAAK,CAAC,GAAT,UAAsB,CAAC,SAAU,CAClL,eAAe,EACf,eAAe,EACf,MAAO,EAAM,iBAAiB,EAAI,EAClC,QAAS,AAAC,IAED,EAAS,EAAM,MAAM,GAAG,CACL,AAAxB,OAA+B,CAAzB,IAA8B,EAAxB,CAAC,OAAO,EAAoB,EAAM,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,EAAM,MAAM,CAAE,GAC5E,EAAM,gBAAgB,EAAE,AAC5B,KACJ,EACA,UAAW,EAAiB,MAAd,EAAqB,KAAK,EAAI,EAAW,YAAY,CAAW,MAAT,CAAgB,EAAS,AAA2C,GAA/C,GAAK,GAAqB,EAAM,UAAA,AAAU,EAAY,KAAK,EAAI,EAAmB,YAAY,CAC5L,EAAG,EAAM,MAAM,CAAC,KAAK,EAAI,KAC7B,EA2FM,EAAwB,EAAA,MAAd,CAAmB,CAAC,SAAT,CAAmB,CAAC,SAAS,AAAQ,CAAK,CAAE,CAAG,EACtE,GAAM,IAAE,CAAE,QAAE,CAAM,UAAE,EAAW,cAAc,QAAE,EAAS,CACpD,SACA,OACH,QAAE,CAAM,aAAE,CAAW,WAAE,CAAS,QAAE,CAAM,cAAE,CAAY,CAAE,QAAQ,OAAO,YAAE,CAAU,UAAE,CAAQ,CAAE,OAAK,CAAE,gBAAgB,AA7f7F,CA6fkH,cAAE,CAAY,CAAE,MAAM,AA7FxH,KA6F8I,KAAE,EAnflL,EAmf2L,EAAH,KAAK,CAAK,oBAAE,EAAqB,eAAe,CAAE,CAAG,EAC/O,CAAC,EAAQ,EAAU,CAAG,EAAA,OAAK,CAAC,QAAQ,CAAC,EAAE,EACvC,EAAiB,EAAA,OAAK,CAAC,OAAO,CAAC,IAC7B,AAAJ,EACW,EADH,AACU,MAAM,CAAC,AAAC,GAAQ,EAAM,SAAS,GAAK,GAE/C,EAAO,MAAM,CAAC,AAAC,GAAQ,CAAC,EAAM,SAAS,EAC/C,CACC,EACA,EACH,EACK,EAAoB,EAAA,OAAK,CAAC,OAAO,CAAC,IAC7B,MAAM,IAAI,CAAC,IAAI,IAAI,CACtB,EACH,CAAC,MAAM,CAAC,EAAe,MAAM,CAAC,AAAC,GAAQ,EAAM,QAAQ,EAAE,GAAG,CAAC,AAAC,GAAQ,EAAM,QAAQ,KACpF,CACC,EACA,EACH,EACK,CAAC,EAAS,EAAW,CAAG,EAAA,OAAK,CAAC,QAAQ,CAAC,EAAE,EACzC,CAAC,EAAU,EAAY,CAAG,EAAA,OAAK,CAAC,QAAQ,EAAC,GACzC,CAAC,EAAa,EAAe,CAAG,EAAA,OAAK,CAAC,QAAQ,EAAC,GAC/C,CAAC,EAAa,EAAe,CAAG,EAAA,OAAK,CAAC,QAAQ,CAAC,AAAU,aAAW,EAA4I,MAApI,GAC5E,EAAU,EAAA,OAAK,CAAC,MAAM,CAAC,MACvB,EAAc,EAAO,IAAI,CAAC,CAFkF,IAE7E,OAAO,CAAC,OAAQ,IAAI,OAAO,CAAC,SAAU,IACrE,EAAwB,EAAA,OAAK,CAAC,MAAM,CAAC,MACrC,EAAmB,EAAA,OAAK,CAAC,MAAM,EAAC,GAChC,EAAc,EAAA,OAAK,CAAC,WAAW,CAAC,AAAC,IACnC,EAAU,AAAC,IACP,IAAI,EAIJ,MAHI,CAAC,AAAC,AAAwE,OAAvE,EAAe,EAAO,IAAI,CAAE,AAAD,GAAS,EAAM,EAAE,GAAK,EAAc,GAAE,CAAC,CAAY,KAAK,EAAI,EAAa,MAAA,AAAM,GAAG,AAChH,EAAW,OAAO,CAAC,EAAc,EAAE,EAEhC,EAAO,MAAM,CAAC,CAAC,IAAE,CAAE,CAAE,GAAG,IAAO,EAAc,EAAE,CAC1D,EACJ,EAAG,EAAE,EA4HL,OA3HA,AA4HA,EA5HA,OAAK,CAAC,CA4HK,QA5HI,CAAC,IACL,EAAW,SAAS,CAAE,AAAD,IACxB,GAAI,EAAM,OAAO,CAAE,YAEf,sBAAsB,KAClB,EAAU,AAAC,GAAS,EAAO,GAAG,CAAC,AAAC,GAAI,EAAE,EAAE,GAAK,EAAM,EAAE,CAAG,CAC5C,GAAG,CAAC,CACJ,QAAQ,CACZ,EAAI,GAChB,GAIJ,WAAW,KACP,EAAA,OAAQ,CAAC,SAAS,CAAC,KACf,EAAU,AAAC,IACP,IAAM,EAAuB,EAAO,SAAS,CAAC,AAAC,GAAI,EAAE,EAAE,GAAK,EAAM,EAAE,SAEvC,AAA7B,AAAI,CAA0B,GAAG,GACtB,IACA,EAAO,KAAK,CAAC,EAAG,GACnB,CACI,GAAG,CAAM,CAAC,EAAqB,CAC/B,GAAG,CAAK,AACZ,KACG,EAAO,KAAK,CAAC,EAAuB,GAC1C,CAEE,CACH,KACG,EACN,AACL,EACJ,EACJ,EACJ,GACD,CACC,EACH,EACD,EAAA,OAAK,CAAC,SAAS,CAAC,KACZ,GAAc,WAAV,EAAoB,YACpB,EAAe,GAGL,UAAU,CAApB,IAEI,OAAO,UAAU,EAAI,OAAO,UAAU,CAAC,gCAAgC,OAAO,CAE9E,CAFgF,CAEjE,QAGf,EAAe,SA4B3B,EAAG,CACC,EACH,EACD,EAAA,OAAK,CAAC,SAAS,CAAC,KAER,EAAO,MAAM,EAAI,GAAG,AACpB,GAAY,EAEpB,EAAG,CACC,EACH,EACD,EAAA,OAAK,CAAC,SAAS,CAAC,KACZ,IAAM,EAAgB,AAAC,QACf,EAGI,EAFgB,EAAO,KAAK,CAAC,AAAC,GAAM,CAAK,CAAC,EAAI,EAAI,EAAM,IAAI,GAAK,KAGrE,GAAY,GACZ,AAAyC,OAAxC,AAA+C,EAA3B,EAAQ,CAAwB,MAAxB,AAAO,GAAqB,EAAkB,KAAK,IAEjE,WAAf,CAA2B,CAArB,IAAI,GAAkB,SAAS,aAAa,GAAK,EAAQ,OAAO,EAAK,CAAwC,CAAzC,MAAE,EAAmB,EAAQ,OAAO,AAAP,EAAmB,KAAK,EAAI,EAAiB,QAAQ,CAAC,SAAS,cAAa,CAAC,CAAC,EACrL,CADwL,EAC5K,EAEpB,EAEA,OADA,SAAS,gBAAgB,CAAC,UAAW,GAC9B,IAAI,SAAS,mBAAmB,CAAC,UAAW,EACvD,EAAG,CACC,EACH,EACD,EAAA,OAAK,CAAC,SAAS,CAAC,KACZ,GAAI,EAAQ,OAAO,CACf,CADiB,KACV,KACC,EAAsB,OAAO,EAAE,CAC/B,EAAsB,OAAO,CAAC,KAAK,CAAC,CAChC,eAAe,CACnB,GACA,EAAsB,OAAO,CAAG,KAChC,EAAiB,OAAO,EAAG,EAEnC,CAER,EAAG,CACC,EAAQ,OAAO,CAClB,EAEa,EAAA,OAAK,CAAC,aAAa,CAAC,UAAW,CACzC,IAAK,EACL,aAAc,CAAA,EAAG,EAAmB,CAAC,EAAE,EAAA,CAAa,CACpD,SAAU,CAAC,EACX,YAAa,SACb,gBAAiB,iBACjB,cAAe,QACf,0BAA0B,CAC9B,EAAG,EAAkB,GAAG,CAAC,CAAC,EAAU,KAChC,IAAI,EACJ,GAAM,CAAC,EAAG,EAAE,CAAG,EAAS,KAAK,CAAC,YAC9B,AAAK,EAAe,EAAhB,IAAsB,CACL,CADO,CACP,OAAK,CAAC,aAAa,CAAC,KAAM,CAC3C,IAAK,EACL,IAAK,AAAQ,SAAS,QAAyB,EAC/C,SAAU,CAAC,EACX,IAAK,EACL,UAAW,EACX,uBAAuB,EACvB,oBAAqB,EACrB,kBAAmB,EACnB,kBAAmB,EACnB,MAAO,CACH,uBAAwB,CAAA,EAAG,CAA6B,AAA5B,OAAC,EAAY,CAAO,CAAC,EAAE,AAAF,EAAc,KAAK,EAAI,EAAU,MAAA,AAAM,GAAK,EAAE,EAAE,CAAC,CAClG,UAAW,GAAG,KACd,OAD0B,CACjB,CADmB,AACnB,CADoB,CACjB,EAAI,EAAE,CAAC,CACnB,GAAG,CAAK,CACR,GAhRhB,AAgRmB,SAhRV,AAAa,CAAa,CAAE,CAAY,EAC7C,IAAM,EAAS,CAAC,EAqChB,MApCA,CACI,EACA,EACH,CAAC,OAAO,CAAC,CAAC,EAAQ,KACf,IAAM,EAAW,AAAU,MACrB,EAAS,EAAW,kBAAoB,WACxC,EAAe,EA5aE,OAFP,EA8agB,KAChC,SAAS,EAAU,CAAM,EACrB,CACI,KAHiD,CAIjD,QACA,SACA,OACH,CAAC,OAAO,CAAC,AAAC,IACP,CAAM,CAAC,CAAA,EAAG,EAAO,CAAC,EAAE,EAAA,CAAK,CAAC,CAAqB,UAAlB,OAAO,EAAsB,CAAA,EAAG,EAAO,EAAE,CAAC,CAAG,CAC9E,EACJ,CACsB,UAAlB,OAAO,GAAuB,AAAkB,UAAU,OAArB,EACrC,EAAU,GACe,UAAlB,AAA4B,OAArB,EACd,CACI,MACA,QACA,SACA,OACH,CAAC,OAAO,CAAC,AAAC,SACa,IAAhB,CAAM,CAAC,EAAI,CACX,CAAM,CAAC,AADoB,CACpB,EAAG,EAAO,CAAC,EAAE,EAAA,CAAK,CAAC,CAAG,EAE7B,CAAM,CAAC,CAAA,EAAG,EAAO,CAAC,EAAE,EAAA,CAAK,CAAC,CAA0B,UAAvB,OAAO,CAAM,CAAC,EAAI,CAAgB,CAAA,EAAG,CAAM,CAAC,EAAI,CAAC,EAAE,CAAC,CAAG,CAAM,CAAC,EAEnG,AAFuG,GAIvG,EAAU,EAElB,GACO,CACX,EAyOgC,EAAQ,EAAa,AACzC,EACA,OAAQ,AAAC,IACD,EAAiB,OAAO,EAAI,CAAC,EAAM,aAAa,CAAC,QAAQ,CAAC,EAAM,aAAa,GAAG,CAChF,EAAiB,OAAO,EAAG,EACvB,EAAsB,OAAO,EAAE,CAC/B,EAAsB,OAAO,CAAC,KAAK,CAAC,CAChC,eAAe,CACnB,GACA,EAAsB,OAAO,CAAG,MAG5C,EACA,QAAS,AAAC,MACmB,EAAM,MAAM,YAAY,aAAoD,UAArC,EAAM,MAAM,CAAC,OAAO,CAAC,WAAW,AAAK,IAEhG,EAAiB,OAAO,EAAE,CAC3B,EAAiB,OAAO,EAAG,EAC3B,EAAsB,OAAO,CAAG,EAAM,aAAa,EAE3D,EACA,aAAc,IAAI,GAAY,GAC9B,YAAa,IAAI,GAAY,GAC7B,aAAc,KAEL,AAAD,GACA,GAAY,EAEpB,EACA,GAJsB,OAIX,IAAI,GAAY,GAC3B,cAAe,AAAC,IACa,EAAM,MAAM,YAAY,aAAoD,UAArC,EAAM,MAAM,CAAC,OAAO,CAAC,WAAW,EAEhG,GAAe,EACnB,EACA,YAAa,IAAI,GAAe,EACpC,EAAG,EAAe,MAAM,CAAC,AAAC,GAAQ,CAAC,EAAM,QAAQ,EAAc,IAAV,GAAe,EAAM,QAAQ,GAAK,GAAU,GAAG,CAAC,CAAC,EAAO,KACzG,IAAI,EAAwB,EAC5B,OAAO,AAAc,EAAA,OAAK,CAAC,CAAT,YAAsB,CAAC,EAAO,CAC5C,IAAK,EAAM,EAAE,CACb,MAAO,EACP,MAAO,EACP,MAAO,EACP,kBAAmB,EACnB,SAAU,AAAoF,OAAnF,EAAyC,MAAhB,EAAuB,KAAK,EAAI,EAAa,QAAA,AAAQ,EAAY,EAAyB,EAC9H,UAA2B,MAAhB,EAAuB,KAAK,EAAI,EAAa,SAAS,CACjE,qBAAsC,MAAhB,EAAuB,KAAK,EAAI,EAAa,oBAAoB,CACvF,OAAQ,EACR,cAAe,EACf,YAAa,AAA0F,OAAzF,EAA4C,MAAhB,EAAuB,KAAK,EAAI,EAAa,WAAA,AAAW,EAAY,EAA4B,EAC1I,YAAa,EACb,SAAU,EACV,MAAuB,MAAhB,EAAuB,KAAK,EAAI,EAAa,KAAK,CACzD,SAA0B,MAAhB,EAAuB,KAAK,EAAI,EAAa,QAAQ,CAC/D,WAA4B,MAAhB,EAAuB,KAAK,EAAI,EAAa,UAAU,CACnE,kBAAmB,AAAgB,QAAO,KAAK,EAAI,EAAa,iBAAiB,CACjF,kBAAmC,MAAhB,EAAuB,KAAK,EAAI,EAAa,iBAAiB,CACjF,qBAAsB,AAAgB,QAAO,KAAK,EAAI,EAAa,oBAAoB,CACvF,YAAa,EACb,OAAQ,EAAe,MAAM,CAAC,AAAC,GAAI,EAAE,QAAQ,EAAI,EAAM,QAAQ,EAC/D,QAAS,EAAQ,MAAM,CAAC,AAAC,GAAI,EAAE,QAAQ,EAAI,EAAM,QAAQ,EACzD,WAAY,EACZ,gBAAiB,EACjB,IAAK,EACL,SAAU,EACV,gBAAiB,EAAM,eAAe,AAC1C,EACJ,IAnFmC,IAoFvC,GACJ,GCrpCA,IAAA,EAAA,EAAA,CAAA,CAAA,OAQe,SAAS,EAAa,MAAE,CAAI,UAAE,CAAQ,MAAE,EAAO,WAAW,CAAqB,EAC1F,MACI,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAW,CAAC,eAAe,EAAE,EAAA,CAAM,WAEpC,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,OAAK,CAAA,CACF,MAAO,GACP,OAAQ,GACR,IAAK,IAAI,eAAe,CAAC,GACzB,IAAK,UACL,UAAW,CAAC,2EAA2E,EAAE,EAAA,CAAM,GAKnG,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CACG,UAAU,mLAIV,QAAS,WACZ,aAKb,CCJA,IAAM,EAA0B,CAC5B,4BACA,WACA,OACA,aACA,WACA,SACA,MACA,aACA,QACA,MACA,MACH,CAEK,EAAY,CAAC,gBAAiB,cAAc,CAC5C,EAAY,CACd,gBACA,kBACA,eACA,gBACA,cACA,yBACA,wBACA,eACA,eACA,+BACA,yBACA,cACA,gBACA,iBACA,gBACA,uBACA,mBACA,iCACA,8BACA,wBACA,4BACH,CAEc,SAAS,EAAY,MAAE,CAAI,SAAE,CAAO,QAAE,CAAM,CAAS,EAChE,GAAM,CAAC,EAAQ,EAAU,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EAA2C,CAAC,GAkB1E,EAAe,AAAC,IAClB,GAAM,MAAE,CAAI,OAAE,CAAK,CAAE,CAAG,EAAE,MAAM,CAChC,EAAQ,CACJ,CAAC,EAAK,CAAE,CACZ,GAEA,EAAU,AAAC,IAAU,CAAE,EAAH,CAAM,CAAI,CAAE,CAAC,EAAK,MAAE,CAAU,CAAC,EACvD,EAEM,EAAmB,AAAC,IACtB,GAAM,MAAE,CAAI,OAAE,CAAK,CAAE,CAAG,EAAE,MAAM,CAC3B,IACD,AAAS,GADD,YACgB,GACxB,EAAQ,CAAE,YAAa,CAAK,CAAC,EAAE,AAAC,GAChB,cAAc,CAAvB,GACP,EAAQ,CAAE,WAAY,MAAM,IAAI,CAAC,EAAO,GAEhD,EAqCA,MACI,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,gEACX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iBACX,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,iDAAwC,wBACtD,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,yBAAgB,iEAGjC,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,kDAEX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,gBAC5C,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEhD,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,OACL,MAAO,EAAK,IAAI,CAChB,SAAU,EACV,YAAY,0BACZ,UAAU,gIAEb,EAAO,IAAI,EACR,CAAA,EAAA,EAAA,IAAA,EAAC,IAAA,CAAE,UAAU,yDACT,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,UAAU,KAAK,eAAe,QAAQ,qBACjD,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,SAAS,UAAU,EAAE,oHAAoH,SAAS,cAE3J,EAAO,IAAI,OAMxB,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,kBAC1C,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAElD,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,gBACL,MAAO,EAAK,aAAa,CACzB,SAAU,EACV,YAAY,uBACZ,UAAU,gIAEb,EAAO,aAAa,EACjB,CAAA,EAAA,EAAA,IAAA,EAAC,IAAA,CAAE,UAAU,yDACT,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,UAAU,KAAK,eAAe,QAAQ,qBACjD,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,SAAS,UAAU,EAAE,oHAAoH,SAAS,cAE3J,EAAO,aAAa,OAMjC,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CAAM,UAAU,qDAA4C,eAC7D,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,YACL,MAAO,EAAK,SAAS,CACrB,SAAU,EACV,YAAY,8BACZ,UAAU,mIAKlB,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,uBACrC,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEvD,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,aACL,KAAK,SACL,IAAI,IACJ,MAAO,EAAK,UAAU,CACtB,SAAU,EACV,YAAY,iCACZ,UAAU,gIAEb,EAAO,UAAU,EACd,CAAA,EAAA,EAAA,IAAA,EAAC,IAAA,CAAE,UAAU,yDACT,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,UAAU,KAAK,eAAe,QAAQ,qBACjD,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,SAAS,UAAU,EAAE,oHAAoH,SAAS,cAE3J,EAAO,UAAU,OAM9B,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,aAC/C,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAE7C,CAAA,EAAA,EAAA,IAAA,EAAC,SAAA,CACG,KAAK,WACL,MAAO,EAAK,QAAQ,CACpB,SAAU,EACV,UAAU,iJAEV,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CAAO,MAAM,YAAG,0BAChB,EAAU,GAAG,CAAC,AAAC,GACZ,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CAAe,MAAO,WAClB,EAAE,OAAO,CAAC,KAAM,MADR,OAKpB,EAAO,QAAQ,EACZ,CAAA,EAAA,EAAA,IAAA,EAAC,IAAA,CAAE,UAAU,yDACT,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,UAAU,KAAK,eAAe,QAAQ,qBACjD,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,SAAS,UAAU,EAAE,oHAAoH,SAAS,cAE3J,EAAO,QAAQ,OAM5B,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,aAC/C,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAE7C,CAAA,EAAA,EAAA,IAAA,EAAC,SAAA,CACG,KAAK,WACL,MAAO,EAAK,QAAQ,CACpB,SAAU,EACV,UAAU,iJAEV,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CAAO,MAAM,YAAG,qBAChB,EAAU,GAAG,CAAC,AAAC,GACZ,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CAAe,MAAO,WAClB,EAAE,OAAO,CAAC,KAAM,MADR,OAKpB,EAAO,QAAQ,EACZ,CAAA,EAAA,EAAA,IAAA,EAAC,IAAA,CAAE,UAAU,yDACT,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,UAAU,KAAK,eAAe,QAAQ,qBACjD,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,SAAS,UAAU,EAAE,oHAAoH,SAAS,cAE3J,EAAO,QAAQ,UAOhC,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,2BACX,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CAAM,UAAU,qDAA4C,kBAC7D,CAAA,EAAA,EAAA,GAAA,EAAC,WAAA,CACG,KAAK,eACL,MAAO,EAAK,YAAY,CACxB,SAAU,EACV,YAAY,4EACZ,KAAM,EACN,UAAU,mJAKF,eAAf,EAAK,QAAQ,EACd,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,2BACX,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CAAM,UAAU,qDAA4C,+BAG7D,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,iCAAwB,iDACrC,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,gEACV,EAAwB,GAAG,CAAC,AAAC,GAC1B,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAiB,UAAU,4HACxB,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,WACL,QAAS,EAAK,cAAc,EAAE,SAAS,KAAS,EAChD,SAAU,IAAM,CA9M5C,SAA0B,AAAjB,CAA6B,EAElC,IAAM,EAAQ,EAAK,cAAc,EAAI,EAAE,CAQvC,EAAQ,CAAE,eAPE,AAEK,CAKS,CAPR,QAAQ,CAAC,GAGrB,EAAM,MAAM,CAAC,AAAC,GAAM,IAAM,GAC1B,IAAI,EAAO,EAAK,AAGa,GACvC,EAmM6D,GACjC,UAAU,kFAEd,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,6CAAqC,MAP7C,SAcxB,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,uDAGX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBAIX,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CAAM,UAAU,qDAA4C,iBAC7D,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,0GACX,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,OACL,KAAK,cAEL,OAAO,UACP,SAAU,EACV,UAAU,qLAEd,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,sCAA6B,0BAE7C,EAAK,WAAW,EACb,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,gBACX,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,CACG,KAAK,YACL,KAAM,EAAK,WAAW,CACtB,SAAU,IAAM,EAAQ,CAAE,GAAG,CAAI,CAAE,YAAa,IAAK,UAOrE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBAIX,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CAAM,UAAU,qDAA4C,gBAC7D,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,0GACX,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,OACL,KAAK,aACL,OAAO,UACP,QAAQ,CAAA,CAAA,EACR,SAAU,EACV,UAAU,qLAEd,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,sCAA6B,8CAE7C,EAAK,UAAU,EAAE,OAAS,GACvB,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,uCACV,EAAK,UAAU,CAAC,GAAG,CAAC,CAAC,EAAM,IACxB,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,CAEG,KAAM,EACN,KAAK,YACL,SAAU,KACN,IAAM,EAAU,EAAK,UAAU,CAAC,MAAM,CAAC,CAAC,EAAG,IAAM,IAAM,GACvD,EAAQ,CAAE,GAAG,CAAI,CAAE,WAAY,CAAQ,EAC3C,GANK,YAgB7B,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,2BACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,YAChD,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAE5C,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,oCACX,CAAA,EAAA,EAAA,IAAA,EAAC,SAAA,CACG,KAAK,SACL,QAtRO,CAsRE,IArRzB,GAAI,CAAC,UAAU,WAAW,CAAE,YACxB,MAAM,6BAGV,UAAU,WAAW,CAAC,kBAAkB,CACpC,AAAC,IACG,EAAQ,CAAE,SAAU,CAAE,SAAU,EAAI,MAAM,CAAC,QAAQ,CAAE,UAAW,EAAI,MAAM,CAAC,SAAS,AAAC,CAAE,GACvF,EAAU,AAAC,IAAU,CAAE,EAAH,CAAM,CAAI,CAAE,cAAU,EAAU,CAAC,CACzD,EACC,AAAD,IACI,QAAQ,KAAK,CAAC,iBAAkB,GAChC,MAAM,2BACV,EAER,EAwQoB,UAAU,mPAEV,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,UAAU,KAAK,OAAO,OAAO,eAAe,QAAQ,sBAC/D,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,cAAc,QAAQ,eAAe,QAAQ,YAAa,EAAG,EAAE,uFACrE,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,cAAc,QAAQ,eAAe,QAAQ,YAAa,EAAG,EAAE,wCACnE,2BAGT,EAAK,QAAQ,EACV,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,6FACX,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,yBAAyB,KAAK,eAAe,QAAQ,qBAChE,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,SAAS,UAAU,EAAE,wIAAwI,SAAS,cAEhL,CAAA,EAAA,EAAA,IAAA,EAAC,OAAA,CAAK,UAAU,+CAAqC,aAC1C,EAAK,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,KAAG,EAAK,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,YAK3F,EAAO,QAAQ,EACZ,CAAA,EAAA,EAAA,IAAA,EAAC,IAAA,CAAE,UAAU,yDACT,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,UAAU,KAAK,eAAe,QAAQ,qBACjD,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,SAAS,UAAU,EAAE,oHAAoH,SAAS,cAE3J,EAAO,QAAQ,OAM5B,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,gEACX,CAAA,EAAA,EAAA,IAAA,EAAC,SAAA,CACG,KAAK,SACL,QAvSM,CAuSG,IAtSjB,CAjES,KAEb,IAAM,EA+DU,AA/DY,CAAC,CACzB,CAAC,EAAK,IAAI,CAAC,IAAI,KAAI,EAAK,IAAI,CAAG,0BAAA,EAC9B,AAAD,EAAM,aAAa,CAAC,IAAI,KAAI,EAAK,aAAa,CAAG,yBAAA,EACjD,AAAC,EAAK,QAAQ,CAAC,IAAI,KAAI,EAAK,QAAQ,CAAG,oBAAA,EACvC,AAAC,EAAK,QAAQ,CAAC,IAAI,KAAI,EAAK,QAAQ,CAAG,oBAAA,EAC3C,IAAM,EAAK,OAAO,EAAK,UAAU,EAMjC,OALI,MAAM,IAAO,IAAM,IAAG,EAAK,UAAU,CAAG,+BAAA,EAExC,AAAC,EAAK,QAAQ,GAAE,EAAK,QAAQ,CAAG,sBAAA,EAEpC,EAAU,GAC0B,IAA7B,OAAO,IAAI,CAAC,GAAM,MAAM,CACnC,KAoDQ,GAER,EAoSgB,UAAU,2QACb,wBAEG,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,UAAU,KAAK,OAAO,OAAO,eAAe,QAAQ,qBAC/D,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,cAAc,QAAQ,eAAe,QAAQ,YAAa,EAAG,EAAE,sCAM7F,CChbO,SAAS,EAAuC,OACI,CAAK,SACL,CAAO,OACP,CAAK,UACL,CAAQ,CACc,EAC7E,GAAM,CAAC,EAAO,EAAS,CAAG,CAAA,EAAA,EAAA,QAAQ,AAAR,EAAS,IAC7B,CAAC,EAAQ,EAAU,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,GAAC,GAe/B,EAAkB,EAAQ,MAAM,CACjC,AAAD,GACI,EAAI,QAAQ,GAAG,WAAW,GAAG,QAAQ,CAAC,EAAM,WAAW,KACvD,CAAC,EAAM,QAAQ,CAAC,IAGxB,MACI,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,+BACX,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CAAM,UAAU,qDAA6C,IAG9D,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,qCACV,EAAM,GAAG,CAAC,AAAC,GACR,CAAA,EAAA,EAAA,IAAA,EAAC,OAAA,CAEG,UAAU,2FAErB,EACW,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAAS,IAAM,CAxBnC,EAAS,EAAM,MAAM,CAAC,AAAC,GAAM,IAwBmB,EAxBb,GAyBf,UAAU,2CACb,QARI,EAAK,QAAQ,OAgB9B,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,OACL,MAAO,EACP,SAAU,AAAC,IACP,EAAS,EAAE,MAAM,CAAC,KAAK,EACvB,GAAU,EACd,EACA,QAAS,IAAM,GAAU,GACzB,OAAQ,IAAM,WAAW,IAAM,GAAU,GAAQ,KACjD,YAAY,oBACZ,UAAU,uCAIb,GACG,CAAA,EAAA,EAAA,IAAA,EAAC,KAAA,CAAG,UAAU,iGACT,EAAgB,GAAG,CAAC,AAAC,GAClB,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAEG,QAAS,IAAM,CA7D/B,CAAC,EAAM,QAAQ,CAAC,IAChB,EAAS,CADc,GACV,EA4D4B,EA5DhB,EAE7B,EAAS,IACT,GAAU,IA0DU,UAAU,sDAET,GAJI,EAAI,QAAQ,KAOG,IAA3B,EAAgB,MAAM,EACnB,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,mCAA0B,oBAMhE,CK9EA,IAAM,EAAyD,CAC3D,SACA,YACA,MACA,QACA,OACA,WACA,aACH,CAEK,EAA4C,CAAC,UAAW,aAAa,CiBJ9D,EAA2D,CAEpE,cpBbqD,CAAC,AoBavC,WpBbwC,CAAS,CAAE,cAAY,UAAE,CAAQ,CAClC,GAKlD,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iFACX,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,+CAAsC,2BAGpD,CAAA,EAAA,EAAA,IAAA,EAAC,IAAA,CAAE,UAAU,0BAAgB,OACrB,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,uBAAc,0BAA4B,iHoBG1E,gBnBXgE,CAAC,AmBWjD,WnBVyC,CAAS,cACT,CAAY,UACZ,CAAQ,CACX,IACtD,GAAM,CAAC,EAAU,EAAY,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EACpC,GAAa,CACT,4BAA6B,cAC7B,UAAW,EACX,WAAY,SACZ,aAAc,CAClB,GAGE,CAAC,EAAQ,EAAU,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EAAyB,CAAC,GAoBxD,EAAe,CAA6C,EAAU,KAExE,EAAY,CAAE,GAAG,CAAQ,CAAE,CAAC,EAAM,CAAE,CAAM,GACtC,CAAM,CAAC,EAAM,EAAE,AACf,EAAU,AAAC,IAAU,CAAE,EAAH,CAAM,CAAI,CAAE,CAAC,EAAM,CAAE,GAAG,CAAC,CAErD,EAgBA,MACI,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,qEACX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,8CACX,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,+CAAsC,gCAGpD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAAS,EACT,UAAU,yFACV,MAAM,kBAEN,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CACG,UAAU,UACV,KAAK,OACL,OAAO,eACP,QAAQ,qBAER,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CACG,cAAc,QACd,eAAe,QACf,YAAa,EACb,EAAE,gCAMlB,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,kDAEX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,mBACzC,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEnD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,MAAO,EAAS,2BAA2B,CAC3C,SAAU,AAAC,GACP,EACI,8BACA,EAAE,MAAM,CAAC,KAAK,EAGtB,UAAU,uIAnFT,AAqFA,CArFC,cAAe,gBAAiB,eAAe,CAqFnC,GAAG,CAAC,AAAC,GACf,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CAAkB,MAAO,WACrB,GADQ,MAKpB,EAAO,2BAA2B,EAC/B,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCACR,EAAO,2BAA2B,MAM/C,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,mBACzC,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEnD,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,SACL,IAAI,IACJ,MAAO,EAAS,SAAS,CACzB,SAAU,AAAC,GAAM,EAAa,YAAa,OAAO,EAAE,MAAM,CAAC,KAAK,GAChE,UAAU,gIAEb,EAAO,SAAS,EACb,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,SAAS,MAK7D,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,aAC/C,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAE7C,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,MAAO,EAAS,UAAU,CAC1B,SAAU,AAAC,GACP,EACI,aACA,EAAE,MAAM,CAAC,KAAK,EAGtB,UAAU,uIAET,AAjIH,CAAC,SAAU,eAAgB,qBAAqB,CAiInC,GAAG,CAAC,AAAC,GACZ,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CAAe,MAAO,WAClB,GADQ,MAKpB,EAAO,UAAU,EACd,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,UAAU,MAK9D,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,sBACtC,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEtD,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,SACL,IAAI,IACJ,MAAO,EAAS,YAAY,CAC5B,SAAU,AAAC,GACP,EAAa,eAAgB,OAAO,EAAE,MAAM,CAAC,KAAK,GAEtD,UAAU,gIAEb,EAAO,YAAY,EAChB,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,YAAY,SAMpE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iEACX,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAAS,EACT,UAAU,sGACb,WAGD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAhJK,CAgJI,IA/IjB,CAzBS,KACb,IAAM,EAwBU,AAxB0B,CAAC,EAW3C,OATI,AAAC,EAAS,2BAA2B,GACrC,EAAU,2BAA2B,CAAG,UAAA,GACxC,CAAC,EAAS,SAAS,EAAI,EAAS,SAAS,EAAI,KAC7C,EAAU,SAAS,CAAG,wBAAA,EACtB,AAAC,EAAS,UAAU,EAAE,GAAU,UAAU,CAAG,UAAA,GAC7C,CAAC,EAAS,YAAY,EAAI,EAAS,YAAY,GAAI,IACnD,EAAU,YAAY,CAAG,2BAAA,EAE7B,EAAU,GACH,AAAkC,WAA3B,IAAI,CAAC,GAAW,MAAM,CACxC,MAaQ,EAAa,GACb,EAAY,CACR,4BAA6B,cAC7B,UAAW,EACX,WAAY,SACZ,aAAc,CAClB,GACA,IAER,EAsIgB,UAAU,wGACb,qBAMjB,EmBvLI,alBZkD,CkBYrC,AlBZsC,WACkB,CAAS,cACT,CAAY,UACZ,CAAQ,CACX,IAClE,GAAM,CAAC,EAAU,EAAY,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EACpC,GAAa,CACT,YAAa,YACb,WAAY,SACZ,aAAc,CAClB,GAGE,CAAC,EAAQ,EAAU,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EAAyB,CAAC,GA6BxD,EAAe,CAAsC,EAAU,KAEjE,EAAY,CAAE,GAAG,CAAQ,CAAE,CAAC,EAAM,CAAE,CAAM,GACtC,CAAM,CAAC,EAAM,EAAE,AACf,EAAU,AAAC,IAAU,CAAE,EAAH,CAAM,CAAI,CAAE,CAAC,EAAM,CAAE,GAAG,CAAC,CAErD,EAeA,MACI,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,qEACX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,8CACX,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,+CAAsC,wBAGpD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAAS,EACT,UAAU,yFACV,MAAM,kBAEN,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CACG,UAAU,UACV,KAAK,OACL,OAAO,eACP,QAAQ,qBAER,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CACG,cAAc,QACd,eAAe,QACf,YAAa,EACb,EAAE,gCAMlB,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,kDAEX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,gBAC5C,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEhD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,MAAO,EAAS,WAAW,CAC3B,SAAU,AAAC,GACP,EACI,cACA,EAAE,MAAM,CAAC,KAAK,EAGtB,UAAU,uIAET,AA7FqC,CACtD,YACA,cACA,eACA,uBACA,qBACA,kBACA,iBACA,QACH,CAoFiC,GAAG,CAAC,AAAC,GACf,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CAAkB,MAAO,WACrB,GADQ,MAKpB,EAAO,2BAA2B,EAC/B,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCACR,EAAO,2BAA2B,MAM/C,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,aAC/C,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAE7C,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,MAAO,EAAS,UAAU,CAC1B,SAAU,AAAC,GACP,EACI,aACA,EAAE,MAAM,CAAC,KAAK,EAGtB,UAAU,uIAET,AA/GiC,CAClD,SACA,eACA,qBACH,CA2G8B,GAAG,CAAC,AAAC,GACZ,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CAAe,MAAO,WAClB,GADQ,MAKpB,EAAO,UAAU,EACd,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,SAAS,MAK7D,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,sBACtC,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEtD,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,SACL,IAAI,IACJ,MAAO,EAAS,YAAY,CAC5B,SAAU,AAAC,GAAM,EAAa,eAAgB,OAAO,EAAE,MAAM,CAAC,KAAK,GACnE,UAAU,gIAEb,EAAO,UAAU,EACd,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,UAAU,SAQlE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iEACX,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAAS,EACT,UAAU,sGACb,WAGD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QA9HK,CA8HI,IA7HjB,CArBS,KACb,IAAM,EAoBU,AApB0B,CAAC,EAO3C,OANQ,AAAC,EAAS,WAAW,GAAE,EAAU,WAAW,CAAG,0BAAA,EAC/C,AAAC,EAAS,UAAU,GAAE,EAAU,UAAU,CAAG,uBAAA,EAC7C,EAAC,EAAS,YAAY,EAAI,EAAS,YAAY,GAAI,GAAG,CACtD,EAAU,YAAY,CAAG,2CAAA,EAEjC,EAAU,GAC+B,IAAlC,OAAO,IAAI,CAAC,GAAW,MAAM,CACxC,MAaQ,EAAa,GACb,EAAY,CACR,YAAa,YACb,WAAY,SACZ,aAAc,CAClB,GACA,IAER,EAqHgB,UAAU,wGACb,qBAMjB,EkB5KI,crBRoD,CAAC,AqBQtC,WrBP0C,CAAS,cACT,CAAY,UACZ,CAAQ,CACX,IACtD,GAAM,CAAC,EAAU,EAAY,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EAAsB,GAAa,CACvE,SAAU,EACV,MAAO,EAAE,CACT,YAAa,GACb,gBAAiB,EAAE,CACnB,qBAAsB,EACtB,mBAAoB,GACpB,WAAY,EAAE,CACd,aAAc,GACd,aAAc,CAClB,GAEM,CAAC,EAAQ,EAAU,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EAAyB,CAAC,GAoFxD,EAAc,CAAuC,EAAU,KAGjE,EADgB,CAAE,GAAG,CAAQ,CAAE,CAAC,EAAM,CAAE,AAC5B,CADkC,GAG1C,CAAM,CAAC,EAAM,EAAE,AACf,EAAU,IAAS,CAAE,EAAH,CAAM,CAAI,CAAE,CAAC,EAAM,CAAE,GAAG,CAAC,CAGnD,QAEA,CAAA,EAAA,EAAA,SAAA,AAAS,EAAC,KAEV,EAAG,CAAC,EAAS,KAAK,CAAC,EAuBf,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,qEAEX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,8CACX,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,+CAAsC,yBAGpD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAAS,EACT,UAAU,yFACV,MAAM,kBAEN,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,UAAU,KAAK,OAAO,OAAO,eAAe,QAAQ,qBAC/D,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,cAAc,QAAQ,eAAe,QAAQ,YAAa,EAAG,EAAE,gCAKjF,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,kDAEX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,YAChD,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAE5C,CAAA,EAAA,EAAA,IAAA,EAAC,SAAA,CACG,MAAO,EAAS,QAAQ,EAAI,GAC5B,SAAW,AAAD,GAAO,EAAa,WAAY,OAAO,EAAE,MAAM,CAAC,KAAK,GAC/D,UAAU,wIAEV,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CAAO,MAAM,YAAG,oBAChB,AApJG,CACpB,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAClD,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACtD,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACtD,KAAM,KACT,CA+IoC,GAAG,CAAC,GACjB,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CAAe,MAAO,WAAI,GAAd,OAGpB,EAAO,QAAQ,EACZ,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,QAAQ,MAK5D,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,gBAC5C,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEhD,CAAA,EAAA,EAAA,IAAA,EAAC,SAAA,CACG,MAAO,EAAS,WAAW,CAC3B,SAAU,AAAC,GAAM,EAAa,cAAe,EAAE,MAAM,CAAC,KAAK,EAC3D,UAAU,wIAEV,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CAAO,MAAM,YAAG,wBAChB,AA5JA,CACjB,gBACA,sBACA,4BACA,kBACA,UACA,QACA,WACA,iBACH,CAmJiC,GAAG,CAAC,GACd,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CAAkB,MAAO,WAAO,GAApB,OAGpB,EAAO,WAAW,EACf,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,WAAW,MAK/D,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,iBAC3C,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEjD,CAAA,EAAA,EAAA,IAAA,EAAC,SAAA,CACG,MAAO,EAAS,YAAY,CAC5B,SAAU,AAAC,GAAM,EAAa,eAAgB,EAAE,MAAM,CAAC,KAAK,EAC5D,UAAU,wIAEV,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CAAO,MAAM,YAAG,yBA/If,AAgJD,CA/IjB,cAAe,SAAU,aAAc,SAAU,iBACjD,MAAO,SAAU,WAAY,WAAY,UAAW,QACpD,UAAW,UAAW,QAAS,SAAU,QAC5C,CA4IkC,GAAG,CAAC,GACf,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CAAmB,MAAO,WAAQ,GAAtB,OAGpB,EAAO,YAAY,EAChB,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,YAAY,MAKhE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,sBACtC,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEtD,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,SACL,IAAI,IACJ,MAAO,EAAS,YAAY,EAAI,GAChC,SAAU,AAAC,GAAM,EAAa,eAAgB,OAAO,EAAE,MAAM,CAAC,KAAK,GACnE,UAAU,8HACV,YAAY,6BAEf,EAAO,YAAY,EAChB,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,YAAY,MAKhE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,0BAClC,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAE1D,CAAA,EAAA,EAAA,IAAA,EAAC,SAAA,CACG,MAAO,EAAS,oBAAoB,EAAI,GACxC,SAAU,AAAC,GAAM,EAAa,uBAAwB,OAAO,EAAE,MAAM,CAAC,KAAK,GAC3E,UAAU,wIAEV,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CAAO,MAAM,YAAG,0BAChB,AAzLQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAI,CAyLtB,GAAG,CAAC,GACtB,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CAAmB,MAAO,WAAQ,GAAtB,OAGpB,EAAO,oBAAoB,EACxB,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,oBAAoB,MAKxE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,wBACpC,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAExD,CAAA,EAAA,EAAA,IAAA,EAAC,SAAA,CACG,MAAO,EAAS,kBAAkB,CAClC,SAAU,AAAC,GAAM,EAAa,qBAAsB,EAAE,MAAM,CAAC,KAAK,EAClE,UAAU,wIAEV,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CAAO,MAAM,YAAG,uBA3MT,AA4MP,CA5MQ,UAAW,aAAa,CA4MZ,GAAG,CAAC,GACrB,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CAAkB,MAAO,WAAO,GAApB,OAGpB,EAAO,kBAAkB,EACtB,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,kBAAkB,MAKtE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,CACG,MAAM,kBACN,QAxNF,CAAC,AAwNU,SAxNA,eAAgB,qBAAqB,CAyN9C,MAAO,EAAS,UAAU,CAC1B,SAAU,AAAC,GAAa,EAAa,aAAc,KAEtD,EAAO,UAAU,EAAI,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,kCAA0B,EAAO,UAAU,MAK1E,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAW,YACZ,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,CAEG,MAAM,mBACN,QAzPG,CAC3B,AAwPiC,gBAvPjC,eACA,gBACA,gBACA,UACA,wBACA,mBACA,aACA,oBACA,UACA,eACA,cACA,eACA,SACA,UACH,CA0O2B,MAAO,EAAS,eAAe,EAAI,EAAE,CACrC,SAAU,AAAC,GAAa,EAAa,kBAAmB,UAQ5E,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,wBACX,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,CACG,MAAM,UACN,QAAS,AAtRJ,CACjB,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACnD,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACzD,CAmRqC,GAAG,CAAC,QAC1B,MAAO,EAAS,KAAK,CACrB,SAAU,AAAC,GAAa,EAAa,QAAS,KAEjD,EAAO,KAAK,EAAI,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,KAAK,MAOtE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iEACX,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAAS,EACT,UAAU,sGACb,WAGD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAjNK,CAiNI,IAhNjB,CAhDS,KACb,IAAM,EAAoC,AA+C1B,CA/C2B,EA4B3C,OA1BI,AAAC,EAAS,QAAQ,EAA0B,GAAG,CAAzB,EAAS,QAAQ,GACvC,EAAU,QAAQ,CAAG,sBAAA,EAErB,AAAC,EAAS,KAAK,EAA8B,GAAG,CAA7B,EAAS,KAAK,CAAC,MAAM,GACxC,EAAU,KAAK,CAAG,qCAAA,EAElB,AAAC,EAAS,WAAW,EAAE,CACvB,EAAU,WAAW,CAAG,0BAAA,EAExB,AAAC,EAAS,oBAAoB,EAAsC,GAAG,CAArC,EAAS,oBAAoB,GAC/D,EAAU,oBAAoB,CAAG,4BAAA,EAEjC,AAAC,EAAS,kBAAkB,EAAE,CAC9B,EAAU,kBAAkB,CAAG,kCAAA,EAE/B,AAAC,EAAS,UAAU,EAAE,CACtB,EAAU,UAAU,CAAG,uBAAA,EAEvB,AAAC,EAAS,YAAY,EAAE,CACxB,EAAU,YAAY,CAAG,2BAAA,GAEzB,CAAC,EAAS,YAAY,EAAI,EAAS,YAAY,EAAG,GAAG,CACrD,EAAU,YAAY,CAAG,uCAAA,EAG7B,EAAU,GAC+B,IAAlC,OAAO,IAAI,CAAC,GAAW,MAAM,CACxC,MAmBQ,EAAa,GAEb,EAAY,CACR,SAAU,EACV,MAAO,EAAE,CACT,YAAa,GACb,gBAAiB,EAAE,CACnB,qBAAsB,EACtB,mBAAoB,GACpB,WAAY,EAAE,CACd,aAAc,GACd,aAAc,CAClB,GACA,IAER,EAiMgB,UAAU,wGACb,qBAMjB,EqBpUI,YjBAuC,CiBA3B,AjBA4B,WAAE,CAAS,cAAE,CAAY,UAAE,CAAQ,CAAE,IAC7E,GAAM,CAAC,EAAU,EAAY,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EACpC,GAAa,CACT,kBAAmB,SACnB,aAAc,CAClB,GAEE,CAAC,EAAQ,EAAU,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EAAyB,CAAC,GAExD,EAAc,CAAqC,EAAU,KAC/D,EAAY,AAAC,GAAU,EAAE,EAAH,CAAM,CAAI,CAAE,CAAC,EAAM,CAAE,EAAM,CAAC,EAC9C,CAAM,CAAC,EAAM,EAAE,EAAU,AAAC,IAAU,CAAE,EAAH,CAAM,CAAI,CAAE,CAAC,EAAM,CAAE,GAAG,CAAC,CACpE,EAoBA,MACI,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,+EAEX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,8CACX,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,+CAAsC,uBACpD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAAS,EACT,UAAU,yFACV,MAAM,kBAEN,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CACG,UAAU,UACV,KAAK,OACL,OAAO,eACP,QAAQ,qBAER,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,cAAc,QAAQ,eAAe,QAAQ,YAAa,EAAG,EAAE,gCAKjF,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,kDAEX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,gBAC5C,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEhD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,MAAO,EAAS,iBAAiB,CACjC,SAAW,AAAD,GAAO,EAAa,oBAAqB,EAAE,MAAM,CAAC,KAAK,EACjE,UAAU,uIAET,EAAa,GAAG,CAAE,AAAD,GACd,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CAAkB,MAAO,WACrB,GADQ,MAKpB,EAAO,iBAAiB,EAAI,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,iBAAiB,MAI9F,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CAAM,UAAU,qDAA4C,UAC7D,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,OACL,MAAO,EAAS,KAAK,EAAI,GACzB,SAAU,AAAC,GAAM,EAAa,QAAS,EAAE,MAAM,CAAC,KAAK,EACrD,UAAU,8HACV,YAAY,2BAKpB,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CAAM,UAAU,qDAA4C,qBAC7D,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,IAAK,EACL,KAAK,SACL,MAAO,EAAS,eAAe,EAAI,GACnC,SAAU,AAAC,GAAM,EAAa,kBAAmB,EAAE,MAAM,CAAC,KAAK,CAAG,OAAO,EAAE,MAAM,CAAC,KAAK,OAAI,GAC3F,UAAU,8HACV,YAAY,0BAKpB,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CAAM,UAAU,qDAA4C,qBAC7D,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,SACL,MAAO,EAAS,eAAe,EAAI,GACnC,SAAU,AAAC,GAAM,EAAa,kBAAmB,EAAE,MAAM,CAAC,KAAK,CAAG,OAAO,EAAE,MAAM,CAAC,KAAK,OAAI,GAC3F,UAAU,8HACV,YAAY,0BAMhB,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,kBACV,WAA/B,EAAS,iBAAiB,CAAe,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,MAAW,CAAA,EAAA,EAAA,GAAA,EAAA,EAAA,QAAA,CAAA,CAAA,MAEvG,CAAA,EAAA,EAAA,IAAA,EAAC,SAAA,CACG,SAAyC,WAA/B,EAAS,iBAAiB,CACpC,MAAO,EAAS,YAAY,EAAI,GAChC,SAAU,AAAC,GACP,EAAa,eAAgB,EAAE,MAAM,CAAC,KAAK,EAE/C,UAAU,wIAEV,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CAAO,MAAM,YAAG,uBAChB,EAAY,GAAG,CAAC,AAAC,GACd,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CAAe,MAAO,WAClB,GADQ,OAKpB,EAAO,YAAY,EAChB,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,YAAY,GAG3D,EAAO,YAAY,EAAI,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,YAAY,MAKxF,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,sBACtC,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEtD,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,SACL,IAAI,IACJ,MAAO,EAAS,YAAY,CAC5B,SAAU,AAAC,GAAM,EAAa,eAAgB,OAAO,EAAE,MAAM,CAAC,KAAK,GACnE,UAAU,8HACV,YAAY,6BAEf,EAAO,YAAY,EAAI,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,YAAY,SAKxF,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iEACX,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAAS,EACT,UAAU,sGACb,WAGD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QA/IK,CA+II,IA9IjB,CAZS,KACb,IAAM,EAAoC,AAW1B,CAX2B,EAO3C,OANI,AAAC,EAAS,iBAAiB,GAAE,EAAU,iBAAiB,CAAG,0BAAA,GAC3D,CAAC,EAAS,YAAY,EAAI,EAAS,YAAY,EAAG,IAClD,EAAU,YAAY,CAAG,6BAAA,EACM,WAA/B,CAA2C,CAAlC,iBAAiB,EAAkB,EAAS,YAAY,GACjE,EAAU,YAAY,CAAG,yBAAA,EAC7B,EAAU,GAC+B,IAAlC,OAAO,IAAI,CAAC,GAAW,MAAM,CACxC,MAIQ,EAAa,GACb,IAER,EA2IgB,UAAU,uGACb,qBAMjB,EiB/KI,uBhBDoE,CAAC,AgBC9C,WhBAkD,CAAS,cACT,CAAY,UACZ,CAAQ,CACX,IACtE,GAAM,CAAC,EAAU,EAAY,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EACpC,GAAa,CACT,YAAa,UACb,aAAc,UACd,iBAAkB,EAClB,aAAc,GACd,aAAc,CAClB,GAGE,CAAC,EAAQ,EAAU,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EAAyB,CAAC,GAuCxD,EAAe,CACjB,EACA,KAEA,EAAY,CAAE,GAAG,CAAQ,CAAE,CAAC,EAAM,CAAE,CAAM,GACtC,CAAM,CAAC,EAAM,EAAE,AACf,EAAU,AAAC,IAAU,CAAE,EAAH,CAAM,CAAI,CAAE,CAAC,EAAM,CAAE,GAAG,CAAC,CAErD,EAgBA,MACI,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,qEACX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,8CACX,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,+CAAsC,kCAGpD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAAS,EACT,UAAU,yFACV,MAAM,kBAEN,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CACG,UAAU,UACV,KAAK,OACL,OAAO,eACP,QAAQ,qBAER,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CACG,cAAc,QACd,eAAe,QACf,YAAa,EACb,EAAE,gCAMlB,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,kDAEX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,gBAC5C,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEhD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,MAAO,EAAS,WAAW,CAC3B,SAAU,AAAC,GACP,EACI,cACA,EAAE,MAAM,CAAC,KAAK,EAGtB,UAAU,uIAET,AAzG8C,CAC/D,UACA,QACA,eACA,kBACA,qBACA,UACA,UACA,qBACA,WACA,UACA,YACA,aACA,uBACH,CA2FiC,GAAG,CAAC,AAAC,GACf,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CAAkB,MAAO,WACrB,GADQ,MAKpB,EAAO,WAAW,EACf,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,WAAW,MAK/D,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,kBAC1C,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAElD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,MAAO,EAAS,YAAY,CAC5B,SAAU,AAAC,GACP,EACI,eACA,EAAE,MAAM,CAAC,KAAK,EAGtB,UAAU,uIAjHqC,AAmH9C,CAlHjB,UACA,aACH,CAgHgC,GAAG,CAAC,AAAC,GACd,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CAAe,MAAO,WAClB,GADQ,MAKpB,EAAO,YAAY,EAChB,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,YAAY,MAKhE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,uBACrC,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEvD,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,SACL,IAAI,IACJ,MAAO,EAAS,gBAAgB,CAChC,SAAU,AAAC,GACP,EAAa,mBAAoB,OAAO,EAAE,MAAM,CAAC,KAAK,GAE1D,UAAU,gIAEb,EAAO,gBAAgB,EACpB,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,gBAAgB,MAKpE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,iBAC3C,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEjD,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,OACL,MAAO,EAAS,YAAY,CAC5B,SAAU,AAAC,GAAM,EAAa,eAAgB,EAAE,MAAM,CAAC,KAAK,EAC5D,UAAU,gIAEb,EAAO,YAAY,EAChB,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,YAAY,MAKhE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,sBACtC,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEtD,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,SACL,IAAI,IACJ,MAAO,EAAS,YAAY,CAC5B,SAAU,AAAC,GACP,EAAa,eAAgB,OAAO,EAAE,MAAM,CAAC,KAAK,GAEtD,UAAU,gIAEb,EAAO,YAAY,EAChB,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,YAAY,SAMpE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iEACX,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAAS,EACT,UAAU,sGACb,WAGD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAjKK,CAiKI,IAhKjB,CA3BS,KACb,IAAM,EA0BU,AA1B0B,CAAC,EAY3C,OAVI,AAAC,EAAS,WAAW,GAAE,EAAU,WAAW,CAAG,UAAA,EAC9C,AAAD,EAAU,YAAY,GAAE,EAAU,YAAY,CAAG,UAAA,GACjD,CAAC,EAAS,gBAAgB,EAAI,EAAS,gBAAgB,EAAI,KAC3D,EAAU,gBAAgB,CAAG,wBAAA,EAC7B,AAAC,EAAS,YAAY,CAAC,IAAI,KAC3B,EAAU,YAAY,CAAG,2BAAA,GACzB,CAAC,EAAS,YAAY,EAAI,EAAS,YAAY,GAAI,IACnD,EAAU,YAAY,CAAG,2BAAA,EAE7B,EAAU,GAC+B,IAAlC,OAAO,IAAI,CAAC,GAAW,MAAM,CACxC,MAcQ,EAAa,GACb,EAAY,CACR,YAAa,UACb,aAAc,UACd,iBAAkB,EAClB,aAAc,GACd,aAAc,CAClB,GACA,IAER,EAsJgB,UAAU,uGACb,qBAMjB,EgBvOI,sBffkE,CAAC,Aee7C,WfdmD,CAAS,cACT,CAAY,UACZ,CAAQ,CACX,IACtE,GAAM,CAAC,EAAU,EAAY,CAAG,CAAA,EAAA,EAAA,QAAQ,AAAR,EAC5B,GAAa,CACT,YAAa,aACb,aAAc,UACd,iBAAkB,EAClB,aAAc,GACd,aAAc,CAClB,GAGE,CAAC,EAAQ,EAAU,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EAAyB,CAAC,GAqBxD,EAAe,CACjB,EACA,KAEA,EAAY,CAAE,GAAG,CAAQ,CAAE,CAAC,EAAM,CAAE,CAAM,GACtC,CAAM,CAAC,EAAM,EAAE,AACf,EAAU,AAAC,IAAU,CAAE,EAAH,CAAM,CAAI,CAAE,CAAC,EAAM,CAAE,EAAG,CAAC,EAErD,EAgBA,MACI,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,qEACX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,8CACX,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,+CAAsC,iCAGpD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAAS,EACT,UAAU,yFACV,MAAM,kBAEN,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CACG,UAAU,UACV,KAAK,OACL,OAAO,eACP,QAAQ,qBAER,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CACG,cAAc,QACd,eAAe,QACf,YAAa,EACb,EAAE,gCAMlB,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,kDAEX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,gBAC5C,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEhD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,MAAO,EAAS,WAAW,CAC3B,SAAU,AAAC,GACP,EACI,cACA,EAAE,MAAM,CAAC,KAAK,EAGtB,UAAU,uIAET,AAvFA,CAAC,aAAc,WAAY,aAAa,CAuF3B,GAAG,CAAC,AAAC,GACf,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CAAkB,MAAO,WACrB,GADQ,MAKpB,EAAO,WAAW,EACf,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,WAAW,MAK/D,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,kBAC1C,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAElD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,MAAO,EAAS,YAAY,CAC5B,SAAU,AAAC,GACP,EACI,eACA,EAAE,MAAM,CAAC,KAAK,EAGtB,UAAU,uIAET,AA/GD,CAAC,UAAW,aAAa,CA+GZ,GAAG,CAAC,AAAC,GACd,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CAAkB,MAAO,WACrB,GADQ,MAKpB,EAAO,YAAY,EAChB,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,YAAY,MAKhE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,uBACrC,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEvD,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,SACL,IAAI,IACJ,MAAO,EAAS,gBAAgB,CAChC,SAAW,AAAD,GACN,EAAa,mBAAoB,OAAO,EAAE,MAAM,CAAC,KAAK,GAE1D,UAAU,gIAEb,EAAO,gBAAgB,EACpB,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,gBAAgB,MAKpE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,iBAC3C,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEjD,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,OACL,MAAO,EAAS,YAAY,CAC5B,SAAU,AAAC,GAAM,EAAa,eAAgB,EAAE,MAAM,CAAC,KAAK,EAC5D,UAAU,gIAEb,EAAO,YAAY,EAChB,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,YAAY,MAKhE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,sBACtC,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEtD,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,SACL,IAAI,IACJ,MAAO,EAAS,YAAY,CAC5B,SAAU,AAAC,GACP,EAAa,eAAgB,OAAO,EAAE,MAAM,CAAC,KAAK,GAEtD,UAAU,gIAEb,EAAO,YAAY,EAChB,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,YAAY,SAMpE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iEACX,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAAS,EACT,UAAU,sGACb,WAGD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAjKK,CAiKI,IAhKjB,CA1BS,KACb,IAAM,EAyBU,AAzB0B,CAAC,EAW3C,OATK,AAAD,EAAU,WAAW,GAAE,EAAU,WAAW,CAAG,UAAA,EAC/C,AAAC,EAAS,YAAY,GAAE,EAAU,YAAY,CAAG,UAAA,GACjD,CAAC,EAAS,gBAAgB,EAAI,EAAS,gBAAgB,GAAI,IAC3D,EAAU,gBAAgB,CAAG,wBAAA,EAC7B,AAAC,EAAS,YAAY,CAAC,IAAI,KAC3B,EAAU,YAAY,CAAG,mBAAA,GACzB,CAAC,EAAS,YAAY,EAAI,EAAS,YAAY,GAAI,IACnD,EAAU,YAAY,CAAG,2BAAA,EAC7B,EAAU,GAC+B,IAAlC,OAAO,IAAI,CAAC,GAAW,MAAM,CACxC,MAcQ,EAAa,GACb,EAAY,CACR,YAAa,aACb,aAAc,UACd,iBAAkB,EAClB,aAAc,GACd,aAAc,CAClB,GACA,IAER,EAsJgB,UAAU,uGACb,qBAMjB,EevMI,adnBsD,CAAC,AcmB1C,CdlB8C,WAAS,cACT,CAAY,UACZ,CAAQ,CACX,IACxD,GAAM,CAAC,EAAU,EAAY,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EACpC,GAAa,CACT,YAAa,kBACb,aAAc,CAClB,GAGE,CAAC,EAAQ,EAAU,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EAAyB,CAAC,GAaxD,EAAe,CAAsC,EAAU,KACjE,EAAY,CAAE,GAAG,CAAQ,CAAE,CAAC,EAAM,CAAE,CAAM,GACtC,CAAM,CAAC,EAAM,EAAE,AACf,EAAU,AAAC,IAAU,CAAE,EAAH,CAAM,CAAI,CAAE,CAAC,EAAM,CAAE,GAAG,CAAC,CAErD,EAaA,MACI,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,qEACX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,8CACX,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,+CAAsC,wBAGpD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAAS,EACT,UAAU,yFACV,MAAM,kBAEN,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CACG,UAAU,UACV,KAAK,OACL,OAAO,eACP,QAAQ,qBAER,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CACG,cAAc,QACd,eAAe,QACf,YAAa,EACb,EAAE,gCAMlB,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,kDAEX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,gBAC5C,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEhD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,MAAO,EAAS,WAAW,CAC3B,SAAU,AAAC,GACP,EACI,cACA,EAAE,MAAM,CAAC,KAAK,EAGtB,UAAU,uIAET,AA1EA,CAAC,kBAAmB,eAAgB,gBAAgB,CA0EvC,GAAG,CAAE,AAAD,GACd,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CAAkB,MAAO,WACrB,GADQ,MAKpB,EAAO,WAAW,EACf,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,WAAW,MAK/D,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,sBACtC,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEtD,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,SACL,IAAI,IACJ,MAAO,EAAS,YAAY,CAC5B,SAAU,AAAC,GACP,EAAa,eAAgB,OAAO,EAAE,MAAM,CAAC,KAAK,GAEtD,UAAU,gIAEb,EAAO,YAAY,EAChB,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,YAAY,SAMpE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iEACX,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAAS,EACT,UAAU,sGACb,WAGD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAjGK,CAiGI,IAhGjB,CAlBS,KACb,IAAM,EAiBU,AAjB0B,CAAC,EAM3C,OALI,AAAC,EAAS,WAAW,GAAE,EAAU,WAAW,CAAG,UAAA,EAC/C,EAAC,EAAS,YAAY,EAAI,EAAS,YAAY,GAAI,GAAG,CACtD,EAAU,YAAY,CAAG,2BAAA,EAE7B,EAAU,GAC+B,IAAlC,OAAO,IAAI,CAAC,GAAW,MAAM,CACxC,MAWQ,EAAa,GACb,EAAY,CACR,YAAa,kBACb,aAAc,CAClB,GACA,IAER,EAyFgB,UAAU,uGACb,qBAMjB,EcrHI,abpBsD,CAAC,AaoB1C,CbnB8C,WAAS,cACT,CAAY,UACZ,CAAQ,CACX,IACxD,GAAM,CAAC,EAAU,EAAY,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EACpC,GAAa,CACT,YAAa,eACb,aAAc,CAClB,GAGE,CAAC,EAAQ,EAAU,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EAAyB,CAAC,GAaxD,EAAc,CAAsC,EAAU,KAChE,EAAY,CAAE,GAAG,CAAQ,CAAE,CAAC,EAAM,CAAE,CAAM,GACtC,CAAM,CAAC,EAAM,EAAE,AACf,EAAU,AAAC,IAAU,CAAE,EAAH,CAAM,CAAI,CAAE,CAAC,EAAM,CAAE,EAAG,CAAC,EAErD,EAaA,MACI,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,qEACX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,8CACX,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,+CAAsC,wBAGpD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAAS,EACT,UAAU,yFACV,MAAM,kBAEN,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CACG,UAAU,UACV,KAAK,OACL,OAAO,eACP,QAAQ,qBAER,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CACG,cAAc,QACd,eAAe,QACf,YAAa,EACb,EAAE,gCAMlB,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,kDAEX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,gBAC5C,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEhD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,MAAO,EAAS,WAAW,CAC3B,SAAU,AAAC,GACP,EACI,cACA,EAAE,MAAM,CAAC,KAAK,EAGtB,UAAU,uIAET,AA1EA,CAAC,eAAgB,iBAAkB,aAAa,oBAAoB,CA0EvD,GAAG,CAAC,AAAC,GACf,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CAAkB,MAAO,WACrB,GADQ,MAKpB,EAAO,WAAW,EACf,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,WAAW,MAK/D,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,sBACtC,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEtD,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,SACL,IAAI,IACJ,MAAO,EAAS,YAAY,CAC5B,SAAU,AAAC,GACP,EAAa,eAAgB,OAAO,EAAE,MAAM,CAAC,KAAK,GAEtD,UAAU,gIAEb,EAAO,YAAY,EAChB,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,YAAY,SAMpE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iEACX,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAAS,EACT,UAAU,sGACb,WAGD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAjGK,CAiGI,IAhGjB,CAlBS,KACb,IAAM,EAiBU,AAjB0B,CAAC,EAM3C,OALI,AAAC,EAAS,WAAW,GAAE,EAAU,WAAW,CAAG,UAAA,GAC/C,CAAC,EAAS,YAAY,EAAI,EAAS,YAAY,GAAI,GAAG,CACtD,EAAU,YAAY,CAAG,2BAAA,EAE7B,EAAU,GAC+B,IAAlC,OAAO,IAAI,CAAC,GAAW,MAAM,CACxC,MAWQ,EAAa,GACb,EAAY,CACR,YAAa,eACb,aAAc,CAClB,GACA,IAER,EAyFgB,UAAU,uGACb,qBAMjB,EapHI,6BZlBkE,CYkBrC,AZlBsC,WACI,CAAS,cACT,CAAY,CACZ,UAAQ,CACX,IACpE,GAAM,CAAC,EAAU,EAAY,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EACpC,GAAa,CACT,YAAa,UACb,UAAW,EACX,aAAc,GACd,MAAO,GACP,aAAc,CAClB,GAGE,CAAC,EAAQ,EAAU,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EAAyB,CAAC,GAgBxD,EAAc,CAA8C,EAAU,KACxE,EAAY,CAAE,GAAG,CAAQ,CAAE,CAAC,EAAM,CAAE,CAAM,GACtC,CAAM,CAAC,EAAM,EAAE,AACf,EAAU,AAAC,IAAU,CAAE,EAAH,CAAM,CAAI,CAAE,CAAC,EAAM,CAAE,GAAG,CAAC,CAErD,EAgBA,MACI,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,qEACX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,8CACX,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,+CAAsC,wCACpD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAAS,EACT,UAAU,yFACV,MAAM,kBAEN,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,UAAU,KAAK,OAAO,OAAO,eAAe,QAAQ,qBAC/D,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,cAAc,QAAQ,eAAe,QAAQ,YAAa,EAAG,EAAE,gCAKjF,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,kDAEX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,gBAC5C,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEhD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,MAAO,EAAS,WAAW,CAC3B,SAAU,AAAC,GACP,EAAa,cAAe,EAAE,MAAM,CAAC,KAAK,EAE9C,UAAU,uIAET,AAhEA,CAAC,UAAW,gBAAiB,mBAAoB,QAAS,eAAe,CAgE5D,GAAG,CAAC,AAAC,GACf,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CAAkB,MAAO,WACrB,GADQ,MAKpB,EAAO,WAAW,EAAI,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,WAAW,MAIlF,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,mBACzC,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEnD,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,SACL,IAAI,IACJ,MAAO,EAAS,SAAS,CACzB,SAAU,AAAC,GAAM,EAAa,YAAa,OAAO,EAAE,MAAM,CAAC,KAAK,GAChE,UAAU,gIAEb,EAAO,SAAS,EAAI,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,SAAS,MAI9E,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,iBAC3C,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEjD,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,OACL,MAAO,EAAS,YAAY,CAC5B,SAAU,AAAC,GAAM,EAAa,eAAgB,EAAE,MAAM,CAAC,KAAK,EAC5D,UAAU,gIAEb,EAAO,YAAY,EAAI,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,YAAY,MAIpF,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CAAM,UAAU,qDAA4C,qBAC7D,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,OACL,MAAO,EAAS,KAAK,EAAI,GACzB,SAAU,AAAC,GAAM,EAAa,QAAS,EAAE,MAAM,CAAC,KAAK,EACrD,UAAU,mIAKlB,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,sBACtC,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEtD,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,SACL,IAAI,IACJ,MAAO,EAAS,YAAY,CAC5B,SAAU,AAAC,GAAM,EAAa,eAAgB,OAAO,EAAE,MAAM,CAAC,KAAK,GACnE,UAAU,gIAEb,EAAO,YAAY,EAAI,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,YAAY,SAKxF,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iEACX,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAAS,EACT,UAAU,sGACb,WAGD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAvHK,CAuHI,IAtHjB,CApBS,KACb,IAAM,EAAoC,AAmB1B,CAnB2B,EAQ3C,OANI,AAAC,EAAS,WAAW,GAAE,EAAU,WAAW,CAAG,UAAA,GAC/C,CAAC,EAAS,SAAS,EAAI,EAAS,SAAS,GAAI,GAAG,GAAU,SAAS,CAAG,wBAAA,EACrE,AAAD,EAAU,YAAY,CAAC,IAAI,KAAI,EAAU,YAAY,CAAG,mBAAA,GACxD,CAAC,EAAS,YAAY,EAAI,EAAS,YAAY,GAAI,IAAG,EAAU,YAAY,CAAG,2BAAA,EAEnF,EAAU,GAC+B,IAAlC,OAAO,IAAI,CAAC,GAAW,MAAM,CACxC,MAWQ,EAAa,GACb,EAAY,CACR,YAAa,UACb,UAAW,EACX,aAAc,GACd,MAAO,GACP,aAAc,CAClB,GACA,IAER,EA4GgB,UAAU,uGACb,qBAMjB,EYlJI,uBXnBkE,CAAC,AWmB5C,CXlBgD,WAAS,cACT,CAAY,UACZ,CAAQ,CACX,IACpE,GAAM,CAAC,EAAU,EAAY,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EACpC,GAAa,CACT,YAAa,UACb,UAAW,EACX,aAAc,GACd,MAAO,GACP,aAAc,CAClB,GAGE,CAAC,EAAQ,EAAU,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EAAyB,CAAC,GAiBxD,EAAe,CAA6C,EAAU,KACxE,EAAY,CAAE,GAAG,CAAQ,CAAE,CAAC,EAAM,CAAE,CAAM,GACtC,CAAM,CAAC,EAAM,EAAE,AACf,EAAU,AAAC,IAAU,CAAE,EAAH,CAAM,CAAI,CAAE,CAAC,EAAM,CAAE,GAAG,CAAC,CAErD,EAgBA,MACI,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,qEACX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,8CACX,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,+CAAsC,iCACpD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAAS,EACT,UAAU,yFACV,MAAM,kBAEN,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CACG,UAAU,UACV,KAAK,OACL,OAAO,eACP,QAAQ,qBAER,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,cAAc,QAAQ,eAAe,QAAQ,YAAa,EAAG,EAAE,gCAKjF,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,kDAEX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,gBAC5C,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEhD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,MAAO,EAAS,WAAW,CAC3B,SAAU,AAAC,GAAM,EAAa,cAAe,EAAE,MAAM,CAAC,KAAK,EAC3D,UAAU,uIAET,AArEA,CAAC,UAAW,gBAAiB,mBAAoB,QAAS,eAAe,CAqE5D,GAAG,CAAC,AAAC,GACf,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CAAkB,MAAO,WACrB,GADQ,MAKpB,EAAO,WAAW,EAAI,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,WAAW,MAIlF,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,mBACzC,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEnD,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,SACL,IAAI,IACJ,MAAO,EAAS,SAAS,CACzB,SAAU,AAAC,GAAM,EAAa,YAAa,OAAO,EAAE,MAAM,CAAC,KAAK,GAChE,UAAU,gIAEb,EAAO,SAAS,EAAI,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,SAAS,MAI9E,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,iBAC3C,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEjD,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,OACL,MAAO,EAAS,YAAY,CAC5B,SAAU,AAAC,GAAM,EAAa,eAAgB,EAAE,MAAM,CAAC,KAAK,EAC5D,UAAU,gIAEb,EAAO,YAAY,EAAI,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,YAAY,MAIpF,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CAAM,UAAU,qDAA4C,qBAC7D,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,OACL,MAAO,EAAS,KAAK,EAAI,GACzB,SAAU,AAAC,GAAM,EAAa,QAAS,EAAE,MAAM,CAAC,KAAK,EACrD,UAAU,mIAKlB,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,sBACtC,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEtD,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,SACL,IAAI,IACJ,MAAO,EAAS,YAAY,CAC5B,SAAU,AAAC,GAAM,EAAa,eAAgB,OAAO,EAAE,MAAM,CAAC,KAAK,GACnE,UAAU,gIAEb,EAAO,YAAY,EAAI,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,YAAY,SAKxF,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iEACX,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAAS,EACT,UAAU,sGACb,WAGD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QA1HK,CA0HI,IAzHjB,AAtBS,MACb,IAAM,EAAoC,AAqB1B,CArB2B,EAU3C,OARI,AAAC,EAAS,WAAW,GAAE,EAAU,WAAW,CAAG,UAAA,EAC/C,EAAC,EAAS,SAAS,EAAI,EAAS,SAAS,GAAI,IAC7C,EAAU,SAAS,CAAG,wBAAA,EACtB,AAAC,EAAS,YAAY,GAAE,EAAU,YAAY,CAAG,UAAA,GACjD,CAAC,EAAS,YAAY,EAAI,EAAS,YAAY,GAAI,IACnD,EAAU,YAAY,CAAG,2BAAA,EAE7B,EAAU,GAC+B,IAAlC,OAAO,IAAI,CAAC,GAAW,MAAM,CACxC,MAWQ,EAAa,GACb,EAAY,CACR,YAAa,UACb,UAAW,EACX,aAAc,GACd,MAAO,GACP,aAAc,CAClB,GACA,IAER,EA+GgB,UAAU,uGACb,qBAMjB,EWrJI,YVrBgD,CAAC,AUqBrC,WVpByC,CAAS,cACT,CAAY,CACZ,UAAQ,CACX,IAClD,GAAM,CAAC,EAAU,EAAY,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EACpC,GAAa,CACT,YAAa,SACb,mBAAe,EACf,mBAAe,EACf,kBAAc,CAClB,GAGE,CAAC,EAAQ,EAAU,CAAG,CAAA,EAAA,EAAA,QAAQ,AAAR,EAAiC,CAAC,GA8BxD,EAAe,CAAoC,EAAU,KAC/D,EAAY,CAAE,GAAG,CAAQ,CAAE,CAAC,EAAM,CAAE,CAAM,GACtC,CAAM,CAAC,EAAM,EAAE,AACf,EAAU,AAAC,IAAU,CAAE,EAAH,CAAM,CAAI,CAAE,CAAC,EAAM,CAAE,GAAG,CAAC,CAErD,EAeA,MACI,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,qEACX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,8CACX,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,+CAAsC,uBAGpD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAAS,EACT,UAAU,yFACV,MAAM,kBAEN,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CACG,UAAU,UACV,KAAK,OACL,OAAO,eACP,QAAQ,qBAER,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CACG,cAAc,QACd,eAAe,QACf,YAAa,EACb,EAAE,gCAMlB,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,kDAEX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,gBAC5C,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEhD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,MAAO,EAAS,WAAW,CAC3B,SAAU,AAAC,GACP,EAAa,cAAe,EAAE,MAAM,CAAC,KAAK,EAE9C,UAAU,uIAET,AA1FA,CACjB,SACA,iBACA,kBACA,kBACA,qBACH,CAoFiC,GAAG,CAAC,AAAC,GACf,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CAAkB,MAAO,WACrB,GADQ,MAKpB,EAAO,WAAW,EACf,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,WAAW,MAK/D,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CAAM,UAAU,qDAA4C,yBAG7D,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,SACL,IAAI,IACJ,MAAO,EAAS,aAAa,EAAI,GACjC,SAAU,AAAC,GAAM,EAAa,gBAAiB,EAAE,MAAM,CAAC,KAAK,CAAG,OAAO,EAAE,MAAM,CAAC,KAAK,OAAI,GACzF,UAAU,gIAEb,EAAO,aAAa,EACjB,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,aAAa,MAKjE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CAAM,UAAU,qDAA4C,yBAG7D,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,SACL,IAAI,IACJ,MAAO,EAAS,aAAa,EAAI,GACjC,SAAU,AAAC,GAAM,EAAa,gBAAiB,EAAE,MAAM,CAAC,KAAK,CAAG,OAAO,EAAE,MAAM,CAAC,KAAK,OAAI,GACzF,UAAU,gIAEb,EAAO,aAAa,EACjB,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,aAAa,MAKjE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CAAM,UAAU,qDAA4C,uBAG7D,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,SACL,IAAI,IACJ,MAAO,EAAS,YAAY,EAAI,GAChC,SAAU,AAAC,GAAM,EAAa,eAAgB,EAAE,MAAM,CAAC,KAAK,CAAG,OAAO,EAAE,MAAM,CAAC,KAAK,OAAI,GACxF,UAAU,gIAEb,EAAO,YAAY,EAChB,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,YAAY,SAMpE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iEACX,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAAS,EACT,UAAU,sGACb,WAGD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAhIK,CAgII,IA/HjB,CA7BS,KACb,IAAM,EA4BU,AA5B0B,CAAC,EAiB3C,OAfI,AAAC,EAAS,WAAW,GAAE,EAAU,WAAW,CAAG,UAAA,OAEpB,IAA3B,EAAS,aAAa,EAAkB,EAAS,aAAa,EAAI,GAAG,AACrE,GAAU,aAAa,CAAG,kBAAA,OAGC,IAA3B,EAAS,aAAa,EAAkB,EAAS,aAAa,EAAI,GAAG,CACrE,EAAU,aAAa,CAAG,kBAAA,OAGA,IAA1B,EAAS,YAAY,EAAkB,EAAS,YAAY,EAAI,GAAG,CACnE,EAAU,YAAY,CAAG,kBAAA,EAG7B,EAAU,GAC+B,IAAlC,OAAO,IAAI,CAAC,GAAW,MAAM,AACxC,OAWQ,EAAa,GACb,EAAY,CACR,YAAa,SACb,mBAAe,EACf,mBAAe,EACf,kBAAc,CAClB,GACA,IAER,EAsHgB,UAAU,uGACb,qBAMjB,EUrKI,cTboD,CAAC,ASavC,CTZ2C,WAAS,cACT,CAAY,UACZ,CAAQ,CACX,IACtD,GAAM,CAAC,EAAU,EAAY,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EACpC,GAAa,CACT,oBAAqB,eACrB,WAAY,CAChB,GAGE,CAAC,EAAQ,EAAU,CAAG,CAAA,EAAA,EAAA,QAAQ,AAAR,EAAiC,CAAC,GA2BxD,EAAc,CAAuC,EAAU,KACjE,EAAY,CAAE,GAAG,CAAQ,CAAE,CAAC,EAAM,CAAE,CAAM,GACtC,CAAM,CAAC,EAAM,EAAE,AACf,EAAU,AAAC,IAAU,CAAE,EAAH,CAAM,CAAI,CAAE,CAAC,EAAM,CAAE,GAAG,CAAC,CAErD,EAaA,MACI,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,qEACX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,8CACX,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,+CAAsC,yBAGpD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAAS,EACT,UAAU,yFACV,MAAM,kBAEN,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CACG,UAAU,UACV,KAAK,OACL,OAAO,eACP,QAAQ,qBAER,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CACG,cAAc,QACd,eAAe,QACf,YAAa,EACb,EAAE,gCAMlB,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,kDAEX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,gBAC5C,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEhD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,MAAO,EAAS,mBAAmB,CACnC,SAAU,AAAC,GACP,EACI,sBACA,EAAE,MAAM,CAAC,KAAK,EAGtB,UAAU,uIAET,AAvF8C,CAC/D,eACA,aACA,gBACA,cACA,aACA,oBACA,iBACA,eACA,8BACA,sBACA,UACH,CA2EiC,GAAG,CAAC,AAAC,GACf,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CAAkB,MAAO,WACrB,GADQ,MAKpB,EAAO,mBAAmB,EACvB,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,mBAAmB,MAKvE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,eAC7C,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAE/C,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,SACL,IAAI,IACJ,MAAO,EAAS,UAAU,CAC1B,SAAU,AAAC,GAAM,EAAa,aAAc,OAAO,EAAE,MAAM,CAAC,KAAK,GACjE,UAAU,gIAEb,EAAO,UAAU,EACd,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,UAAU,SAMlE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iEACX,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAAS,EACT,UAAU,sGACb,WAGD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QA/FK,CA+FI,IA9FjB,CAnBS,KACb,IAAM,EAkBU,AAlB0B,CAAC,EAO3C,OANK,AAAD,EAAU,mBAAmB,GAC7B,EAAU,mBAAmB,CAAG,UAAA,GAChC,CAAC,EAAS,UAAU,EAAI,EAAS,UAAU,GAAI,GAC/C,GAAU,UAAU,CAAG,8BAAA,EAE3B,EAAU,GAC+B,IAAlC,OAAO,IAAI,CAAC,GAAW,MAAM,CACxC,MAWQ,EAAa,GACb,EAAY,CACR,oBAAqB,eACrB,WAAY,CAChB,GACA,IAER,EAuFgB,UAAU,wGACb,qBAMjB,ESvII,eRjBsD,CAAC,AQiBxC,WRhB4C,CAAS,cACT,CAAY,CACZ,UAAQ,CACX,IACxD,GAAM,CAAC,EAAU,EAAY,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EACpC,GAAa,CACT,YAAa,yBACb,aAAc,CAClB,GAGE,CAAC,EAAQ,EAAU,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EAAyB,CAAC,GAuBxD,EAAe,CAAwC,EAAU,KACnE,EAAY,CAAE,GAAG,CAAQ,CAAE,CAAC,EAAM,CAAE,CAAM,GACtC,CAAM,CAAC,EAAM,EAAE,AACf,EAAU,AAAC,IAAU,CAAE,EAAH,CAAM,CAAI,CAAE,CAAC,EAAM,CAAE,GAAG,CAAC,CAErD,EAaA,MACI,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,qEACX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,8CACX,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,+CAAsC,0BAGpD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAAS,EACT,UAAU,yFACV,MAAM,kBAEN,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CACG,UAAU,UACV,KAAK,OACL,OAAO,eACP,QAAQ,qBAER,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CACG,cAAc,QACd,eAAe,QACf,YAAa,EACb,EAAE,gCAMlB,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,kDAEX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,sDAA4C,gBAC5C,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEhD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,MAAO,EAAS,WAAW,CAC3B,SAAU,AAAC,GACP,EACI,cACA,EAAE,MAAM,CAAC,KAAK,EAGtB,UAAU,uIAET,AAnFuC,CACxD,yBACA,gBACA,WACA,WACA,kBACA,cACA,eACA,SACH,CA0EiC,GAAG,CAAC,AAAC,GACf,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CAAkB,MAAO,WACrB,GADQ,MAKpB,EAAO,WAAW,EACf,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,WAAW,MAK/D,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CAAM,UAAU,qDAA4C,uBAG7D,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,SACL,IAAI,IACJ,MAAO,EAAS,YAAY,EAAI,GAChC,SAAU,AAAC,GACP,EAAa,eAAgB,OAAO,EAAE,MAAM,CAAC,KAAK,GAEtD,UAAU,gIAEb,EAAO,YAAY,EAChB,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,EAAO,YAAY,SAMpE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iEACX,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAAS,EACT,UAAU,sGACb,WAGD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAjGK,CAiGI,IAhGjB,CAlBS,KACb,IAAM,EAiBU,AAjB0B,CAAC,EAM3C,OALI,AAAC,EAAS,WAAW,GAAE,EAAU,WAAW,CAAG,UAAA,OACrB,IAA1B,EAAS,YAAY,EAAkB,EAAS,YAAY,EAAI,GAAG,CACnE,EAAU,YAAY,CAAG,2BAAA,EAE7B,EAAU,GAC+B,IAAlC,OAAO,IAAI,CAAC,GAAW,MAAM,CACxC,MAWQ,EAAa,GACb,EAAY,CACR,YAAa,yBACb,aAAc,CAClB,GACA,IAER,EAyFgB,UAAU,uGACb,qBAMjB,EQjII,cPzBoD,CAAC,AOyBvC,CPzBwC,WAAS,cAAE,CAAY,CAAE,UAAQ,CAAC,GAGpF,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iFACX,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,+CAAsC,2BAGpD,CAAA,EAAA,EAAA,IAAA,EAAC,IAAA,CAAE,UAAU,0BAAgB,OACrB,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,uBAAc,qBAAuB,iHOkBrE,qBN5B0D,CAAC,AM4BtC,WN5BuC,CAAS,cAAE,CAAY,UAAE,CAAQ,CAAC,GAE1F,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iFACX,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,+CAAsC,2BAGpD,CAAA,EAAA,EAAA,IAAA,EAAC,IAAA,CAAE,UAAU,0BAAgB,OACrB,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,uBAAc,mBAAqB,iHMsBnE,iBL9BwD,CAAC,AK8BxC,WL9ByC,CAAS,cAAE,CAAY,UAAE,CAAQ,CAAE,GAEzF,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iFACX,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,+CAAsC,2BAGpD,CAAA,EAAA,EAAA,IAAA,EAAC,IAAA,CAAE,UAAU,0BAAgB,OACrB,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,uBAAc,mBAAqB,iHKwBnE,+BJ/ByE,CI+B1C,AJ/B2C,WAAC,CAAS,cAAE,CAAY,UAAE,CAAQ,CACpD,GAEpD,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iFACX,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,+CAAsC,2BAGpD,CAAA,EAAA,EAAA,IAAA,EAAC,IAAA,CAAE,UAAU,0BAAgB,OACrB,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,uBAAc,8BAAgC,iHIwB9E,4BHjC6E,CAAC,AGiClD,WHjCmD,CAAS,cAAE,CAAY,UAAE,CAAQ,CAAE,GAE9G,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iFACX,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,+CAAsC,2BAGpD,CAAA,EAAA,EAAA,IAAA,EAAC,IAAA,CAAE,UAAU,0BAAgB,OACrB,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,uBAAc,iCAAmC,iHG2BjF,sBFjC0E,CAAC,AEiCrD,WFjCsD,CAAS,cAAE,CAAY,UAAE,CAAQ,CACnD,GAEtD,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iFACX,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,+CAAsC,2BAGpD,CAAA,EAAA,EAAA,IAAA,EAAC,IAAA,CAAE,UAAU,0BAAgB,OACrB,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,uBAAc,mBAAqB,iHE0BnE,0BDlCgF,CCkCtD,ADlCuD,WAAC,CAAS,cAAE,CAAY,UAAE,CAAQ,CACvC,GAExE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iFACX,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,+CAAsC,2BAGpD,CAAA,EAAA,EAAA,IAAA,EAAC,IAAA,CAAE,UAAU,0BAAgB,OACrB,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,uBAAc,mBAAqB,gHC2BvE,EC7BM,EAAiB,CAAC,CAAE,SAAO,OAAE,CAAK,UAAE,CAAQ,CAIjD,GAoCO,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,mIACX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,2CACX,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,sFACX,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,+CAAuC,EAAQ,MAEnE,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,0BACX,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,sDACR,CAzCI,KACrB,GAAuB,UAAnB,OAAO,GAAoC,OAAZ,GAAoB,CAAC,MAAM,OAAO,CAAC,GAAU,CAC5E,IAAM,EAAU,OAAO,OAAO,CAAC,GACzB,EAAyB,EAAE,CAyBjC,OAtBA,EAAQ,KAAK,CAAC,EAAG,GAAG,OAAO,CAAC,CAAC,CAAC,EAAK,EAAM,IAErC,IAAM,EAAe,EAChB,OAAO,CAAC,WAAY,OACpB,OAAO,CAAC,KAAM,KACd,IAAI,GACJ,KAAK,CAAC,KACN,GAAG,CAAC,GAAQ,EAAK,MAAM,CAAC,GAAG,WAAW,GAAK,EAAK,KAAK,CAAC,GAAG,WAAW,IACpE,IAAI,CAAC,KAGN,EAAiB,OAAO,GACP,UAAjB,OAAO,GAAsB,AAAU,MAAM,KAC7C,EAAiB,MAAM,OAAO,CAAC,GAAS,CAAC,CAAC,EAAE,EAAM,MAAM,CAAC,OAAO,CAAC,CAAG,OAAA,EAIpE,GAAqC,SAAnB,GAAgD,aAAa,CAAhC,GAC/C,EAAa,IAAI,CAAC,CAAA,EAAG,EAAa,EAAE,EAAE,EAAA,CAAgB,CAE9D,GAEO,EAAa,IAAI,CAAC,MAC7B,CACA,MAAO,CAAC,QAAQ,EAAE,EAAQ,EAAA,CAAG,CACjC,WAcQ,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,QAAS,IAAM,EAAS,GACxB,UAAU,kFACV,MAAM,0BAEN,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,UAAU,KAAK,OAAO,OAAO,eAAe,QAAQ,qBAC/D,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,cAAc,QAAQ,eAAe,QAAQ,YAAa,EAAG,EAAE,gCAO1E,SAAS,EAAc,MAAE,CAAI,SAAE,CAAO,QAAE,CAAM,QAAE,CAAM,CAAS,EAC1E,GAAM,CAAC,EAAQ,EAAU,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EAAS,IACvC,CAAC,EAAiB,EAAmB,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,GAAC,GAajD,EAAsB,AAAC,IAEzB,EAAQ,CAAE,UADe,CACJ,CADS,SAAS,CAAC,MAAM,CAAC,CAAC,EAAG,IAAM,IAAM,EACzB,EAC1C,EAEA,CAAA,EAAA,EAAA,SAAA,AAAS,EAAC,KACN,EAAQ,CAAE,UAAW,EAAE,AAAC,EAC5B,EAAE,CAAC,EAAK,QAAQ,CAAC,EAAQ,EAIzB,IAAM,EAAc,CAAc,CAAC,EAAK,QAAQ,CAAC,CAEjD,MACI,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,IAAA,EAAC,KAAA,CAAG,UAAU,mCAAyB,OAC9B,EAAK,QAAQ,CAAC,OAAO,CAAC,KAAM,KAAK,eAG1C,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,QAAS,IAAM,GAAmB,GAClC,UAAU,yEACb,gBAIA,GAAmB,GAChB,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,CAAY,SAlBR,CAkBkB,GAlBZ,GAAmB,GAkBG,aAhCpB,AAAC,CAgCiC,GA/BvD,EAAQ,CAAE,UAAW,IAAI,EAAK,SAAS,CAAE,EAAQ,AAAC,GAClD,GAAmB,EACvB,IAgCS,GAAU,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,gCAAwB,IAG/C,EAAK,SAAS,CAAC,MAAM,CAAG,GACrB,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACX,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,6CACX,CAAA,EAAA,EAAA,IAAA,EAAC,KAAA,CAAG,UAAU,wCAA8B,mBAAiB,EAAK,SAAS,CAAC,MAAM,CAAC,SAEvF,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,qBACV,EAAK,SAAS,CAAC,GAAG,CAAC,CAAC,EAAS,IAC1B,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,CAEG,QAAS,EACT,MAAO,EACP,SAAU,GAHL,SAUzB,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sCACX,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,QAAS,EACT,UAAU,wDACb,SAGD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,QAtEM,CAsEG,IArErB,EAAU,IACV,GACJ,EAoEgB,UAAU,2EACb,cAMjB,CCjJe,SAAS,EAAY,CAAE,MAAI,SAAE,CAAO,QAAE,CAAM,UAAE,CAAQ,CAAS,EAC1E,GAAM,CAAC,EAAS,EAAW,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EAAU,CAAE,MAAO,GAAI,YAAa,EAAG,GACvE,CAAC,EAAQ,EAAU,CAAG,CAAA,EAAA,EAAA,QAAQ,AAAR,EAAiB,IACvC,CAAC,EAAa,EAAe,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,GAAC,GAEzC,EAAe,AAAC,IAClB,GAAM,MAAE,CAAI,OAAE,CAAK,CAAE,CAAG,EAAE,MAAM,CAChC,EAAW,CAAE,GAAG,CAAO,CAAE,CAAC,EAAK,CAAE,CAAM,GACnC,GAAQ,EAAU,GAC1B,EAaM,AAdyB,EAcT,AAAC,IAEnB,EAAQ,CAAE,SADc,CACJ,CADS,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAG,AAfiB,IAeP,IAAU,EACjC,EACxC,EASM,EAAY,KACd,EAAW,CAAE,MAAO,GAAI,YAAa,EAAG,GACxC,EAAU,IACV,GAAe,EACnB,EAEA,MACI,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,uDAEX,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,gBACX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,mDACX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,WACG,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,4CAAmC,qBACjD,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,sCAA6B,yDAE9C,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,oEAA2D,oBAOjF,CAAC,GACE,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,gBACX,CAAA,EAAA,EAAA,IAAA,EAAC,SAAA,CACG,KAAK,SACL,QAAS,IAAM,GAAe,GAC9B,UAAU,gOAEV,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,eAAe,KAAK,OAAO,OAAO,eAAe,QAAQ,qBACpE,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,cAAc,QAAQ,eAAe,QAAQ,YAAa,EAAG,EAAE,iCACnE,mBAOjB,GACG,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,2EACX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,mDACX,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,+CAAsC,oBACpD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAAS,EACT,UAAU,+DAEV,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,UAAU,KAAK,OAAO,OAAO,eAAe,QAAQ,qBAC/D,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,cAAc,QAAQ,eAAe,QAAQ,YAAa,EAAG,EAAE,gCAKjF,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,gCAEX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,0BACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,yDAA+C,iBAC9C,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEjD,CAAA,EAAA,EAAA,GAAA,EAAC,QAAA,CACG,KAAK,OACL,KAAK,QACL,MAAO,EAAQ,KAAK,EAAI,GACxB,SAAU,EACV,YAAY,qCACZ,UAAW,CAAC,+HAA+H,EACvI,EAAS,2BAA6B,kBAAA,CACxC,MAKV,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,0BACX,CAAA,EAAA,EAAA,IAAA,EAAC,QAAA,CAAM,UAAU,yDAA+C,eAChD,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,iCAAwB,kBAExD,CAAA,EAAA,EAAA,GAAA,EAAC,WAAA,CACG,KAAK,cACL,MAAO,EAAQ,WAAW,EAAI,GAC9B,SAAU,EACV,KAAM,EACN,YAAY,sCACZ,UAAU,qKAMrB,GACG,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,+DACX,CAAA,EAAA,EAAA,IAAA,EAAC,IAAA,CAAE,UAAU,mDACT,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,eAAe,KAAK,OAAO,OAAO,eAAe,QAAQ,qBACpE,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,cAAc,QAAQ,eAAe,QAAQ,YAAa,EAAG,EAAE,wDAExE,OAMb,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,wCACX,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAAS,EACT,UAAU,4GACb,WAGD,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QArIL,CAqIc,IApI7B,GAAI,CAAC,EAAQ,KAAK,EAAE,OAAQ,YACxB,EAAU,6BAGd,EAAQ,CAAE,SAAU,IAAI,EAAK,QAAQ,CAAE,EAAS,AAAD,GAC/C,EAAW,CAAE,MAAO,GAAI,YAAa,EAAG,GACxC,EAAU,IACV,GAAe,EACnB,EA6HwB,UAAU,mHACb,sBAQb,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iBACX,CAAA,EAAA,EAAA,IAAA,EAAC,KAAA,CAAG,UAAU,uEACV,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,8BAA8B,KAAK,OAAO,OAAO,eAAe,QAAQ,qBACnF,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,cAAc,QAAQ,eAAe,QAAQ,YAAa,EAAG,EAAE,oDACnE,mBACU,CAAA,EAAA,EAAA,IAAA,EAAC,OAAA,CAAK,UAAU,+BAAqB,IAAE,EAAK,QAAQ,CAAC,MAAM,CAAC,UAGtD,IAAzB,EAAK,QAAQ,CAAC,MAAM,CACjB,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,0FACX,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,uCAAuC,KAAK,OAAO,OAAO,eAAe,QAAQ,qBAC5F,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,cAAc,QAAQ,eAAe,QAAQ,YAAa,EAAG,EAAE,6JAEzE,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,sCAA6B,0BAC1C,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,iCAAwB,gDAGzC,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,sBACV,EAAK,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAG,IACnB,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAEG,UAAU,kGAEV,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,6CACX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,mBACX,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,mCACX,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,0CACf,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,+CAAuC,EAAE,KAAK,MAE/D,EAAE,WAAW,EACV,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,8CAAsC,EAAE,WAAW,MAGxE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iFACX,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAAS,IAAM,CAjKnD,EADsB,EAAK,OAChB,CADwB,CAAC,EAAY,EAEhD,EAgK+D,GA/J/D,GAAe,IAgKqB,EAjKtB,QAiKgC,sFACV,MAAM,wBAEN,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,UAAU,KAAK,OAAO,OAAO,eAAe,QAAQ,qBAC/D,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,cAAc,QAAQ,eAAe,QAAQ,YAAa,EAAG,EAAE,yGAG7E,CAAA,EAAA,EAAA,GAAA,EAAC,SAAA,CACG,KAAK,SACL,QAAS,IAAM,EAAc,GAC7B,UAAU,oFACV,MAAM,0BAEN,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,UAAU,KAAK,OAAO,OAAO,eAAe,QAAQ,qBAC/D,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,cAAc,QAAQ,eAAe,QAAQ,YAAa,EAAG,EAAE,4IA/BhF,SA2CzB,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,+DACX,CAAA,EAAA,EAAA,IAAA,EAAC,SAAA,CACG,KAAK,SACL,QAAS,EACT,UAAU,+NAEV,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,eAAe,KAAK,OAAO,OAAO,eAAe,QAAQ,qBACpE,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,cAAc,QAAQ,eAAe,QAAQ,YAAa,EAAG,EAAE,sBACnE,UAIV,CAAA,EAAA,EAAA,IAAA,EAAC,SAAA,CACG,KAAK,SACL,QAAS,EACT,SAAmC,IAAzB,EAAK,QAAQ,CAAC,MAAM,CAC9B,UAAW,CAAC,qJAAqJ,EAC7J,AAAyB,MAApB,QAAQ,CAAC,MAAM,CACd,iCACA,uDAAA,CACR,WAEF,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,eAAe,KAAK,OAAO,OAAO,eAAe,QAAQ,qBACpE,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,cAAc,QAAQ,eAAe,QAAQ,YAAa,EAAG,EAAE,qBACnE,6BAM1B,C5BjQA,IAAA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,OAyBA,IAAM,EAAgC,CAClC,KAAM,GACN,cAAe,GACf,UAAW,GACX,aAAc,GACd,SAAU,GACV,SAAU,GACV,WAAY,GACZ,eAAgB,EAAE,CAClB,YAAa,KACb,WAAY,EAAE,CACd,SAAU,KACV,UAAW,EAAE,CACb,SAAU,EAAE,AAChB,EAEe,SAAS,IACpB,IAAM,EAAS,CAAA,EAAA,EAAA,SAAS,AAAT,IACT,CAAC,EAAM,EAAQ,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EAAO,WACjC,CAAC,EAAM,EAAQ,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EAAe,GACzC,CAAC,EAAS,EAAW,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,GAAC,GAEjC,EAAW,KAEA,YAAT,EAAoB,EAAQ,aACd,cAAT,GAAsB,EAAQ,UAC3C,EAEM,EAAW,KACA,YAAT,EAAoB,EAAQ,aACd,cAAT,GAAsB,EAAQ,UAC3C,EAEM,EAAe,UAGjB,GAAI,CAAC,EAAK,IAAI,EAAI,CAAC,EAAK,aAAa,EAAI,CAAC,EAAK,QAAQ,EAAI,CAAC,EAAK,QAAQ,CAAE,CACvE,EAAM,KAAK,CAAC,4CACZ,EAAQ,WACR,MACJ,CAEA,GAAW,GACX,GAAI,CACA,IAAM,EAAK,IAAI,SACf,EAAG,MAAM,CAAC,OAAQ,EAAK,IAAI,EAC3B,EAAG,MAAM,CAAC,gBAAiB,EAAK,aAAa,EAC7C,EAAG,MAAM,CAAC,YAAa,EAAK,SAAS,EACrC,EAAG,MAAM,CAAC,eAAgB,EAAK,YAAY,EAC3C,EAAG,MAAM,CAAC,WAAY,EAAK,QAAQ,EACnC,EAAG,MAAM,CAAC,WAAY,EAAK,QAAQ,EACnC,EAAG,MAAM,CAAC,aAAc,EAAK,UAAU,EAEvC,EAAK,cAAc,CAAC,OAAO,CAAC,AAAC,IACzB,EAAG,MAAM,CAAC,iBAAkB,EAChC,GAEI,EAAK,WAAW,EAAE,AAClB,EAAG,MAAM,CAAC,cAAe,EAAK,WAAW,EAG7C,EAAK,UAAU,CAAC,OAAO,CAAC,AAAC,IACrB,EAAG,MAAM,CAAC,aAAc,EAC5B,GAEI,EAAK,QAAQ,EAAE,AACf,EAAG,MAAM,CAAC,WAAY,KAAK,SAAS,CAAC,EAAK,QAAQ,GAGtD,EAAG,MAAM,CAAC,YAAa,KAAK,SAAS,CAAC,EAAK,SAAS,GACpD,EAAG,MAAM,CAAC,WAAY,KAAK,SAAS,CAAC,EAAK,QAAQ,GAGlD,IAAM,EAAO,MAAM,MAAM,CAAA,EAAG,EAAA,mBAAmB,CAAC,kBAAkB,CAAC,CAAE,CACjE,OAAQ,OACR,YAAa,UACb,KAAM,CACV,GAEM,EAAO,MAAM,EAAK,IAAI,GACxB,EAAK,EAAE,EAAE,AACT,EAAM,OAAO,CAAC,kCACd,EAAQ,WACR,EAAQ,GACR,EAAO,OAAO,IAId,EAAM,KAAK,CAAC,EAAK,OAAO,EAAI,oBAEpC,CAAE,MAAO,EAAK,CACV,QAAQ,KAAK,CAAC,gBAAiB,GAC/B,EAAM,KAAK,CAAC,uBAChB,QAAU,CACN,GAAW,EACf,CACJ,EAEA,MACI,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,kCACX,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,CAAQ,UAAU,CAAA,CAAA,IACnB,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,gBACX,CAAA,EAAA,EAAA,IAAA,EAAC,IAAA,WAAE,QAAe,YAAT,EAAqB,EAAa,cAAT,EAAuB,EAAI,EAAE,YAGlE,AAAS,eACN,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,CACG,KAAM,EACN,QAAS,AAAC,GAAY,EAAQ,AAAC,GAAU,EAAE,EAAH,CAAM,CAAI,CAAE,GAAG,CAAO,CAAC,CAAC,EAChE,OAAQ,IAGN,cAAT,GACG,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,CACG,KAAM,EACN,QAAS,AAAC,GAAY,EAAQ,AAAC,IAAU,CAAE,EAAH,CAAM,CAAI,CAAE,GAAG,CAAO,CAAC,CAAC,EAChE,OAAQ,EACR,OAAQ,IAGN,YAAT,GACG,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,CACG,KAAM,EACN,QAAU,AAAD,GAAa,EAAQ,AAAC,IAAU,CAAE,EAAH,CAAM,CAAI,CAAE,GAAG,CAAO,CAAC,CAAC,EAChE,OAAQ,EACR,SAAU,IAIjB,GAAW,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,4BAAmB,oBAGxD","ignoreList":[1]}